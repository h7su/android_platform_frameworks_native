{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ce4e8af1_fa40d586",
        "filename": "libs/binder/include/binder/ParcelableHolder.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2020-12-29T04:26:35Z",
      "side": 1,
      "message": "I am not a fan of out parameter. Can we use something like android::base::Result\u003cstd::shared_ptr\u003cT\u003e\u003e or android::base::expected\u003cstd::shared_ptr\u003cT\u003e,status_t\u003e, or just std::tuple\u003c...\u003e?",
      "range": {
        "startLine": 73,
        "startChar": 27,
        "endLine": 73,
        "endChar": 50
      },
      "revId": "c165440bcd65b237d142cb5722957b629aac49d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb77e6f1_8ea5626f",
        "filename": "libs/binder/include/binder/ParcelableHolder.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-12-29T19:24:01Z",
      "side": 1,
      "message": "\u003e android::base\n\nlibbinder doesn\u0027t take a libbase dependency (this saves some memory, unless other things in the process use libbase).\n\n\u003e std::tuple\u003c...\u003e\n\nI\u0027m not a fan of this :P, always prefer explicit struct (w/ named types) over tuple:\n\n    struct ParcelableResult { status_t status; std::shared_ptr\u003cT\u003e ret; };\n\n\u003e I am not a fan of out parameter.\n\nHonestly though, it is the binder style (even w/ writeToParcel above). I think it fits here.",
      "parentUuid": "ce4e8af1_fa40d586",
      "range": {
        "startLine": 73,
        "startChar": 27,
        "endLine": 73,
        "endChar": 50
      },
      "revId": "c165440bcd65b237d142cb5722957b629aac49d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "253c19af_4181e373",
        "filename": "libs/binder/include/binder/ParcelableHolder.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1386891
      },
      "writtenOn": "2021-01-05T10:17:12Z",
      "side": 1,
      "message": "me either, but in the terms of the convention, out param seems to fit here..",
      "parentUuid": "eb77e6f1_8ea5626f",
      "range": {
        "startLine": 73,
        "startChar": 27,
        "endLine": 73,
        "endChar": 50
      },
      "revId": "c165440bcd65b237d142cb5722957b629aac49d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f894aff4_2a3df1d6",
        "filename": "libs/binder/include/binder/ParcelableHolder.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1386891
      },
      "writtenOn": "2021-01-06T01:10:07Z",
      "side": 1,
      "message": "resolved.",
      "parentUuid": "253c19af_4181e373",
      "range": {
        "startLine": 73,
        "startChar": 27,
        "endLine": 73,
        "endChar": 50
      },
      "revId": "c165440bcd65b237d142cb5722957b629aac49d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "216679b5_1f673bbe",
        "filename": "libs/binder/ndk/include_cpp/android/binder_parcelable_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2020-12-28T15:40:25Z",
      "side": 1,
      "message": "returning STATUS_OK while ret is set to null. A bit surprising. Clients should check both status and ret.\n\nOut of the scope: can we have a query method to see if ParacelableHolder is empty or not? (e.g has_value? or empty?) and make getParcelable() from empty holder fail?\nThis applies to Java/NDK backends as well.",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 101,
        "endChar": 29
      },
      "revId": "c165440bcd65b237d142cb5722957b629aac49d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f9108c9_be22d6a1",
        "filename": "libs/binder/ndk/include_cpp/android/binder_parcelable_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-12-28T19:54:46Z",
      "side": 1,
      "message": "or perhaps instead s/unique_ptr/optional/. I think this is fine",
      "parentUuid": "216679b5_1f673bbe",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 101,
        "endChar": 29
      },
      "revId": "c165440bcd65b237d142cb5722957b629aac49d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf62b983_62e72aba",
        "filename": "libs/binder/ndk/include_cpp/android/binder_parcelable_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1386891
      },
      "writtenOn": "2021-01-05T10:17:12Z",
      "side": 1,
      "message": "optional sounds good to me. done.\nBTW, for c++ side, shared_ptr looks proper because it holds the data as shared_ptr.",
      "parentUuid": "0f9108c9_be22d6a1",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 101,
        "endChar": 29
      },
      "revId": "c165440bcd65b237d142cb5722957b629aac49d5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}