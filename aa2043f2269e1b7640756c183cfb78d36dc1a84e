{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "998e6718_5f7ad7be",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-10-27T20:45:15Z",
      "side": 1,
      "message": "should ifdef out like this, but for 31",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 25
      },
      "revId": "aa2043f2269e1b7640756c183cfb78d36dc1a84e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4129fe96_2251b378",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-10-29T22:12:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "998e6718_5f7ad7be",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 25
      },
      "revId": "aa2043f2269e1b7640756c183cfb78d36dc1a84e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e7eeba1_a3c2107a",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 5
      },
      "lineNbr": 229,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2020-10-29T01:21:41Z",
      "side": 1,
      "message": "is this the descriptor passed to AIBinder_Class_define? If so that\u0027s a char, not a char16_t. I don\u0027t think we want to use char16_t in anything new, it\u0027s a pretty bad string type...",
      "range": {
        "startLine": 229,
        "startChar": 6,
        "endLine": 229,
        "endChar": 14
      },
      "revId": "aa2043f2269e1b7640756c183cfb78d36dc1a84e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4d3dd76_217b0f79",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 5
      },
      "lineNbr": 229,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2020-10-29T01:22:38Z",
      "side": 1,
      "message": "Also this needs CTS tests",
      "revId": "aa2043f2269e1b7640756c183cfb78d36dc1a84e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae62ce47_7c6125dc",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 5
      },
      "lineNbr": 229,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-10-29T21:51:27Z",
      "side": 1,
      "message": "yeah - and we\u0027ll probably go the direction of switching the wire format for these to be utf-8 if possible.\n\nhow bad would it be to have a heap allocation here though? or store an extra copy of the descriptor?",
      "parentUuid": "9e7eeba1_a3c2107a",
      "range": {
        "startLine": 229,
        "startChar": 6,
        "endLine": 229,
        "endChar": 14
      },
      "revId": "aa2043f2269e1b7640756c183cfb78d36dc1a84e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b79f22fb_894a2331",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 5
      },
      "lineNbr": 229,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-10-29T22:12:10Z",
      "side": 1,
      "message": "I considered allocating, but I wasn\u0027t sure we wanted to put de-allocation on the consumer without the consumer providing its own allocator, i.e. the way that AParcel_readString() works.\n\nStoring an extra copy of the descriptor sounds good to me, as there shouldn\u0027t be too many classes. Any reason that increasing the size of AIBinder_Class is problematic?",
      "parentUuid": "ae62ce47_7c6125dc",
      "range": {
        "startLine": 229,
        "startChar": 6,
        "endLine": 229,
        "endChar": 14
      },
      "revId": "aa2043f2269e1b7640756c183cfb78d36dc1a84e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8218d5d5_febe82b0",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 5
      },
      "lineNbr": 229,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-10-29T22:12:10Z",
      "side": 1,
      "message": "Ack, I\u0027ll add that once we decide on what the API should be re: UTF-16 or UTF-8.",
      "parentUuid": "f4d3dd76_217b0f79",
      "revId": "aa2043f2269e1b7640756c183cfb78d36dc1a84e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ad52c2a_f6bce9d7",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 5
      },
      "lineNbr": 229,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-10-30T22:15:09Z",
      "side": 1,
      "message": "It will be a problem eventually, taking up too much memory. There was a lot of work done saving space for descriptors in regular binder.\n\nAnd we already need the char16_t* allocated, for the C++ getInterfaceDescriptor const\u0026 return. Since we need a solution for that forever, I think char16_t is the best API here, since it doesn\u0027t add any new requirements to our implementation in terms of memory allocation.\n\nit is gross, but it\u0027s the most efficient :/\n\nI think likely because of this btw, we\u0027ll need to a new version of AIBinder_Class_define which takes a char16_t* which is guaranteed to live in read-only memory and will not go away, to avoid memory usage.\n\nJohn?",
      "parentUuid": "b79f22fb_894a2331",
      "range": {
        "startLine": 229,
        "startChar": 6,
        "endLine": 229,
        "endChar": 14
      },
      "revId": "aa2043f2269e1b7640756c183cfb78d36dc1a84e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "384de46d_83077131",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 5
      },
      "lineNbr": 229,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2020-10-30T22:55:36Z",
      "side": 1,
      "message": "This API is far more permanent than anything we have internally - why does getInterfaceDescriptor need to stay string16? \n\nI\u0027d push that it just holds onto the original char*, and as more things more to the NDK interface (or if they do) then that\u0027s all the less work to do to move off of string16 internally.\n\nAnd if memory usage is that much of a concern, then that\u0027s all the more reason to avoid char16_t / string16. Pretty sure these never see anything but ASCII right? Internal usage is already wasting 2x memory here (or really more since it\u0027s always copied into a string16 instead of just the const char* in the binary)",
      "parentUuid": "8ad52c2a_f6bce9d7",
      "range": {
        "startLine": 229,
        "startChar": 6,
        "endLine": 229,
        "endChar": 14
      },
      "revId": "aa2043f2269e1b7640756c183cfb78d36dc1a84e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "118ea984_f078c56a",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 5
      },
      "lineNbr": 229,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-11-02T15:55:47Z",
      "side": 1,
      "message": "\u003e why does getInterfaceDescriptor need to stay string16? \n\nIn-tree prebuilts, basically.\n\n\u003e I\u0027d push that it just holds onto the original char*\n\nI like this too, but it isn\u0027t guaranteed that the char* won\u0027t be immediately deallocated. It shouldn\u0027t be for standard usage, but it could be. Right?",
      "parentUuid": "384de46d_83077131",
      "range": {
        "startLine": 229,
        "startChar": 6,
        "endLine": 229,
        "endChar": 14
      },
      "revId": "aa2043f2269e1b7640756c183cfb78d36dc1a84e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab4d460b_69220e41",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 5
      },
      "lineNbr": 229,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2020-11-02T16:52:23Z",
      "side": 1,
      "message": "\u003e In-tree prebuilts, basically.\n\nCould still be a migration period. Have a getInterfaceDescriptorUTF8() or whatever and it defaults to called the string16 one \u0026 decoding it to utf8. It\u0027s possible, whether or not it\u0027s worth the hassle :shrug:\n\n\u003e I like this too, but it isn\u0027t guaranteed that the char* won\u0027t be immediately deallocated. It shouldn\u0027t be for standard usage, but it could be. Right?\n\nIt\u0027d need to defensively copy to an internal allocation.",
      "parentUuid": "118ea984_f078c56a",
      "range": {
        "startLine": 229,
        "startChar": 6,
        "endLine": 229,
        "endChar": 14
      },
      "revId": "aa2043f2269e1b7640756c183cfb78d36dc1a84e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ba67cf4_f92079da",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 5
      },
      "lineNbr": 229,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-11-02T17:18:43Z",
      "side": 1,
      "message": "Okay, so let\u0027s do defensive copy now and plan to switch to utf-8 in more places. I\u0027ll put it on the backlog.",
      "parentUuid": "ab4d460b_69220e41",
      "range": {
        "startLine": 229,
        "startChar": 6,
        "endLine": 229,
        "endChar": 14
      },
      "revId": "aa2043f2269e1b7640756c183cfb78d36dc1a84e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f9c5505_13e2e584",
        "filename": "libs/binder/rust/tests/binderRustNdkInteropTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 59,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-10-27T20:45:15Z",
      "side": 1,
      "message": "I\u0027ll leave the bug open on me for this, can you TODO(b/167723746)?",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 59,
        "endChar": 34
      },
      "revId": "aa2043f2269e1b7640756c183cfb78d36dc1a84e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76b483b0_bb1c81ff",
        "filename": "libs/binder/rust/tests/binderRustNdkInteropTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 59,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-10-29T22:12:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f9c5505_13e2e584",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 59,
        "endChar": 34
      },
      "revId": "aa2043f2269e1b7640756c183cfb78d36dc1a84e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5233760_14767c4b",
        "filename": "libs/binder/rust/tests/binderRustNdkInteropTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 64,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-10-27T20:45:15Z",
      "side": 1,
      "message": "?",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 64,
        "endChar": 26
      },
      "revId": "aa2043f2269e1b7640756c183cfb78d36dc1a84e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe543eeb_958d3266",
        "filename": "libs/binder/rust/tests/binderRustNdkInteropTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 64,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-10-29T22:12:10Z",
      "side": 1,
      "message": "This should work when support is added to the AIDL NDK backend. Would you like me to take out this code instead?",
      "parentUuid": "b5233760_14767c4b",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 64,
        "endChar": 26
      },
      "revId": "aa2043f2269e1b7640756c183cfb78d36dc1a84e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f08b2bb_b3f5bc42",
        "filename": "libs/binder/rust/tests/binderRustNdkInteropTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 64,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-10-30T22:15:09Z",
      "side": 1,
      "message": "makes sense, thanks",
      "parentUuid": "fe543eeb_958d3266",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 64,
        "endChar": 26
      },
      "revId": "aa2043f2269e1b7640756c183cfb78d36dc1a84e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}