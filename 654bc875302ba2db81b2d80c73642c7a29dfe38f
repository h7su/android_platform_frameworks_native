{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "18f3ae18_320cbc9e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-09T18:23:26Z",
      "side": 1,
      "message": "Thanks!",
      "revId": "654bc875302ba2db81b2d80c73642c7a29dfe38f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdfbc0e0_ea26b4af",
        "filename": "libs/binder/Parcel.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1438,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-09T18:30:12Z",
      "side": 1,
      "message": "Note: if too many FDs are requested by a writer, it\u0027s okay for it to be an error (or even crash the client). This is different than below.",
      "range": {
        "startLine": 1438,
        "startChar": 0,
        "endLine": 1438,
        "endChar": 75
      },
      "revId": "654bc875302ba2db81b2d80c73642c7a29dfe38f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "595abcc2_4755d11d",
        "filename": "libs/binder/Parcel.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1438,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-06-10T02:00:17Z",
      "side": 1,
      "message": "If you meant there should be an explicit check on the fd count, there is one again on line 1417.",
      "parentUuid": "fdfbc0e0_ea26b4af",
      "range": {
        "startLine": 1438,
        "startChar": 0,
        "endLine": 1438,
        "endChar": 75
      },
      "revId": "654bc875302ba2db81b2d80c73642c7a29dfe38f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83fc3c44_1c455d86",
        "filename": "libs/binder/Parcel.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2159,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-09T18:30:12Z",
      "side": 1,
      "message": "this may allocate a very large amount of memory. We _should_ use something like 1024 or 4096 or 10,000 to limit it. For an explanation of why, see CL https://android-review.googlesource.com/c/platform/frameworks/native/+/1708922/\n\n(if we submit this as-is, it will cause the fuzzer to crash)",
      "revId": "654bc875302ba2db81b2d80c73642c7a29dfe38f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0736d550_65ccc793",
        "filename": "libs/binder/Parcel.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2159,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-09T20:31:31Z",
      "side": 1,
      "message": "I like the idea of adding some large upper bound constant (for both read and write, even if less important for writing). It would also simplify the test (no rlimit, less linux specific).\n\nI guess the main concern would be that we pick a value too small and someone is already hitting it. It seems unlikely though, especially if we are only enforcing it for flattenables to begin with.",
      "parentUuid": "83fc3c44_1c455d86",
      "revId": "654bc875302ba2db81b2d80c73642c7a29dfe38f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24bbea48_1ef5a24a",
        "filename": "libs/binder/Parcel.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2159,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-09T23:44:55Z",
      "side": 1,
      "message": "Right, but it should be okay here where we have a year to understand if the value is too small. In a security update (where rlimit was chosen, presumably because it won\u0027t break things), it\u0027s not okay to take a risk like that.",
      "parentUuid": "0736d550_65ccc793",
      "revId": "654bc875302ba2db81b2d80c73642c7a29dfe38f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be0748d8_e6648650",
        "filename": "libs/binder/Parcel.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2159,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-06-10T01:57:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "24bbea48_1ef5a24a",
      "revId": "654bc875302ba2db81b2d80c73642c7a29dfe38f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "592c2071_d76b0e6d",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1238,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-09T18:23:26Z",
      "side": 1,
      "message": "need to disable for non-linux? or is getting the tests to run elsewhere a whole project of its own?",
      "revId": "654bc875302ba2db81b2d80c73642c7a29dfe38f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61e32c46_79f3903e",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1238,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-09T18:30:12Z",
      "side": 1,
      "message": "or can we use something like 10,000 or 100,000?",
      "parentUuid": "592c2071_d76b0e6d",
      "revId": "654bc875302ba2db81b2d80c73642c7a29dfe38f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e45e44df_423db1db",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1238,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-06-09T18:56:52Z",
      "side": 1,
      "message": "The whole test seems to be very Linux-specific, it uses prctl() and the SCHED_* constants.",
      "parentUuid": "61e32c46_79f3903e",
      "revId": "654bc875302ba2db81b2d80c73642c7a29dfe38f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "292e53a0_a403a8f8",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1238,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-06-10T01:57:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e45e44df_423db1db",
      "revId": "654bc875302ba2db81b2d80c73642c7a29dfe38f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a595e199_e6337140",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1244,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-09T18:23:26Z",
      "side": 1,
      "message": "i\u0027d make this non-zero, otherwise we might accidentally make the test pass for the wrong reason (BAD_VALUE is vague)",
      "range": {
        "startLine": 1244,
        "startChar": 45,
        "endLine": 1244,
        "endChar": 46
      },
      "revId": "654bc875302ba2db81b2d80c73642c7a29dfe38f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f17161a1_e7dc54a1",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1244,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-06-10T22:51:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a595e199_e6337140",
      "range": {
        "startLine": 1244,
        "startChar": 45,
        "endLine": 1244,
        "endChar": 46
      },
      "revId": "654bc875302ba2db81b2d80c73642c7a29dfe38f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5f2158d_a90f7b53",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1265,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-09T18:23:26Z",
      "side": 1,
      "message": "should fail the the test IMO",
      "revId": "654bc875302ba2db81b2d80c73642c7a29dfe38f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ff9b88e_e2dc19de",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1265,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-06-09T18:56:52Z",
      "side": 1,
      "message": "If getrlimit fails, that\u0027s an OS issue and not a problem with libbinder. Not sure what the user can do to fix the breakage then (update their kernel???).",
      "parentUuid": "c5f2158d_a90f7b53",
      "revId": "654bc875302ba2db81b2d80c73642c7a29dfe38f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ee64468_13563a7b",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1265,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-06-10T01:57:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3ff9b88e_e2dc19de",
      "revId": "654bc875302ba2db81b2d80c73642c7a29dfe38f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a24d3fc8_cc1761fe",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1268,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-09T18:30:12Z",
      "side": 1,
      "message": "this tests the write, but not also the send of the parcelable. Do we have a test for too many FDs being sent? Or can you file an issue separately to add one?",
      "range": {
        "startLine": 1268,
        "startChar": 0,
        "endLine": 1268,
        "endChar": 63
      },
      "revId": "654bc875302ba2db81b2d80c73642c7a29dfe38f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90926082_3960ffd9",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1268,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-06-09T18:56:52Z",
      "side": 1,
      "message": "How would that work? You can\u0027t get a valid parcelable from a flattenable with too many fds (unless you mean just add the fds manually, but that wasn\u0027t covered by gMaxFds anyway).",
      "parentUuid": "a24d3fc8_cc1761fe",
      "range": {
        "startLine": 1268,
        "startChar": 0,
        "endLine": 1268,
        "endChar": 63
      },
      "revId": "654bc875302ba2db81b2d80c73642c7a29dfe38f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b413163_e0f2decf",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1268,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-11T00:20:21Z",
      "side": 1,
      "message": "Hey - let me check this out separately. I was thinking about something that\u0027s not related to your CL.",
      "parentUuid": "90926082_3960ffd9",
      "range": {
        "startLine": 1268,
        "startChar": 0,
        "endLine": 1268,
        "endChar": 63
      },
      "revId": "654bc875302ba2db81b2d80c73642c7a29dfe38f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}