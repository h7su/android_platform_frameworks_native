{
  "comments": [
    {
      "key": {
        "uuid": "3a529b64_73ff0aa7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 13
      },
      "lineNbr": 15,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T17:31:25Z",
      "side": 1,
      "message": "is there a bug tracking this? another test we\u0027ll want is fuzzing the parceling code",
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5eb6226_fd9ca76a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-07-17T16:08:03Z",
      "side": 1,
      "message": "I\u0027ll rebase the tradefed changes so this can run through treehugger. They aren\u0027t strictly necessary although we will probably see intermittent, spurious test failures without them.",
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f48db682_096c47d0",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 13
      },
      "lineNbr": 86,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T17:31:25Z",
      "side": 1,
      "message": "how does this interact with libbinder Stability.h? I\u0027m assuming we have no vendor code support for this? Is there a way we can make sure this isn\u0027t forgotten when Rust supports vendor?",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 86,
        "endChar": 19
      },
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c9fcbf1_4e7ba0a1",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 34,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T17:31:25Z",
      "side": 1,
      "message": "the default threadpool size is 15 (+1 on L45). Do we want that many threads for this test?",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 46
      },
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6fa6aa2_58569c96",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T17:31:25Z",
      "side": 1,
      "message": "probably default this? we will want the tests to run in continuous integration (TEST_MAPPING). Does Rust support this yet?",
      "range": {
        "startLine": 38,
        "startChar": 9,
        "endLine": 38,
        "endChar": 50
      },
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00070664_69cfa454",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T17:31:25Z",
      "side": 1,
      "message": "nit: it seems this ignored subsequent arguments",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 38,
        "endChar": 50
      },
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e1d30a1_524d578e",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 137,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T17:31:25Z",
      "side": 1,
      "message": "I see some functions aren\u0027t tested, e.g. dump, get_extension/set_extension, get_descriptor, call to a dead binder\n\nAlso, we\u0027ll want to test that the ownership semantics are retained (make sure underlying C++ objects don\u0027t have extra incStrong, for instance).\n\nYou might also try to get some ideas from, since they show issues that we\u0027ve seen over time:\n- cts/tests/tests/binder_ndk/libbinder_ndk_test/test_ibinder.cpp\n- cts/tests/tests/binder_ndk/libbinder_ndk_test/test_native_aidl_client.cpp (many of these could go in the AIDL CL)\n- cts/tests/tests/binder_ndk/libbinder_ndk_test/test_parcel.cpp (I don\u0027t see any parcel tests here)\n- binderLibTest",
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "affe066b_2ef4061d",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 141,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T17:31:25Z",
      "side": 1,
      "message": "maybe also test getting an unknown service (or somewhere else where we would have a null value?",
      "range": {
        "startLine": 141,
        "startChar": 29,
        "endLine": 141,
        "endChar": 40
      },
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}