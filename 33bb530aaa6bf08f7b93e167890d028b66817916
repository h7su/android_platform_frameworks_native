{
  "comments": [
    {
      "key": {
        "uuid": "3a529b64_73ff0aa7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 13
      },
      "lineNbr": 15,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T17:31:25Z",
      "side": 1,
      "message": "is there a bug tracking this? another test we\u0027ll want is fuzzing the parceling code",
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11fb9ada_5cabeb3e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 13
      },
      "lineNbr": 15,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-07-17T17:49:45Z",
      "side": 1,
      "message": "Someone else will have to add a bug, I don\u0027t have access.",
      "parentUuid": "3a529b64_73ff0aa7",
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5c54334_18a55bcc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 13
      },
      "lineNbr": 15,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T21:54:01Z",
      "side": 1,
      "message": "Thanks, you can add \u0027Bug: 161559780\u0027 which I got from the AIDL CL. It\u0027s just needed for internal reference/bookkeeping. Thanks!",
      "parentUuid": "11fb9ada_5cabeb3e",
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6715fa2a_d9403dd8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 13
      },
      "lineNbr": 15,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2020-07-21T15:51:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d5c54334_18a55bcc",
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5eb6226_fd9ca76a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-07-17T16:08:03Z",
      "side": 1,
      "message": "I\u0027ll rebase the tradefed changes so this can run through treehugger. They aren\u0027t strictly necessary although we will probably see intermittent, spurious test failures without them.",
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f48db682_096c47d0",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 13
      },
      "lineNbr": 86,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T17:31:25Z",
      "side": 1,
      "message": "how does this interact with libbinder Stability.h? I\u0027m assuming we have no vendor code support for this? Is there a way we can make sure this isn\u0027t forgotten when Rust supports vendor?",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 86,
        "endChar": 19
      },
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85d149f3_ce5f2e43",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 13
      },
      "lineNbr": 86,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-07-17T17:49:45Z",
      "side": 1,
      "message": "I believe stability support hasn\u0027t been added to the AIDL compiler yet. We can add that and expose the NDK APIs. Probably should make a new change for this?\n\nI don\u0027t think there are currently any plans to expose this to vendor code, yet. Even when we do, however, all usage of this crate should be through AIDL-generated code, and IBinder is specifically not re-exported from AIDL interface crates (the public_api module is the only thing that should be exposed to non-AIDL code at this point).",
      "parentUuid": "f48db682_096c47d0",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 86,
        "endChar": 19
      },
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17fb42d5_f74d8c35",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 13
      },
      "lineNbr": 86,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T21:54:01Z",
      "side": 1,
      "message": "I\u0027m fine with putting it off indefinitely.\n\nMaybe we can declare this specifically in the aidl compiler? Have an assertion that the aidl_interface does not have vendor_available/apex_available etc.. set. That way, if it is needed, what needs to happen is self-documenting.",
      "parentUuid": "85d149f3_ce5f2e43",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 86,
        "endChar": 19
      },
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c9fcbf1_4e7ba0a1",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 34,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T17:31:25Z",
      "side": 1,
      "message": "the default threadpool size is 15 (+1 on L45). Do we want that many threads for this test?",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 46
      },
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf3dcbe6_dde7ac9a",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 34,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-07-17T17:49:45Z",
      "side": 1,
      "message": "Not necessarily, although I don\u0027t think it\u0027s a problem either. However, setThreadPoolMaxCount does need to be exposed through Rust. I\u0027ll add that.",
      "parentUuid": "9c9fcbf1_4e7ba0a1",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 46
      },
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32affc00_43ef3fe0",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 34,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T21:54:01Z",
      "side": 1,
      "message": "It might be worth it to use setThreadPoolMaxCount(0). Since the join will add one thread, this will tell you that there are no transactions which are needed to be received during initialization here, and that the test only uses 1 as expected. Concurrency can be just as important as compatibility with minimum resources, and ideally we would test with both, but resource issues (e.g. if we accidentally add an IPC in the wrong place), can be hard to notice.",
      "parentUuid": "cf3dcbe6_dde7ac9a",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 46
      },
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6fa6aa2_58569c96",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T17:31:25Z",
      "side": 1,
      "message": "probably default this? we will want the tests to run in continuous integration (TEST_MAPPING). Does Rust support this yet?",
      "range": {
        "startLine": 38,
        "startChar": 9,
        "endLine": 38,
        "endChar": 50
      },
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00070664_69cfa454",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T17:31:25Z",
      "side": 1,
      "message": "nit: it seems this ignored subsequent arguments",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 38,
        "endChar": 50
      },
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf620dfc_c21ad024",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-07-17T17:49:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "00070664_69cfa454",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 38,
        "endChar": 50
      },
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec372444_250b65c5",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-07-17T17:49:45Z",
      "side": 1,
      "message": "This test service binary shouldn\u0027t get run by itself, as it doesn\u0027t terminate. The test is driven by the Rust test harness version of the same file. I\u0027ll add a comment detailing this in the code.",
      "parentUuid": "b6fa6aa2_58569c96",
      "range": {
        "startLine": 38,
        "startChar": 9,
        "endLine": 38,
        "endChar": 50
      },
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b607fbde_af177192",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T21:54:01Z",
      "side": 1,
      "message": "Thanks! Does Matthew know about atest/TEST_MAPPING integration?",
      "parentUuid": "ec372444_250b65c5",
      "range": {
        "startLine": 38,
        "startChar": 9,
        "endLine": 38,
        "endChar": 50
      },
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c129903e_2a28dfd8",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2020-07-21T15:51:12Z",
      "side": 1,
      "message": "Rust supports TEST_MAPPING. See https://android.googlesource.com/platform/external/rust/crates/unicode-xid/+/refs/heads/master/TEST_MAPPING for an example.",
      "parentUuid": "b607fbde_af177192",
      "range": {
        "startLine": 38,
        "startChar": 9,
        "endLine": 38,
        "endChar": 50
      },
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e1d30a1_524d578e",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 137,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T17:31:25Z",
      "side": 1,
      "message": "I see some functions aren\u0027t tested, e.g. dump, get_extension/set_extension, get_descriptor, call to a dead binder\n\nAlso, we\u0027ll want to test that the ownership semantics are retained (make sure underlying C++ objects don\u0027t have extra incStrong, for instance).\n\nYou might also try to get some ideas from, since they show issues that we\u0027ve seen over time:\n- cts/tests/tests/binder_ndk/libbinder_ndk_test/test_ibinder.cpp\n- cts/tests/tests/binder_ndk/libbinder_ndk_test/test_native_aidl_client.cpp (many of these could go in the AIDL CL)\n- cts/tests/tests/binder_ndk/libbinder_ndk_test/test_parcel.cpp (I don\u0027t see any parcel tests here)\n- binderLibTest",
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6d89190_79e8d900",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 137,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-07-17T17:49:45Z",
      "side": 1,
      "message": "I have a full port of binderLibTest (https://android-review.googlesource.com/c/platform/frameworks/native/+/1315033) which I\u0027m currently updating to the new NDK based API.\n\nThe parceling APIs are tested independently in https://android-review.googlesource.com/c/platform/frameworks/native/+/1357925.\n\nI\u0027ll add more Rust-specific tests to this integration test, now that it can handle client + server process.",
      "parentUuid": "7e1d30a1_524d578e",
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "142bf554_4483d4e8",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 137,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T21:54:01Z",
      "side": 1,
      "message": "Fantastic, thanks. If you have permissions to add relevant CL hashtags, that might be helpful. If you don\u0027t have perms, using the bug id at least allows us to see which changes are relevant.",
      "parentUuid": "e6d89190_79e8d900",
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d3c3864_6e322c39",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 137,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2020-07-21T15:51:12Z",
      "side": 1,
      "message": "I\u0027ve gone ahead and put all this under the binder-rust hashtag and added the appropriate bugs.",
      "parentUuid": "142bf554_4483d4e8",
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "affe066b_2ef4061d",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 141,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T17:31:25Z",
      "side": 1,
      "message": "maybe also test getting an unknown service (or somewhere else where we would have a null value?",
      "range": {
        "startLine": 141,
        "startChar": 29,
        "endLine": 141,
        "endChar": 40
      },
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e71efa0f_e793dafc",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 13
      },
      "lineNbr": 141,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-07-17T17:49:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "affe066b_2ef4061d",
      "range": {
        "startLine": 141,
        "startChar": 29,
        "endLine": 141,
        "endChar": 40
      },
      "revId": "33bb530aaa6bf08f7b93e167890d028b66817916",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}