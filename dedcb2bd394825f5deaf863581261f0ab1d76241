{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "02d2f4b6_c7adb486",
        "filename": "cmds/lshal/ListCommand.cpp",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-12-12T00:42:12Z",
      "side": 1,
      "message": "nit: extra parens",
      "range": {
        "startLine": 208,
        "startChar": 11,
        "endLine": 208,
        "endChar": 12
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a1a79b9_c7d20936",
        "filename": "cmds/lshal/ListCommand.cpp",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2020-12-12T01:34:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "02d2f4b6_c7adb486",
      "range": {
        "startLine": 208,
        "startChar": 11,
        "endLine": 208,
        "endChar": 12
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af8b14b5_5b8c3d33",
        "filename": "libs/binderdebug/include/binderdebug/BinderDebug.h",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-12-12T00:42:12Z",
      "side": 1,
      "message": "nit: maybe \"cookie -\u003e processes which hold binder\"\n\nThis could also be std::map\u003cwp\u003cIBinder\u003e, std::vector\u003cpid_t\u003e\u003e but seems like that might be pretty janky",
      "range": {
        "startLine": 24,
        "startChar": 55,
        "endLine": 24,
        "endChar": 79
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c054bf97_6ec5c6aa",
        "filename": "libs/binderdebug/include/binderdebug/BinderDebug.h",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2020-12-12T01:34:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "af8b14b5_5b8c3d33",
      "range": {
        "startLine": 24,
        "startChar": 55,
        "endLine": 24,
        "endChar": 79
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad6a56da_9c4c6d3b",
        "filename": "libs/binderdebug/include/binderdebug/BinderDebug.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-12-12T00:42:12Z",
      "side": 1,
      "message": "nit: document \u0027binder\u0027 or \u0027hwbinder\u0027 - might even use enum class here (for dumpsys, we\u0027d want \u0027vndbinder\u0027 for the vendor variant, as well)",
      "range": {
        "startLine": 29,
        "startChar": 44,
        "endLine": 29,
        "endChar": 51
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "622d9695_bd307199",
        "filename": "libs/binderdebug/include/binderdebug/BinderDebug.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2020-12-12T01:34:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ad6a56da_9c4c6d3b",
      "range": {
        "startLine": 29,
        "startChar": 44,
        "endLine": 29,
        "endChar": 51
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "125d805d_801b2ace",
        "filename": "libs/binderdebug/tests/binderdebug_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-12-12T00:42:12Z",
      "side": 1,
      "message": "it is really strange this is 2, even if we only start w/ one",
      "range": {
        "startLine": 44,
        "startChar": 35,
        "endLine": 44,
        "endChar": 36
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8670a50_c6ad381b",
        "filename": "libs/binderdebug/tests/binderdebug_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2020-12-12T01:34:11Z",
      "side": 1,
      "message": "1 main looper thread and 1 looper thread according to the binderfs log. It looks like we just set the max number of regular looper threads. Setting max to 0 just leaves the main looper thread.",
      "parentUuid": "125d805d_801b2ace",
      "range": {
        "startLine": 44,
        "startChar": 35,
        "endLine": 44,
        "endChar": 36
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58ade168_42484859",
        "filename": "libs/binderdebug/tests/binderdebug_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-12-14T18:39:30Z",
      "side": 1,
      "message": "oh yeah - libhwbinder is very solid here, but it\u0027s a bit messy. Hopefully this will help expose some intended-to-be single-threaded processes.",
      "parentUuid": "b8670a50_c6ad381b",
      "range": {
        "startLine": 44,
        "startChar": 35,
        "endLine": 44,
        "endChar": 36
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f639f35_b1dd8f3c",
        "filename": "libs/binderdebug/tests/binderdebug_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2020-12-14T20:07:26Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "58ade168_42484859",
      "range": {
        "startLine": 44,
        "startChar": 35,
        "endLine": 44,
        "endChar": 36
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e5fd4bc_42e11486",
        "filename": "libs/binderdebug/tests/binderdebug_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-12-12T00:42:12Z",
      "side": 1,
      "message": "nit: test with more",
      "range": {
        "startLine": 51,
        "startChar": 63,
        "endLine": 51,
        "endChar": 65
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34d8e816_c25b5b9d",
        "filename": "libs/binderdebug/tests/binderdebug_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2020-12-12T01:34:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e5fd4bc_42e11486",
      "range": {
        "startLine": 51,
        "startChar": 63,
        "endLine": 51,
        "endChar": 65
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "114a9f56_7dc1c5bf",
        "filename": "libs/binderdebug/tests/binderdebug_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-12-12T00:42:12Z",
      "side": 1,
      "message": "nit: needed?",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 96
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af5d7086_a5997ce5",
        "filename": "libs/binderdebug/tests/binderdebug_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2020-12-12T01:34:11Z",
      "side": 1,
      "message": "I need to addService to get the refPids. But it turns out I do not need it for the threads.",
      "parentUuid": "114a9f56_7dc1c5bf",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 96
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4ab0d23_0111149a",
        "filename": "libs/binderdebug/tests/binderdebug_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2020-12-12T00:33:42Z",
      "side": 1,
      "message": "this isn\u0027t being compiled or called right now. I\u0027m looking for solutions.",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 56,
        "endChar": 1
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "423984e0_3a6c125e",
        "filename": "libs/binderdebug/tests/binderdebug_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-12-12T00:42:12Z",
      "side": 1,
      "message": "prefix `extern \"C\"`",
      "parentUuid": "c4ab0d23_0111149a",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 56,
        "endChar": 1
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8b457cf_6c652369",
        "filename": "libs/binderdebug/tests/binderdebug_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2020-12-12T01:34:11Z",
      "side": 1,
      "message": "Changed to \"using namespace android\" instead of wrapping it all.\nUnfortunately after these changes and cleaning up the test has become flaky. Sometimes threadCount is 0. If I put a sleep(1) between startThreadPool() and RUN_ALL_TESTS() it always passes. :(\nIs there a better way to know when the threads have been started and reported by binder? If not I guess I could retry a few times in the test instead of adding a sleep?\n\nIt\u0027s right on the edge without the sleep... I just swapped startThreadPool and addService and it is far less flaky, but I did hit one case(out of ~15) where threadCount was 1.",
      "parentUuid": "423984e0_3a6c125e",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 56,
        "endChar": 1
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fadff045_19b0c44d",
        "filename": "libs/binderdebug/tests/binderdebug_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-12-14T18:39:30Z",
      "side": 1,
      "message": "try IPCThreadState::self()-\u003eflushCommands(); (or pinging something + flushCommands)\n\nbtw - \u0027using namespace\u0027 (or even more general \u0027using *\u0027 in any language) considered harmful, because it can block someone from adding code to one of the namespaces (since it would now conflict). The lazy way is so common in Android, there is no hope (I even do it sometimes, I\u0027ll admit), but what you had before was technically much nicer.",
      "parentUuid": "a8b457cf_6c652369",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 56,
        "endChar": 1
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93356b42_def9b0bd",
        "filename": "libs/binderdebug/tests/binderdebug_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2020-12-14T20:07:26Z",
      "side": 1,
      "message": "Adding the flushCommands() and pingBinder() doesn\u0027t seem to change anything with the threadCount in binderfs. It passes most of the time, but I\u0027ve still seen it fail, reporting 1 thread instead of 2. It might be slightly more reliable with the calls added, but doesn\u0027t fix the problem.\nWhen the startThreadPool() is moved right in front of the RUN_ALL_TESTS(), I see it report 0 threads most of the time.\n\nAny other suggestions?\n\nAlso, thanks for the namespace explanation! I changed it back and used \"extern \"C\" {\" instead.",
      "parentUuid": "fadff045_19b0c44d",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 56,
        "endChar": 1
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6587e6d3_69c65547",
        "filename": "libs/binderdebug/tests/binderdebug_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-12-14T22:15:31Z",
      "side": 1,
      "message": "Are you able to remove the service registration though?\n\nI\u0027m thinking that the race is probably waiting for the other thread to hit BR_SPAWN_LOOPER in IPCThreadState::executeCommand. You might log there to confirm.\n\nThen either:\n- switch the test to accept 0/1 or 0/2, saying that the other thread might not be started yet\nOR\n- only start one thread here (declare 0 threads in threadpool)\n\nYou might also reach out to android-binder@ or file a bug, to see why the kernel is so aggressive about starting another thread here. It clearly doesn\u0027t need to, but there might not be a good way for it to know that, since the explicitly started thread in userspace, the kernel might not know it\u0027s actually a reliable looper.",
      "parentUuid": "93356b42_def9b0bd",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 56,
        "endChar": 1
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "881f3930_8db9bd09",
        "filename": "libs/binderdebug/tests/binderdebug_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2020-12-14T23:12:50Z",
      "side": 1,
      "message": "1) No, removing the registration means we have no ref in servicemgr so the first test case fails(no servicemgr pid in refPids).\n\n2) You\u0027re right, it\u0027s a race between handling BR_SPAWN_LOOPER and the test case for that second thread.\n\nThere is only 1 BR_SPAWN_LOOPER event when it reads 2 threads.\nSo this \"main looper\" thread doesn\u0027t seem to be spawned that way.\nIf I set max threads to 0, we never hit the BR_SPAWN_LOOPER case, and we still find 1 \"main looper\" thread(verified with gdb that this is a seperate binder thread)\n\n3) There is another race for the \"main looper\" thread, but the window is much shorter. I can consistently hit it when startThreadPool() is called directly before RUN_ALL_TESTS().\n\nChecking for threadCount \u003e\u003d 1 still fails like 1/100 times in this patchset...",
      "parentUuid": "6587e6d3_69c65547",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 56,
        "endChar": 1
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1903d76_c058b5b9",
        "filename": "libs/binderdebug/tests/binderdebug_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2020-12-14T23:19:09Z",
      "side": 1,
      "message": "Looks like the first one is spawned in startThreadPool() as the main looper thread. So the race is between libbinder trying to start the thread and binder reporting it in the /dev/binderfs/ for that proc? Not sure what we can do about that other than waiting for a longer period of time before we try reading.",
      "parentUuid": "881f3930_8db9bd09",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 56,
        "endChar": 1
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3b3bff1_b94ce073",
        "filename": "libs/binderdebug/tests/binderdebug_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-12-15T00:56:19Z",
      "side": 1,
      "message": "\u003e There is only 1 BR_SPAWN_LOOPER event when it reads 2 threads.\n\nYeah - that\u0027s expected (since the other thread is spawned directly from startThreadPool, the kernel doesn\u0027t request it).\n\n\u003e There is another race for the \"main looper\" thread, but the window is much shorter.\n\nPerhaps waiting for BC_ENTER_LOOPER from that thread then. One complex thing you could do to fix this is:\n- fork a process when it starts\n- wait on a condition in the main thread (not the threadpool thread, the int main one)\n- the child process sends a binder call to you, which sets the condition and notifies (this call must be handled on the threadpool thread, so it will be guaranteed to start)\n\nAt least, without changing the existing APIs, that is the only way I can think of making sure the thread starts AND has issued BC_ENTER_LOOPER",
      "parentUuid": "b1903d76_c058b5b9",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 56,
        "endChar": 1
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed7797c3_c2b16acc",
        "filename": "libs/binderdebug/tests/binderdebug_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2020-12-15T17:46:28Z",
      "side": 1,
      "message": "Is this what you are thinking of? It still fails occasionally :(",
      "parentUuid": "e3b3bff1_b94ce073",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 56,
        "endChar": 1
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "677688f8_cdc998b1",
        "filename": "libs/binderdebug/tests/binderdebug_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2020-12-15T18:42:41Z",
      "side": 1,
      "message": "Changed to a new proc instead of thread. Things look stable now.",
      "parentUuid": "ed7797c3_c2b16acc",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 56,
        "endChar": 1
      },
      "revId": "dedcb2bd394825f5deaf863581261f0ab1d76241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}