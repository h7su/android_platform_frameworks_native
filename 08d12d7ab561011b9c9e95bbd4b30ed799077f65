{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "689f8e21_9b7f358c",
        "filename": "libs/binder/RpcState.cpp",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-27T23:24:56Z",
      "side": 1,
      "message": "maybe call \u0027sumOverflows\u0027 to disambiguate operation? but we only use it once. If we can remove RpcWireHeader from the sum below, we only need __builtin_add_overflow",
      "range": {
        "startLine": 37,
        "startChar": 12,
        "endLine": 37,
        "endChar": 25
      },
      "revId": "08d12d7ab561011b9c9e95bbd4b30ed799077f65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24680153_30cb749f",
        "filename": "libs/binder/RpcState.cpp",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-05-27T23:51:05Z",
      "side": 1,
      "message": "I was thinking it was strange that `sizeof(RpcWireHeader)` was included since it isn\u0027t in the later sums. If it isn\u0027t actually needed, then I agree it sounds better to do the check as part of computing the `bodySize`.\n\nI\u0027ll be adding a third number soon (the object table size), so it might look something like\n\n```\nuint32_t bodySize \u003d 0;\nFATAL_IF(\n    __builtin_add_overflow(sizeof(RpcWireTransaction), bodySize, \u0026bodySize)\n    || __builtin_add_overflow(data.dataSize(), bodySize, \u0026bodySize),\n    || __builtin_add_overflow(objectTableSize, bodySize, \u0026bodySize),\n    \"too much data ...\");\n```\n\nHow appealing is that?\n\nRelated discussion: I\u0027m also going to be adding more casts from `size_t` to `uint32_t`. I was considering this overflow check to be proof that the casts following it were safe and that still seems reasonable to me if we switch to this style since all of them are going to be subsets of `bodySize`.",
      "parentUuid": "689f8e21_9b7f358c",
      "range": {
        "startLine": 37,
        "startChar": 12,
        "endLine": 37,
        "endChar": 25
      },
      "revId": "08d12d7ab561011b9c9e95bbd4b30ed799077f65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb9b2008_7859df82",
        "filename": "libs/binder/RpcState.cpp",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-28T00:01:50Z",
      "side": 1,
      "message": "Hey, one more concept to share (though applying it within a file is probably overkill, definitely recommend the transcript):\nhttps://2014.jsconf.eu/speakers/sebastian-markbage-minimal-api-surface-area-learning-patterns-instead-of-frameworks.html\n\n\u003e How appealing is that?\n\nSo by my definition of appealing, appealing! Though, I am also totally okay with the function if you want to keep it (though I assume we would keep and use the result as well)\n\n\u003e I was considering this overflow check to be proof that the casts following it were safe and that still seems reasonable to me if we switch to this style since all of them are going to be subsets of  bodySize .\n\nAs long as we check for overflow conditions, don\u0027t introduce performance/security issues, I have no concern about the exact structure.",
      "parentUuid": "24680153_30cb749f",
      "range": {
        "startLine": 37,
        "startChar": 12,
        "endLine": 37,
        "endChar": 25
      },
      "revId": "08d12d7ab561011b9c9e95bbd4b30ed799077f65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2055d08d_79f4ef66",
        "filename": "libs/binder/RpcState.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-27T23:24:56Z",
      "side": 1,
      "message": "nit: it\u0027s strange this is unused, right? (this is what got me thinking about it)",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 16
      },
      "revId": "08d12d7ab561011b9c9e95bbd4b30ed799077f65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "188759b3_4e4f8f80",
        "filename": "libs/binder/RpcState.cpp",
        "patchSetId": 1
      },
      "lineNbr": 513,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-27T23:24:56Z",
      "side": 1,
      "message": "this check also might be unnecessary now that we use iovecs below. I wonder if we could save the result of the overflow check into L517 in order to also avoid computing the sum again (and exclude RpcWireHeader from it).",
      "range": {
        "startLine": 513,
        "startChar": 0,
        "endLine": 513,
        "endChar": 62
      },
      "revId": "08d12d7ab561011b9c9e95bbd4b30ed799077f65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}