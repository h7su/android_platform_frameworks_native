{
  "comments": [
    {
      "key": {
        "uuid": "f4cf7d3c_5b496f4b",
        "filename": "libs/binder/rust/src/native.rs",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2020-08-17T18:31:46Z",
      "side": 1,
      "message": "The `ibinder` field is only Send, not Sync. You didn\u0027t impl Sync, but your justification makes it sound like `Binder\u003cT\u003e` could be Sync.",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 15
      },
      "revId": "0f423ab283ec97df20c6ea14663f26a326c349be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08b1db6d_52a995a6",
        "filename": "libs/binder/rust/src/native.rs",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1638873
      },
      "writtenOn": "2020-08-17T21:16:23Z",
      "side": 1,
      "message": "Right, I realized that after I wrote the comment (well, copied the similar one from SpIBinder, which I think will also need to be changed). I was going to update the comment, but I have several conflicting goals I\u0027m not sure how to address:\n1) The trait here should be Send not Sync because once you have Send you can easily add Sync to a type by wrapping it in a Mutex, but not vice versa, but\n2) I\u0027m pretty confident that AIBinder is Sync (it internally derives from RefBase which uses std::atomic values for refcounting), which is useful but not as much as Send, and\n3) It\u0027s harder to prove that a type is Send in Rust. I could prove that Binder\u003cT\u003e is !Send if either of the following were true:\na) it holds some thread-local key/pointer/data that is not relevant in another thread, e.g., a pointer to a thread-local interner\nb) it\u0027s a pointer that points to !Sync data, but even that gets complicated when considering that Binder\u003cT\u003e/SpIBinder aren\u0027t aliased reference-like pointers to the internal AIBinder, but more like owning Box\u003cAIBinder\u003e pointers. For example, Box\u003cT\u003e: Send if T: Send, not Sync.\n\nbut lack of evidence of !Send isn\u0027t really evidence of Send.\n\nI think it takes a small leap of faith to assume that SpIBinder/Binder\u003cT: Send\u003e are Send, but it would be really useful to have it.",
      "parentUuid": "f4cf7d3c_5b496f4b",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 15
      },
      "revId": "0f423ab283ec97df20c6ea14663f26a326c349be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "973593bb_5717d066",
        "filename": "libs/binder/rust/src/native.rs",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1638873
      },
      "writtenOn": "2020-08-17T21:18:57Z",
      "side": 1,
      "message": "Oh one other thing: Sync in Rust maps pretty well to \"thread-safe\" in C++, but there isn\u0027t a good Send equivalent in C++.",
      "parentUuid": "08b1db6d_52a995a6",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 15
      },
      "revId": "0f423ab283ec97df20c6ea14663f26a326c349be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "558d24a2_0a5a8162",
        "filename": "libs/binder/rust/src/native.rs",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-08-17T23:39:23Z",
      "side": 1,
      "message": "There\u0027s a small wrinkle here. I wrote that original comment on the proxy when the struct indeed held an IBinder and missed that I didn\u0027t update it for the NDK API. It now holds an AIBinder, which is Send (iff BpBinder and BBinder are Send, which from my reading of their internals I believe is true). ABpBinder (a subclass of AIBinder) is not thread-safe. It contains a class pointer that starts out null but then is initialized via associateClass, which is racy.\n\nABBinder, which is what Binder\u003cT\u003e actually contains, is thread-safe as its class pointer is already initialized in its constructor and is logically immutable after that point. Do we gain enough by implementing Sync here to make relying on that property worthwhile?\n\nRegardless, SpIBinder cannot be Sync. We should revise the safety comment for SpIBinder to indicate this. This CL seems like a fine time to fix that comment?",
      "parentUuid": "973593bb_5717d066",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 15
      },
      "revId": "0f423ab283ec97df20c6ea14663f26a326c349be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f729006_8105221c",
        "filename": "libs/binder/rust/src/native.rs",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1638873
      },
      "writtenOn": "2020-08-18T08:34:53Z",
      "side": 1,
      "message": "I\u0027m starting to think we can prove Send for AIBinder by manually replicating the Rust compiler\u0027s auto trait logic for the relevant C++ types: prove that AIBinder implements Send by induction by starting from AIBinder/ABBinder proving that every single C++ type included therein is Send, recursively by going up the class hierarchy and also following pointers (requiring Send for exclusive pointers and Sync for aliasing ones).\n\nI gave it a quick try and got a pretty long chain, it looks like it will take some work: ABBinder -\u003e BBinder -\u003e Extras -\u003e ObjectManager -\u003e some void* pointers and KeyedVector etc.",
      "parentUuid": "558d24a2_0a5a8162",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 15
      },
      "revId": "0f423ab283ec97df20c6ea14663f26a326c349be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "359ee3b6_f5f1be7c",
        "filename": "libs/binder/rust/src/native.rs",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2020-08-18T17:34:51Z",
      "side": 1,
      "message": "AIBinder is Send, don\u0027t worry about that. Just don\u0027t make it Sync and we\u0027ll be fine.",
      "parentUuid": "0f729006_8105221c",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 15
      },
      "revId": "0f423ab283ec97df20c6ea14663f26a326c349be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1930ff88_8a05d0af",
        "filename": "libs/binder/rust/src/native.rs",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2020-08-21T18:47:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "359ee3b6_f5f1be7c",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 15
      },
      "revId": "0f423ab283ec97df20c6ea14663f26a326c349be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}