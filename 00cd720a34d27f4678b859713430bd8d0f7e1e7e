{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d64c8190_4aef6af4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-03-07T19:42:28Z",
      "side": 1,
      "message": "can we also set these to be errors now? Is this related to a clang upgrade?",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 40
      },
      "revId": "00cd720a34d27f4678b859713430bd8d0f7e1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "237f0ee9_68662c18",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1052399
      },
      "writtenOn": "2022-03-07T20:49:47Z",
      "side": 1,
      "message": "Without this CL, these source locations will be warnings-as-errors if WITH_TIDY is not set and CLANG_ANALYZER_CHECKS\u003d1 is set. These warngins-as-errors were missed due to a recent change to WITH_TIDY implications. There may be more warnings in every clang upgrade, but i don\u0027t think all of these are from new upgrade.\nWe are working on another fix to WITH_TIDY\u0027s implication, so that you can still catch such warnings-as-errors even with WITH_TIDY\u003d1.",
      "parentUuid": "d64c8190_4aef6af4",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 40
      },
      "revId": "00cd720a34d27f4678b859713430bd8d0f7e1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52da6478_f4ba9d33",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 284,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-03-08T00:59:37Z",
      "side": 1,
      "message": "Yeah, why don\u0027t we check the null pointer, instead of suppressing it, as already being done in #274.\n\nThe same applies to other places in this change.",
      "range": {
        "startLine": 284,
        "startChar": 66,
        "endLine": 284,
        "endChar": 82
      },
      "revId": "00cd720a34d27f4678b859713430bd8d0f7e1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31099d0a_5a0f008b",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 284,
      "author": {
        "id": 1052399
      },
      "writtenOn": "2022-03-08T01:09:30Z",
      "side": 1,
      "message": "Line 274 triggers static analysis on (reply \u003d\u003d nullptr) case, which can reach here. One way to fix it is something like\n  if (reply \u003d\u003d nullptr) abort();\n\nIf static analyzer knows that abort never return, it would not assume that (reply \u003d\u003d nullptr) here.\n\nBut, is it true that reply !\u003d nullptr at line 278?\nIf that\u0027s true the test at line 301 is redundant.\nSo I\u0027m not sure if such a fix is right.",
      "parentUuid": "52da6478_f4ba9d33",
      "range": {
        "startLine": 284,
        "startChar": 66,
        "endLine": 284,
        "endChar": 82
      },
      "revId": "00cd720a34d27f4678b859713430bd8d0f7e1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19bf78ea_e59fbf17",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 284,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-03-08T01:11:27Z",
      "side": 1,
      "message": "Agreed! The check on L274 is for bad in-process users IIRC. In these places, we should guarantee that reply can\u0027t be nullptr (IPCThreadState/RpcSession should). Though, honestly, a CHECK or returning an appropriate error would be okay.",
      "parentUuid": "52da6478_f4ba9d33",
      "range": {
        "startLine": 284,
        "startChar": 66,
        "endLine": 284,
        "endChar": 82
      },
      "revId": "00cd720a34d27f4678b859713430bd8d0f7e1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89741650_83fc6dda",
        "filename": "libs/binder/IMemory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-03-07T19:42:28Z",
      "side": 1,
      "message": "same as the other - could we use a designated initializer in HeapCache::find_heap?",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 60,
        "endChar": 35
      },
      "revId": "00cd720a34d27f4678b859713430bd8d0f7e1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6049ac9_f4afc4ee",
        "filename": "libs/binder/IPCThreadState.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1420,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-03-07T19:42:28Z",
      "side": 1,
      "message": "we should remove this and instead have:\n\n    binder_frozen_status_info info \u003d {\n        .pid \u003d pid,\n    };",
      "range": {
        "startLine": 1420,
        "startChar": 0,
        "endLine": 1420,
        "endChar": 95
      },
      "revId": "00cd720a34d27f4678b859713430bd8d0f7e1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acd184cf_a134fd51",
        "filename": "libs/binder/RpcSession.cpp",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-03-07T19:42:28Z",
      "side": 1,
      "message": "we could probably fix this and make the code clearer by not reusing this variable\n\n(declare a local unique_fd here)",
      "range": {
        "startLine": 157,
        "startChar": 0,
        "endLine": 157,
        "endChar": 56
      },
      "revId": "00cd720a34d27f4678b859713430bd8d0f7e1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "532fbac9_5b819562",
        "filename": "libs/binder/include/binder/BpBinder.h",
        "patchSetId": 2
      },
      "lineNbr": 111,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-03-07T19:42:28Z",
      "side": 1,
      "message": "Is this needed because the implicit constructor is used by KeyedVector? Or could we delete this and instead switch to a designated constructor in BpBinder::ObjectManager::attach?",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 111,
        "endChar": 81
      },
      "revId": "00cd720a34d27f4678b859713430bd8d0f7e1e7e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}