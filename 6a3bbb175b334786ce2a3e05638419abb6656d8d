{
  "comments": [
    {
      "key": {
        "uuid": "b595b663_ba05fcaa",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 17,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-08-28T17:56:59Z",
      "side": 1,
      "message": "even though we only support building with toolchains that understand this it shouldn\u0027t be a hard _requirement_ to use the NDK.\n\nSo these should be the standard-conforming #ifndef/define/endif guards instead.",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 12
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b9648e8_0cb126dd",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 17,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2018-08-28T18:14:56Z",
      "side": 1,
      "message": "We use `#pragma once` all over libc these days. This is fine from a technical point. Preferable imo, but it\u0027s really a stylistic thing, so if jreck and co want to keep the frameworks APIs on include guards I\u0027ll defer to them; just know that it wouldn\u0027t be the first NDK header to use `#pragma once` :)",
      "parentUuid": "b595b663_ba05fcaa",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 12
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01618c0b_c03d1dbc",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 17,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-08-28T18:24:45Z",
      "side": 1,
      "message": "if it\u0027s already used in libc then LGTM",
      "parentUuid": "7b9648e8_0cb126dd",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 12
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c420811_5be4aa16",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 17,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-08-29T02:14:48Z",
      "side": 1,
      "message": "I am very, very happy to be able to keep this :) It\u0027s enough that we have transitive headers... Thanks!",
      "parentUuid": "01618c0b_c03d1dbc",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 12
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bc86b9b_d62f0a18",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 27,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-08-28T18:03:42Z",
      "side": 1,
      "message": "should put the actual docs here, nobody using the NDK will have the kernel\u0027s binder.h handy",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 32
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c5afee6_6b3da9d0",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 27,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-08-29T02:14:48Z",
      "side": 1,
      "message": "I\u0027ll leave this reference in here for the more curious (if that\u0027s okay). Also added additional docs. Done.",
      "parentUuid": "8bc86b9b_d62f0a18",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 32
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2d0ddcc_c65d10ca",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-08-28T18:03:42Z",
      "side": 1,
      "message": "this isn\u0027t valid C. You might want to start a thread on ndk-api-council if people are OK with mandating C++ to use the NDK. Historically we\u0027ve required C-only headers, not just for ABI compatibility but also C compatibility.",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 21
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72f29532_8fbe4ebd",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2018-08-28T18:14:56Z",
      "side": 1,
      "message": "I\u0027m fairly certain the toolchain team still isn\u0027t okay with guaranteeing C++ ABI stability (it\u0027s very difficult to do so), but make sure you CC android-llvm if you do start that discussion. It would certainly make for nicer APIs, but I just don\u0027t think we can do it from a technical standpoint.\n\nIf you do want to expose a nicer API, we do have some cases (NN API iirc) where we expose a C API and also a header-only C++ API that wraps the C API in a more convenient package. It\u0027s fairly annoying that we have to go from C++ wrapper -\u003e C API -\u003e C++ implementation, but so far we don\u0027t have a better option.",
      "parentUuid": "c2d0ddcc_c65d10ca",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 21
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35cd6fe8_2a00c6d3",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-08-28T18:24:45Z",
      "side": 1,
      "message": "This wouldn\u0027t be an ABI stability issue as this is declaring an enum of a fixed-type uint32_t. It\u0027s actually better for ABI in that regards. But it won\u0027t work if it\u0027s being compiled from C and not C++. As in, users of this API would be unable to write their code in C. That seems unfortunate and probably not worth doing?",
      "parentUuid": "72f29532_8fbe4ebd",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 21
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32c050f7_864db365",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2018-08-28T19:30:53Z",
      "side": 1,
      "message": "Fair point. I was speaking generally about C++ ABIs, but this would be safe.\n\nI do agree that I don\u0027t think it\u0027s worth preventing the use of this API from C though. Explicitly sized enums help us, not the user.",
      "parentUuid": "35cd6fe8_2a00c6d3",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 21
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "783b89a4_b7505b0f",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-08-29T02:14:48Z",
      "side": 1,
      "message": "You guys think highly of me. I wasn\u0027t trying to introduce C++ in this header :) I\u0027ve filed b/113359184 since I believe this should be caught by the ndk_headers checks/stubs checks/something.\n\nI\u0027ve also updated this here.",
      "parentUuid": "32c050f7_864db365",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 21
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91efdc4b_dc33c300",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2018-08-29T07:51:18Z",
      "side": 1,
      "message": "I commented on the bug about getting a test for NDK headers to remain C-only. As far as C++ ABI stability, our only concern has always been STL-related issues. If you can avoid exporting APIs with the STL, C++ APIs should be fine. Any actual compiler ABI change is going to require all sorts of troubling compatibility work for the entire platform (because of VNDK, etc.), so we ultimately would have to still produce the same mangled symbol name + a working implementation for those cases.",
      "parentUuid": "783b89a4_b7505b0f",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 21
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eadcb2dc_6d3977e5",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2018-08-29T18:08:51Z",
      "side": 1,
      "message": "\u003e our only concern has always been STL-related issues\n\nNot *always*. Pre-treble there was definitely a concern about the stability of non-STL C++ code.\n\nHappy to hear that\u0027s no longer the case though. I\u0027ll start a thread on android-ndk-api-council about whether or not we want to start allowing C++ NDK APIs (I\u0027ll make sure you\u0027re CC\u0027d).",
      "parentUuid": "91efdc4b_dc33c300",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 21
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72497c76_ed879880",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 33,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-08-28T18:03:42Z",
      "side": 1,
      "message": "what does this have to do with status? And same as above, docs need to go here",
      "range": {
        "startLine": 33,
        "startChar": 3,
        "endLine": 33,
        "endChar": 28
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d56586c_eb84a30c",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 33,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-08-29T02:14:48Z",
      "side": 1,
      "message": "Yes, my bad. Updated.",
      "parentUuid": "72497c76_ed879880",
      "range": {
        "startLine": 33,
        "startChar": 3,
        "endLine": 33,
        "endChar": 28
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62337573_aedaa5a4",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 38,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2018-08-28T18:14:56Z",
      "side": 1,
      "message": "Note that no documentation will be generated for this file unless it\u0027s in doxygen format (start\u0027s with `/**` instead of `/*`). You should also include an @file block at the top of the file, and need to wrap the whole file (everything after the #includes, include the @file block) with a @defgroup or @addtogroup in order for the API to actually be listed on dac.",
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "927a282c_b82d2f54",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 38,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-08-29T02:14:48Z",
      "side": 1,
      "message": "Hahaha. https://android-review.googlesource.com/c/platform/frameworks/native/+/735505/10/libs/binder/ndk/include_ndk/binder/AIBinder.h#31\n\nwrt /** /*, done\n\n\nCan @file not be derived? Can @addtogroup not be set in ndk_headers? Is the output respectable if I omit these? It seems like @file is WET, and @addtogroup would be less redundant and easier to declare elsewhere. Are these required?",
      "parentUuid": "62337573_aedaa5a4",
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1d7584b_458cfab1",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 38,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2018-08-29T23:44:30Z",
      "side": 1,
      "message": "\u003e Hahaha. https://android-review.googlesource.com/c/platform/frameworks/native/+/735505/10/libs/binder/ndk/include_ndk/binder/AIBinder.h#31\n\nHa. Yeah, that\u0027s the java*doc* style, not the Java style :) Doxygen supports it (though it also supports `///`, but technically that\u0027s not C89 compliant).\n\n\u003e Can @file not be derived?\n\nThe name yes, the description no. If there\u0027s no summary to provide, I think it\u0027s okay to omit, but idr. Doxygen is finicky.\n\n\u003e Can @addtogroup not be set in ndk_headers?\n\nDoxygen is not a part of the build system, so it doesn\u0027t know anything about ndk_headers. it could theoretically be done as a pre-processing step on the headers before it reaches the NDK, but that\u0027s not something we do right now.\n\n\u003e Is the output respectable if I omit these?\n\nIt will not show up on dac at all without @addtogroup or @defgroup. The doxygen importer for dac only handles classes/structs/defgroups, not files. If there\u0027s no defgroup, it doesn\u0027t know what page to put the docs on. See https://developer.android.com/ndk/reference/. The \"modules\" on the left are the defgroups.\n\n100% agreed that this stuff is annoying. We\u0027re considering rewriting some of the tools that cause this, but for now we have to appease the tools.",
      "parentUuid": "927a282c_b82d2f54",
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3893bc3_9a98d2df",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 68,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-08-28T18:03:42Z",
      "side": 1,
      "message": "style nit, should be newlines separating functions.",
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "541515c1_7c2278dd",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 68,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-08-29T02:14:48Z",
      "side": 1,
      "message": "Done (everywhere I could find, and I\u0027ll keep this in mind).",
      "parentUuid": "d3893bc3_9a98d2df",
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3a210d2_c6028815",
        "filename": "libs/binder/ndk/include_ndk/binder/AParcel.h",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-08-28T18:03:42Z",
      "side": 1,
      "message": "add some high-level \"what is this thing and why do I care, general lifecycle, any notes, etc...\" to the struct def.\n\nHere and for AIBinder \u0026 AIWeak_Binder as well",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 31
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ab54d00_f61d5743",
        "filename": "libs/binder/ndk/include_ndk/binder/AParcel.h",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-08-29T02:14:48Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "f3a210d2_c6028815",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 31
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c68aa06e_f3ab520f",
        "filename": "libs/binder/ndk/include_ndk/binder/AParcel.h",
        "patchSetId": 23
      },
      "lineNbr": 33,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-08-28T18:03:42Z",
      "side": 1,
      "message": "missing docs",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 33,
        "endChar": 91
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f3f9bd1_9c219361",
        "filename": "libs/binder/ndk/include_ndk/binder/AParcel.h",
        "patchSetId": 23
      },
      "lineNbr": 33,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-08-29T02:14:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c68aa06e_f3ab520f",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 33,
        "endChar": 91
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}