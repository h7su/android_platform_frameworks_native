{
  "comments": [
    {
      "key": {
        "uuid": "b595b663_ba05fcaa",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 17,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-08-28T17:56:59Z",
      "side": 1,
      "message": "even though we only support building with toolchains that understand this it shouldn\u0027t be a hard _requirement_ to use the NDK.\n\nSo these should be the standard-conforming #ifndef/define/endif guards instead.",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 12
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b9648e8_0cb126dd",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 17,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2018-08-28T18:14:56Z",
      "side": 1,
      "message": "We use `#pragma once` all over libc these days. This is fine from a technical point. Preferable imo, but it\u0027s really a stylistic thing, so if jreck and co want to keep the frameworks APIs on include guards I\u0027ll defer to them; just know that it wouldn\u0027t be the first NDK header to use `#pragma once` :)",
      "parentUuid": "b595b663_ba05fcaa",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 12
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01618c0b_c03d1dbc",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 17,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-08-28T18:24:45Z",
      "side": 1,
      "message": "if it\u0027s already used in libc then LGTM",
      "parentUuid": "7b9648e8_0cb126dd",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 12
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bc86b9b_d62f0a18",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 27,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-08-28T18:03:42Z",
      "side": 1,
      "message": "should put the actual docs here, nobody using the NDK will have the kernel\u0027s binder.h handy",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 32
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2d0ddcc_c65d10ca",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-08-28T18:03:42Z",
      "side": 1,
      "message": "this isn\u0027t valid C. You might want to start a thread on ndk-api-council if people are OK with mandating C++ to use the NDK. Historically we\u0027ve required C-only headers, not just for ABI compatibility but also C compatibility.",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 21
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72f29532_8fbe4ebd",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2018-08-28T18:14:56Z",
      "side": 1,
      "message": "I\u0027m fairly certain the toolchain team still isn\u0027t okay with guaranteeing C++ ABI stability (it\u0027s very difficult to do so), but make sure you CC android-llvm if you do start that discussion. It would certainly make for nicer APIs, but I just don\u0027t think we can do it from a technical standpoint.\n\nIf you do want to expose a nicer API, we do have some cases (NN API iirc) where we expose a C API and also a header-only C++ API that wraps the C API in a more convenient package. It\u0027s fairly annoying that we have to go from C++ wrapper -\u003e C API -\u003e C++ implementation, but so far we don\u0027t have a better option.",
      "parentUuid": "c2d0ddcc_c65d10ca",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 21
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35cd6fe8_2a00c6d3",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-08-28T18:24:45Z",
      "side": 1,
      "message": "This wouldn\u0027t be an ABI stability issue as this is declaring an enum of a fixed-type uint32_t. It\u0027s actually better for ABI in that regards. But it won\u0027t work if it\u0027s being compiled from C and not C++. As in, users of this API would be unable to write their code in C. That seems unfortunate and probably not worth doing?",
      "parentUuid": "72f29532_8fbe4ebd",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 21
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72497c76_ed879880",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 33,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-08-28T18:03:42Z",
      "side": 1,
      "message": "what does this have to do with status? And same as above, docs need to go here",
      "range": {
        "startLine": 33,
        "startChar": 3,
        "endLine": 33,
        "endChar": 28
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62337573_aedaa5a4",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 38,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2018-08-28T18:14:56Z",
      "side": 1,
      "message": "Note that no documentation will be generated for this file unless it\u0027s in doxygen format (start\u0027s with `/**` instead of `/*`). You should also include an @file block at the top of the file, and need to wrap the whole file (everything after the #includes, include the @file block) with a @defgroup or @addtogroup in order for the API to actually be listed on dac.",
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3893bc3_9a98d2df",
        "filename": "libs/binder/ndk/include_ndk/binder/AIBinder.h",
        "patchSetId": 23
      },
      "lineNbr": 68,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-08-28T18:03:42Z",
      "side": 1,
      "message": "style nit, should be newlines separating functions.",
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3a210d2_c6028815",
        "filename": "libs/binder/ndk/include_ndk/binder/AParcel.h",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-08-28T18:03:42Z",
      "side": 1,
      "message": "add some high-level \"what is this thing and why do I care, general lifecycle, any notes, etc...\" to the struct def.\n\nHere and for AIBinder \u0026 AIWeak_Binder as well",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 31
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c68aa06e_f3ab520f",
        "filename": "libs/binder/ndk/include_ndk/binder/AParcel.h",
        "patchSetId": 23
      },
      "lineNbr": 33,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-08-28T18:03:42Z",
      "side": 1,
      "message": "missing docs",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 33,
        "endChar": 91
      },
      "revId": "6a3bbb175b334786ce2a3e05638419abb6656d8d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}