{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b93565fd_96a5d48e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-23T23:35:36Z",
      "side": 1,
      "message": "Hey, I do like fewer allocations, but I am curious what Yifan thinks. If we only create a single object, we could probably drop the factory as well. I\u0027m thinking that this pattern is affording us the ability to have state specific to these transports, but I\u0027m not sure if we really do need that. Anyway, if Yifan is okay with this, we should remove the factories as well.",
      "revId": "6255cb8963373df1f4f988bd7ee2b67b9b1c9572",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae087ec2_866f514c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-05-24T01:21:34Z",
      "side": 1,
      "message": "It\u0027s not just for the allocations, this lets RpcServer use its own transport for new sessions instead of the default one that RpcSession::make() uses (see https://android-review.googlesource.com/c/platform/frameworks/native/+/2095306/17/libs/binder/RpcServer.cpp#393).",
      "parentUuid": "b93565fd_96a5d48e",
      "revId": "6255cb8963373df1f4f988bd7ee2b67b9b1c9572",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d6a57e0_1dbd6ecf",
        "filename": "libs/binder/RpcServer.cpp",
        "patchSetId": 17
      },
      "lineNbr": 393,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-05-24T01:21:34Z",
      "side": 1,
      "message": "This is the important part of this CL.",
      "revId": "6255cb8963373df1f4f988bd7ee2b67b9b1c9572",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f83abefe_2a54e28b",
        "filename": "libs/binder/RpcServer.cpp",
        "patchSetId": 17
      },
      "lineNbr": 393,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-09T00:34:36Z",
      "side": 1,
      "message": "Is a shared pointer necessary here?\n\nI\u0027d assume RpcServer lives longer than its sessions. If that is right, then we could pass RpcSession a normal pointer instead.\n\n(RpcSession could have separate unique_ptr field internally to manage the lifetime of a ctx when it owns it)",
      "parentUuid": "1d6a57e0_1dbd6ecf",
      "revId": "6255cb8963373df1f4f988bd7ee2b67b9b1c9572",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1943ef27_4e104909",
        "filename": "libs/binder/RpcServer.cpp",
        "patchSetId": 17
      },
      "lineNbr": 393,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-06-09T22:29:27Z",
      "side": 1,
      "message": "So it would be a `std::variant\u003cstd::unique_ptr\u003cRpcTransportCtx\u003e, const RpcTransportCtx*\u003e`? That could work, it\u0027s just slightly more risky than a shared_ptr and we\u0027d have to make sure the pointer doesn\u0027t escape this class.\n\n@smoreland wdyt?",
      "parentUuid": "f83abefe_2a54e28b",
      "revId": "6255cb8963373df1f4f988bd7ee2b67b9b1c9572",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c5ff932_ce087a1d",
        "filename": "libs/binder/include/binder/RpcSession.h",
        "patchSetId": 17
      },
      "lineNbr": 188,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-23T23:35:36Z",
      "side": 1,
      "message": "nit: passing shared_ptr should be const\u0026",
      "range": {
        "startLine": 188,
        "startChar": 29,
        "endLine": 188,
        "endChar": 39
      },
      "revId": "6255cb8963373df1f4f988bd7ee2b67b9b1c9572",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db0a04df_0ac8137a",
        "filename": "libs/binder/include/binder/RpcSession.h",
        "patchSetId": 17
      },
      "lineNbr": 188,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-05-23T23:44:04Z",
      "side": 1,
      "message": "That doesn\u0027t let you move temporaries into this constructor, does it? Is that fine?",
      "parentUuid": "7c5ff932_ce087a1d",
      "range": {
        "startLine": 188,
        "startChar": 29,
        "endLine": 188,
        "endChar": 39
      },
      "revId": "6255cb8963373df1f4f988bd7ee2b67b9b1c9572",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8521ac81_186cb1fe",
        "filename": "libs/binder/include/binder/RpcSession.h",
        "patchSetId": 17
      },
      "lineNbr": 188,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-09T00:43:54Z",
      "side": 1,
      "message": "You\u0027re right, that\u0027s a limitation, but I was thinking the server would be holding onto the object (would need to check). Anyway, let me explain in more detail where I\u0027m coming from (maybe I\u0027ll learn something!).\n\nGiven the lints we have, I do prefer explicit \u0027\u0026\u0026\u0027 so the client is forced to use \u0027std::move\u0027 or make a copy explicitly (may be more readable). The reason I don\u0027t like guaranteed copy elision is that it can introduce non-explicit copies. Imagine code like this:\n\n    std::shared_ptr\u003cRpcTransportCtx\u003e foo() {... }\n\n    ... {\n        const std::shared_ptr\u003cRpcTransportCtx\u003e bar \u003d foo();\n        ... \u003d RpcSession(bar);\n    }\n\nBecause the const-ness on bar is unnecessarily establish on another line, a copy will be made to pass the object into the RpcSession. Generally, I ask that we only take advantage of guaranteed copy ellision when the type being copied has no copy constructor so that the above case is not possible. If you add \u0027\u0026\u0026\u0027, the only implication is that the client must either explicitly make a copy or use std::move. Is there a benefit to the guaranteed copy elision I\u0027m missing? It really feels to me like we get easier to read code w/ a potential performance issue, so I\u0027m still not sure why the feature was added. It only makes sense if we\u0027re focused on improving the performance of random uninformed C++ code that doesn\u0027t have lints/warnings for extra copies turned on.",
      "parentUuid": "db0a04df_0ac8137a",
      "range": {
        "startLine": 188,
        "startChar": 29,
        "endLine": 188,
        "endChar": 39
      },
      "revId": "6255cb8963373df1f4f988bd7ee2b67b9b1c9572",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0abd332_ffda49bb",
        "filename": "libs/binder/include/binder/RpcSession.h",
        "patchSetId": 17
      },
      "lineNbr": 188,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-06-09T20:18:52Z",
      "side": 1,
      "message": "\u003e I do prefer explicit \u0027\u0026\u0026\u0027 so the client is forced to use \u0027std::move\u0027 or make a copy explicitly (may be more readable).\n\nI\u0027ve been wondering about that, thanks for explaining it!\n\nShould `ctx` here be passed by lvalue reference (your original suggestion), or rvalue?",
      "parentUuid": "8521ac81_186cb1fe",
      "range": {
        "startLine": 188,
        "startChar": 29,
        "endLine": 188,
        "endChar": 39
      },
      "revId": "6255cb8963373df1f4f988bd7ee2b67b9b1c9572",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ec5f70b_fa4463eb",
        "filename": "libs/binder/include/binder/RpcSession.h",
        "patchSetId": 17
      },
      "lineNbr": 188,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-06-09T20:54:05Z",
      "side": 1,
      "message": "After changing the context builders to return std::unique_ptr again, I think this needs to be a `\u0026\u0026` so we can directly call `RpcSession::make` with one.",
      "parentUuid": "b0abd332_ffda49bb",
      "range": {
        "startLine": 188,
        "startChar": 29,
        "endLine": 188,
        "endChar": 39
      },
      "revId": "6255cb8963373df1f4f988bd7ee2b67b9b1c9572",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "354a1d89_fe8ced16",
        "filename": "libs/binder/include/binder/RpcSession.h",
        "patchSetId": 17
      },
      "lineNbr": 188,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-06-09T22:52:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8ec5f70b_fa4463eb",
      "range": {
        "startLine": 188,
        "startChar": 29,
        "endLine": 188,
        "endChar": 39
      },
      "revId": "6255cb8963373df1f4f988bd7ee2b67b9b1c9572",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}