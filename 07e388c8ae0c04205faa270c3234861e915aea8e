{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "73589065_734f4ae4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-06-23T21:45:03Z",
      "side": 1,
      "message": "thank you!",
      "revId": "07e388c8ae0c04205faa270c3234861e915aea8e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b57c0f1e_89950543",
        "filename": "libs/binder/rust/src/state.rs",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-06-23T21:45:03Z",
      "side": 1,
      "message": "If it\u0027s called later, a threadpool will be started, but it may be smaller than expected. Regardless, link_to_death _should_ still work, but there may be more contention.\n\nNote - specifically this case becomes racey when this is called late:\nhttps://cs.android.com/android/platform/superproject/+/master:frameworks/native/libs/binder/ProcessState.cpp;l\u003d193;drc\u003d3e9debc9b6054336d3a54272237aa3726ff53a9d\n\nWDYT about avoiding the specific example, and just saying it should be called first, or mentioning specifically that fewer threads than requested may be startable?",
      "range": {
        "startLine": 31,
        "startChar": 73,
        "endLine": 34,
        "endChar": 17
      },
      "revId": "07e388c8ae0c04205faa270c3234861e915aea8e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7a61863_78b5cb71",
        "filename": "libs/binder/rust/src/state.rs",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-06-26T14:29:53Z",
      "side": 1,
      "message": "From my experience I found that if `start_thread_pool` is not called then `link_to_death` doesn\u0027t work at all; there\u0027s no error or even warning, the death recipient just never gets called. This was a surprising and confusing bug that took a while to find, as I didn\u0027t expect to need to start a thread pool just for an AIDL client to work. I\u0027d like to prevent other people from wasting their time on similar issues.\n\nI call out `link_to_death` specifically because everything else seemed to work fine without a thread pool in that case. Are there other things worth mentioning here that will also break without a threadpool?",
      "parentUuid": "b57c0f1e_89950543",
      "range": {
        "startLine": 31,
        "startChar": 73,
        "endLine": 34,
        "endChar": 17
      },
      "revId": "07e388c8ae0c04205faa270c3234861e915aea8e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f8ffc7a_247fd4e2",
        "filename": "libs/binder/rust/src/state.rs",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-06-27T23:19:03Z",
      "side": 1,
      "message": "link_to_death doesn\u0027t require start_thread_pool. For instance, another thread can call joinThreadPool. Alternatively, the main thread can call joinThreadPool, and as part of a transaction call linkToDeath, and that thread can still service death recipients. Also, without calling either of those method, services using polling such as servicemanager also work with linkToDeath.\n\nAnything which is a binder command will fall into this same category, so it\u0027s not just link_to_death, but also any callbacks that your service has (unless for instance they are always nested callbacks, in which case it\u0027ll appear to work without any binder threads at all).\n\nAlso, this puts the link_to_death discussion next to the discussion about the ordering of calling this method and clients, but the thing is, if you mess up the ordering, link_to_death will almost work in all cases.\n\nConsider:\n\n    This should be done before creating any binder client or server. Otherwise, some threads may not be started.\n\n    Binder threads are required to service death notifications (see link_to_death) and callbacks. This method (or another thread, typically the main thread, calling joinThreadPool) will create binder threadpools that can service binder commands.",
      "parentUuid": "b7a61863_78b5cb71",
      "range": {
        "startLine": 31,
        "startChar": 73,
        "endLine": 34,
        "endChar": 17
      },
      "revId": "07e388c8ae0c04205faa270c3234861e915aea8e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}