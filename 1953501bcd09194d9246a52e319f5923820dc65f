{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9e9f75ad_484b0f8c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2021-09-10T01:12:52Z",
      "side": 1,
      "message": "This is the Rust version of the C++ implementation in ParcelableHolder.h.\nWorks fine with the existing NDK-Rust interface, but it\u0027s slightly more complex than an implementation based on AParcelableHolder.\nThoughts?",
      "revId": "1953501bcd09194d9246a52e319f5923820dc65f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "834ffe13_e039f85d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2021-09-10T01:14:09Z",
      "side": 1,
      "message": "Basically, what I\u0027m asking is: keep this version or rewrite based on the simpler AParcelableHolder?",
      "parentUuid": "9e9f75ad_484b0f8c",
      "revId": "1953501bcd09194d9246a52e319f5923820dc65f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73d189e0_92fcd062",
        "filename": "libs/binder/rust/src/parcel/parcelable_holder.rs",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2021-09-10T02:12:23Z",
      "side": 1,
      "message": "We don\u0027t want to reset \"stability\". Stability is set when creating an object and persist along with it. I\u0027m curious if we can model this with type system.",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 64,
        "endChar": 62
      },
      "revId": "1953501bcd09194d9246a52e319f5923820dc65f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "156359b2_e44ce2d8",
        "filename": "libs/binder/rust/src/parcel/parcelable_holder.rs",
        "patchSetId": 6
      },
      "lineNbr": 186,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2021-09-10T02:12:23Z",
      "side": 1,
      "message": "In C++(and other languages), we add a comment like: /*include_size\u003d*/.\n\nbtw, why we don\u0027t include size? C++ backend writes the size of (name + parcelable)",
      "range": {
        "startLine": 186,
        "startChar": 35,
        "endLine": 186,
        "endChar": 40
      },
      "revId": "1953501bcd09194d9246a52e319f5923820dc65f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ea004d8_73dd138b",
        "filename": "libs/binder/rust/src/parcel/parcelable_holder.rs",
        "patchSetId": 6
      },
      "lineNbr": 188,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2021-09-10T02:12:23Z",
      "side": 1,
      "message": "if we don\u0027t need to put size, why not just use parcel?\n\n  parcel.write(..)\n  parcel.write_..",
      "range": {
        "startLine": 187,
        "startChar": 0,
        "endLine": 188,
        "endChar": 61
      },
      "revId": "1953501bcd09194d9246a52e319f5923820dc65f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09ddbb71_1bfc43eb",
        "filename": "libs/binder/rust/src/parcel/parcelable_holder.rs",
        "patchSetId": 6
      },
      "lineNbr": 202,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2021-09-08T23:46:04Z",
      "side": 1,
      "message": "The rest of libbinder generally only seems to check against NULL_PARCELABLE_FLAG (0), so it accepts all non-zero values, but C++ ParcelableHolder rejects everything except NON_NULL_PARCELABLE_FLAG (1).",
      "revId": "1953501bcd09194d9246a52e319f5923820dc65f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fc8f493_97b0b512",
        "filename": "libs/binder/rust/src/parcel/parcelable_holder.rs",
        "patchSetId": 6
      },
      "lineNbr": 236,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2021-09-10T02:21:04Z",
      "side": 1,
      "message": "nit: can we have an API like Parcel#read_parcel(size) which returns a new Parcel with that amount of data from self. (It moves position as well.)\n\nBut, yeah, it would be overkill.",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 236,
        "endChar": 9
      },
      "revId": "1953501bcd09194d9246a52e319f5923820dc65f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}