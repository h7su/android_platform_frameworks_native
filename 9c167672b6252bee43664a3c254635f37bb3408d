{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bbf79219_d6a7369c",
        "filename": "libs/binder/include_rpc_unstable/binder_rpc_unstable.hpp",
        "patchSetId": 43
      },
      "lineNbr": 32,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2024-01-17T16:58:11Z",
      "side": 1,
      "message": "Why is this declaration not conditional?",
      "revId": "9c167672b6252bee43664a3c254635f37bb3408d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5adabfb7_f2488631",
        "filename": "libs/binder/trusty/rust/binder_rpc_server/src/server.rs",
        "patchSetId": 43
      },
      "lineNbr": 21,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2024-01-17T16:58:11Z",
      "side": 1,
      "message": "We should maybe visibility restrict foreign_types and not use it.\n\nIt\u0027s imported because `openssl` (which we will likely be restricting soon too) depends on it. However, the version we have imported is 0.3 because that\u0027s what `openssl` requires, which is 6 years old, and the crate is now at 0.5 (update is still 4 years old).\n\nI see that the other RPC server code uses this, so we\u0027ve already gone down this rabbit hole a bit.",
      "revId": "9c167672b6252bee43664a3c254635f37bb3408d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b330d817_6eecddb5",
        "filename": "libs/binder/trusty/rust/binder_rpc_server/src/server.rs",
        "patchSetId": 43
      },
      "lineNbr": 25,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2024-01-17T16:58:11Z",
      "side": 1,
      "message": "Why can\u0027t you use `std::ffi::c_void` here? Does Trusty have two non-equal `c_void`s?",
      "revId": "9c167672b6252bee43664a3c254635f37bb3408d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff300318_671e0523",
        "filename": "libs/binder/trusty/rust/binder_rpc_server/src/server.rs",
        "patchSetId": 43
      },
      "lineNbr": 35,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2024-01-17T16:58:11Z",
      "side": 1,
      "message": "Where are we borrowing the CRpcServer? If we\u0027re not borrowing it, why are we using foreign_type and declaring this?",
      "revId": "9c167672b6252bee43664a3c254635f37bb3408d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6947b34_d2d06dc2",
        "filename": "libs/binder/trusty/rust/binder_rpc_server/src/server.rs",
        "patchSetId": 43
      },
      "lineNbr": 38,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2024-01-17T16:58:11Z",
      "side": 1,
      "message": "This safety comment doesn\u0027t seem relevant to implementing Send? Send is about safety of transferring ownership of this to another thread.",
      "range": {
        "startLine": 38,
        "startChar": 37,
        "endLine": 38,
        "endChar": 51
      },
      "revId": "9c167672b6252bee43664a3c254635f37bb3408d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60caa26d_5bca83f4",
        "filename": "libs/binder/trusty/rust/binder_rpc_server/src/server.rs",
        "patchSetId": 43
      },
      "lineNbr": 49,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2024-01-17T16:58:11Z",
      "side": 1,
      "message": "Two alternate patterns to consider here:\n1. Change per_session_cb_wrapper to take an RpcServer rather than a `*mut Box\u003cdyn PerSessionCallback\u003e\u003e`, then call the per_session_cb directly. It will then be \"used\", and you don\u0027t have a pointer",
      "revId": "9c167672b6252bee43664a3c254635f37bb3408d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}