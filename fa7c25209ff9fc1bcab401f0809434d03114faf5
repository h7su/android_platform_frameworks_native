{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c2078a86_b34bc6a3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1010050
      },
      "writtenOn": "2021-08-26T00:37:56Z",
      "side": 1,
      "message": "This needs a bit more elaboration - we don\u0027t have raw access to Parcel\u0027s guts in the SDK, and I\u0027m very skeptical we should have it in the NDK either, given that it\u0027s not guaranteed to be any sort of stable.  So I don\u0027t see how applications can safely use this.\n\nCan you elaborate on why you need Parcels here to begin with if you\u0027re creating your own IPC paths?",
      "range": {
        "startLine": 11,
        "startChar": 26,
        "endLine": 12,
        "endChar": 12
      },
      "revId": "fa7c25209ff9fc1bcab401f0809434d03114faf5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4acd1caf_31b0f3b5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1219061
      },
      "writtenOn": "2021-08-26T00:47:34Z",
      "side": 1,
      "message": "We need to pass parcelable that might exceed binder memory limitation across binder interface. For such parcelable, we add a library and check whether the marshalled data would exceed memory limitation, if so, we write the marshalled data in a shared memory file and pass the fileDescriptor to that shared memory file instead. On the other end, the receiver would do the opposite operation and turn the data back to a regular parcelable.\nWe are passing data between android system and Vehicle HAL using AIDL interface, so we have to use Parcelable (Parcel).\nThe detailed design is at go/auto-bigger-payload.",
      "parentUuid": "c2078a86_b34bc6a3",
      "range": {
        "startLine": 11,
        "startChar": 26,
        "endLine": 12,
        "endChar": 12
      },
      "revId": "fa7c25209ff9fc1bcab401f0809434d03114faf5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7626d551_755a69e0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1010050
      },
      "writtenOn": "2021-08-26T00:58:23Z",
      "side": 1,
      "message": "There\u0027s already a read/write FD in the NDK, so you can ferry the file descriptor across just fine.  Why do you need to access the guts of Parcelable?",
      "parentUuid": "4acd1caf_31b0f3b5",
      "range": {
        "startLine": 11,
        "startChar": 26,
        "endLine": 12,
        "endChar": 12
      },
      "revId": "fa7c25209ff9fc1bcab401f0809434d03114faf5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfa45ba3_2037ea5b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1219061
      },
      "writtenOn": "2021-08-26T01:12:33Z",
      "side": 1,
      "message": "We need raw data of parcelable to be written/read from the shared memory file so that we could use the same marshal/unmarshal logic to deal with parcelable that are small enough which we could directly send or large enough so they need be sent over shared memory file.\n\nIf we use a different serialization/deserialization mechanism, we have to use two different mechanism to send the data based on whether it exceeds binder limitation or not.",
      "parentUuid": "7626d551_755a69e0",
      "range": {
        "startLine": 11,
        "startChar": 26,
        "endLine": 12,
        "endChar": 12
      },
      "revId": "fa7c25209ff9fc1bcab401f0809434d03114faf5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19d7477a_85df235a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-26T00:29:02Z",
      "side": 1,
      "message": "(note, all the adds are from adding \u0027android-ndk-api-council\u0027 to the CL)",
      "revId": "fa7c25209ff9fc1bcab401f0809434d03114faf5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2953d788_a8f68edf",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 1
      },
      "lineNbr": 1170,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-26T00:29:02Z",
      "side": 1,
      "message": "nice! I see this is the description from android.os.Parcel.marshall. perfect.",
      "range": {
        "startLine": 1170,
        "startChar": 3,
        "endLine": 1170,
        "endChar": 6
      },
      "revId": "fa7c25209ff9fc1bcab401f0809434d03114faf5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44923894_72d0a872",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 1
      },
      "lineNbr": 1171,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-26T00:29:02Z",
      "side": 1,
      "message": "nit: this file uses single spaces",
      "range": {
        "startLine": 1171,
        "startChar": 27,
        "endLine": 1171,
        "endChar": 28
      },
      "revId": "fa7c25209ff9fc1bcab401f0809434d03114faf5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7429496a_4706b848",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 1
      },
      "lineNbr": 1184,
      "author": {
        "id": 1010465
      },
      "writtenOn": "2021-08-26T01:03:41Z",
      "side": 1,
      "message": "The raw data may include already serialized data and the parcel can be used to de-serialize it. Plz note that the serialized data should include only stable data like vintf stable AIDL to cross the boundary between vendor and system without breaking compatibility.",
      "range": {
        "startLine": 1184,
        "startChar": 0,
        "endLine": 1184,
        "endChar": 2
      },
      "revId": "fa7c25209ff9fc1bcab401f0809434d03114faf5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}