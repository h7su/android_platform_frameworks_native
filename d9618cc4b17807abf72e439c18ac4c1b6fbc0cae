{
  "comments": [
    {
      "key": {
        "uuid": "60185a0b_395a185b",
        "filename": "libs/binder/ndk/AIBinder.cpp",
        "patchSetId": 9
      },
      "lineNbr": 186,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-09-07T12:48:46Z",
      "side": 1,
      "message": "clean out mWho here to prevent such leaks (see my comment in AIBinder_Internal.h), I think libbinder guarantees this won\u0027t get called again so you won\u0027t need it anymore. (Do need to deal with the fact that somebody may call unlink regardless, and ignore it).",
      "revId": "d9618cc4b17807abf72e439c18ac4c1b6fbc0cae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39267c8b_5028b3e9",
        "filename": "libs/binder/ndk/AIBinder_internal.h",
        "patchSetId": 9
      },
      "lineNbr": 116,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-09-07T12:48:46Z",
      "side": 1,
      "message": "One risk with this model is that the client may allocate a single death recipient and keep using it forever. In the mean time, BpBinder is kept alive with weak refs, so if the caller does not unlinkToDeath(), these proxies are kept alive forever.\n\nSo, when a death recipient fires in BpBinder:\n1) We find the TransferDeathRecipient, and call binderDied() on that\n2) The mOnDied callback is called\n3) Caller deals with the death, but doesn\u0027t call unlinkToDeath()\n4) the AIBinder_DeathRecipient keeps the TransferDeathRecipient, which in turn keeps the proxy alive forever in its wp\u003c\u003e. \n\nOne optimization I did for HIDL was to break the chain after the death recipient fires, by clearing out the wp to the BpBinder. This prevents the bulk of memory leaks.",
      "range": {
        "startLine": 116,
        "startChar": 58,
        "endLine": 116,
        "endChar": 72
      },
      "revId": "d9618cc4b17807abf72e439c18ac4c1b6fbc0cae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "942d7887_5020e8f3",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 9
      },
      "lineNbr": 190,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-09-07T12:48:46Z",
      "side": 1,
      "message": "I know that it\u0027s not your doing, but this is gross :-)",
      "range": {
        "startLine": 188,
        "startChar": 86,
        "endLine": 190,
        "endChar": 19
      },
      "revId": "d9618cc4b17807abf72e439c18ac4c1b6fbc0cae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6299db86_ce64664a",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 9
      },
      "lineNbr": 301,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-09-07T12:48:46Z",
      "side": 1,
      "message": "this is a bit vague. When will it be cleaned up, and should the caller worry about it?",
      "range": {
        "startLine": 299,
        "startChar": 37,
        "endLine": 301,
        "endChar": 15
      },
      "revId": "d9618cc4b17807abf72e439c18ac4c1b6fbc0cae",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}