{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "643f7299_31f18401",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2021-06-16T18:44:07Z",
      "side": 1,
      "message": "I believe this should be systemapi. systemapi is just an alias for apex, but it indicates directionality. In this case I believe it\u0027s system publishing to apex (which is #systemapi), not apex publishing to system/apex (which is #apex now).",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5be10e7_b525568a",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-06-16T18:47:35Z",
      "side": 1,
      "message": "every other API here would be in the same category. Whoever was adding this alias should have added a test for this, right? If there is a bug for this, it could be handled in the \u0027official\u0027 migration CL (do you know of one?), or I\u0027m happy to file one.",
      "parentUuid": "643f7299_31f18401",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea67d061_882058b1",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-06-16T18:50:11Z",
      "side": 1,
      "message": "There is a unit test if that\u0027s what you mean. There\u0027s no difference in build system behavior so there\u0027s nothing to catch this. It\u0027s just so we don\u0027t get so confused when reviewing APIs. There\u0027s no large scale migration (for one we don\u0027t know which things are which), but it helps us a lot if folks move to systemapi where appropriate whenever they touch the map file.",
      "parentUuid": "b5be10e7_b525568a",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0515aae_242424bb",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-06-16T18:59:22Z",
      "side": 1,
      "message": "Could the build build system catch if the module is exposed by an APEX, then check it specifies \u0027apex\u0027 instead of \u0027systemapi\u0027? I really am starting to wonder why we would have a human-only distinction. Sure, it might seem nice to have two different designations here, but if the application of these designations is arbitrary, and there is no functional difference, they cannot be relied on, so I see them as more of a negative. What am I missing here? Was this an oversight?",
      "parentUuid": "ea67d061_882058b1",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cef8fd83_31ab40e5",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-06-16T19:02:59Z",
      "side": 1,
      "message": "Just the org chart. Small fix to a tool I own to add the alias. I have no involvement with the build side of APEX.",
      "parentUuid": "c0515aae_242424bb",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8a46b52_5484949b",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2021-06-16T19:04:36Z",
      "side": 1,
      "message": "This mirrors https://g3doc.corp.google.com/company/teams/android-api-council/guidelines/rules-of-engagement.md?cl\u003dhead\n\nsee @SystemApi (client\u003dMODULE_LIBRARIES) vs. @SystemApi (client\u003dSYSTEM_SERVER)\n\nThe reason for the distinction is because the policies for changes to the APIs are different. Specifically:\n\n\u003e For @SystemApi APIs exposed from the platform, they can and will be changed or removed between major Android releases, so users must develop in close proximity to the platform\n\n\u003e However, for @SystemApi that are exposed from mainline modules, they likely cannot be changed or removed, because the clients of the API are likely either bundled and cannot be updated, or even if they\u0027re unbundled, we may not be able to update all the clients by the time we ship the module update that has a change. The deprecation path for such APIs is not yet defined.\n\nIdeally as much of this as possible can be build-enforced, but we humans are also the ones reviewing \u0026 applying policy and we also need that context",
      "parentUuid": "c0515aae_242424bb",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbe4396d_b6c8f6c0",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-06-16T19:15:32Z",
      "side": 1,
      "message": "Dan, would you consider backpedeling on that FR and requesting build support on analysis of this problem? See also (the generically named) email thread \"Requesting NDK-API-Review in AOSP\" which has a discussion of these symbols as they are used in APEXes which are not a part of mainline. Though, it isn\u0027t of direct relevance to this change, it does reach agreement that the existing use of #apex/#systemapi is misleading/needs work.",
      "parentUuid": "c8a46b52_5484949b",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38feac01_5b890bc3",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-06-16T19:30:19Z",
      "side": 1,
      "message": "I don\u0027t see why we\u0027d revert it. It\u0027s useful to us. Build support for it can still be added if the APEX team wants to do that. My work is a prerequisite to it.",
      "parentUuid": "fbe4396d_b6c8f6c0",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b0f938f_7f7e62a5",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-06-16T19:41:41Z",
      "side": 1,
      "message": "Well, leave it in there, but approve this without using the alias until we have a solid story there and build system enforcement? I mean, we\u0027re talking about an extra local build, local test run, discussion in review for something which has no functional difference. These costs add up. I wonder, how many times will people in our org pay them? The human definition is not formalized (the thread I mentioned above shows that different people have different conceptions of what \u0027#systemapi\u0027 means, AND these conceptions are mutually inconsistent). The alias may be there, but we need more work for it to be useful. So, I would like to avoid it and stick with the minimal required solution here.\n\nDo you insist?",
      "parentUuid": "38feac01_5b890bc3",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43c6abf8_00b89e50",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-06-16T19:51:34Z",
      "side": 1,
      "message": "(I do have the change ready if you want it - and maybe I should be avoiding ambiguous words like \u0027useful\u0027, but I do feel strongly about minimalism and avoiding aliases - I will say the same thing about typedefs - but let me know)",
      "parentUuid": "3b0f938f_7f7e62a5",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}