{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "643f7299_31f18401",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2021-06-16T18:44:07Z",
      "side": 1,
      "message": "I believe this should be systemapi. systemapi is just an alias for apex, but it indicates directionality. In this case I believe it\u0027s system publishing to apex (which is #systemapi), not apex publishing to system/apex (which is #apex now).",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5be10e7_b525568a",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-06-16T18:47:35Z",
      "side": 1,
      "message": "every other API here would be in the same category. Whoever was adding this alias should have added a test for this, right? If there is a bug for this, it could be handled in the \u0027official\u0027 migration CL (do you know of one?), or I\u0027m happy to file one.",
      "parentUuid": "643f7299_31f18401",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea67d061_882058b1",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-06-16T18:50:11Z",
      "side": 1,
      "message": "There is a unit test if that\u0027s what you mean. There\u0027s no difference in build system behavior so there\u0027s nothing to catch this. It\u0027s just so we don\u0027t get so confused when reviewing APIs. There\u0027s no large scale migration (for one we don\u0027t know which things are which), but it helps us a lot if folks move to systemapi where appropriate whenever they touch the map file.",
      "parentUuid": "b5be10e7_b525568a",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0515aae_242424bb",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-06-16T18:59:22Z",
      "side": 1,
      "message": "Could the build build system catch if the module is exposed by an APEX, then check it specifies \u0027apex\u0027 instead of \u0027systemapi\u0027? I really am starting to wonder why we would have a human-only distinction. Sure, it might seem nice to have two different designations here, but if the application of these designations is arbitrary, and there is no functional difference, they cannot be relied on, so I see them as more of a negative. What am I missing here? Was this an oversight?",
      "parentUuid": "ea67d061_882058b1",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cef8fd83_31ab40e5",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-06-16T19:02:59Z",
      "side": 1,
      "message": "Just the org chart. Small fix to a tool I own to add the alias. I have no involvement with the build side of APEX.",
      "parentUuid": "c0515aae_242424bb",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8a46b52_5484949b",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2021-06-16T19:04:36Z",
      "side": 1,
      "message": "This mirrors https://g3doc.corp.google.com/company/teams/android-api-council/guidelines/rules-of-engagement.md?cl\u003dhead\n\nsee @SystemApi (client\u003dMODULE_LIBRARIES) vs. @SystemApi (client\u003dSYSTEM_SERVER)\n\nThe reason for the distinction is because the policies for changes to the APIs are different. Specifically:\n\n\u003e For @SystemApi APIs exposed from the platform, they can and will be changed or removed between major Android releases, so users must develop in close proximity to the platform\n\n\u003e However, for @SystemApi that are exposed from mainline modules, they likely cannot be changed or removed, because the clients of the API are likely either bundled and cannot be updated, or even if they\u0027re unbundled, we may not be able to update all the clients by the time we ship the module update that has a change. The deprecation path for such APIs is not yet defined.\n\nIdeally as much of this as possible can be build-enforced, but we humans are also the ones reviewing \u0026 applying policy and we also need that context",
      "parentUuid": "c0515aae_242424bb",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbe4396d_b6c8f6c0",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-06-16T19:15:32Z",
      "side": 1,
      "message": "Dan, would you consider backpedeling on that FR and requesting build support on analysis of this problem? See also (the generically named) email thread \"Requesting NDK-API-Review in AOSP\" which has a discussion of these symbols as they are used in APEXes which are not a part of mainline. Though, it isn\u0027t of direct relevance to this change, it does reach agreement that the existing use of #apex/#systemapi is misleading/needs work.",
      "parentUuid": "c8a46b52_5484949b",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38feac01_5b890bc3",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-06-16T19:30:19Z",
      "side": 1,
      "message": "I don\u0027t see why we\u0027d revert it. It\u0027s useful to us. Build support for it can still be added if the APEX team wants to do that. My work is a prerequisite to it.",
      "parentUuid": "fbe4396d_b6c8f6c0",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b0f938f_7f7e62a5",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-06-16T19:41:41Z",
      "side": 1,
      "message": "Well, leave it in there, but approve this without using the alias until we have a solid story there and build system enforcement? I mean, we\u0027re talking about an extra local build, local test run, discussion in review for something which has no functional difference. These costs add up. I wonder, how many times will people in our org pay them? The human definition is not formalized (the thread I mentioned above shows that different people have different conceptions of what \u0027#systemapi\u0027 means, AND these conceptions are mutually inconsistent). The alias may be there, but we need more work for it to be useful. So, I would like to avoid it and stick with the minimal required solution here.\n\nDo you insist?",
      "parentUuid": "38feac01_5b890bc3",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43c6abf8_00b89e50",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-06-16T19:51:34Z",
      "side": 1,
      "message": "(I do have the change ready if you want it - and maybe I should be avoiding ambiguous words like \u0027useful\u0027, but I do feel strongly about minimalism and avoiding aliases - I will say the same thing about typedefs - but let me know)",
      "parentUuid": "3b0f938f_7f7e62a5",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b23ea79_4455a048",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-06-16T20:01:14Z",
      "side": 1,
      "message": "though - I would still like to restrict this API to be for platform-only APEXes, I mean, it could be what systemapi is intended for, but it doesn\u0027t really need to be.",
      "parentUuid": "43c6abf8_00b89e50",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "318b2f09_13e63553",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2021-06-16T20:04:17Z",
      "side": 1,
      "message": "\u003e The human definition is not formalized\n\nI disagree. #apex was previously used for both systemapi to \u0026 from apex modules. We\u0027ve since narrowed that definition to systemapi from apex modules, and added systemapi to be system API to apex modules.\n\nIt\u0027s already useful without any further build system support, since as mentioned the policies are different depending on which direction this is going. The current alias is a strict improvement, why would we revert that just because it\u0027s not as much of an improvement as it could be?",
      "parentUuid": "3b23ea79_4455a048",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b33bf29d_2628bd85",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-06-16T20:25:12Z",
      "side": 1,
      "message": "\u003e #apex was previously used for both systemapi to \u0026 from apex modules\n\nThis case is also interesting because we only currently need it in non-updatable APEXes, so (via a limitation of the build system), the stability restrictions on this method are a small overburden. This would probably be added as #platform if we had it, reasoning being YAGNI + me still thinking there could be some improvement/change with this API.\n\nI understand your motivation that this is a way people can encode their intent. I also hold the (notably atypical !!! if only there was a version of/r/unpopularopinion for these kinds of things ...) opinion that this type of intent-distinguishing is a longterm negative in software maintained by a huge number of people (it\u0027s an addition, but as incomplete, I would actually call it a disimprovement). However, it doesn\u0027t matter what we call it, here is my reasoning why we should avoid human-intention aliases here and perhaps even reconsider this notation altogether:\n1. Intent-distinguishing (I would usually say \u0027teleological naming\u0027) for non-functional differences breaks orthogonality. That is, oftentimes when we choose comfortable names, we end up accidentally creating differences when none are needed.\n2. Barrier to entry. Since this is unenforced, people writing code must know about it in order to use it and satisfy reviewers. Sure, it is documented externally, but external AOSP developers can\u0027t see this internal link.\n3. Lack of real meaning. Since people disagree on what something means, and no piece of the code enforces it or tests it, it becomes an unreliable metric. In this case, also a DRY violation. How the API is used with other modules is encoded elsewhere, and this is not enforced to be correct, so it can become out of sync. In this case, systemapi can be just as misleading as it is helpful. We have no way of knowing, so I\u0027d rather the ambiguity be explicit.\n\nMaybe I care too much - if you still don\u0027t agree, I\u0027ll update this (since I\u0027ve already tested both ways, and this change is blocking another team), I shouldn\u0027t couple this conversation with this change.",
      "parentUuid": "318b2f09_13e63553",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "838e0534_b73b9504",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2021-06-16T20:51:38Z",
      "side": 1,
      "message": "\u003e 2. Barrier to entry. Since this is unenforced, people writing code must know about it in order to use it and satisfy reviewers. Sure, it is documented externally, but external AOSP developers can\u0027t see this internal link.\n\nExternal AOSP developers don\u0027t generally contribute APIs directly, and as API council we would expect a non-external sponsor for that who can ensure it\u0027s following all the various API guidelines \u0026 requirements. The only barrier ends up being that external needs to know about #platform-only in practice for anything using a .map.txt file, which is openly visible.\n\n\u003e 3. Lack of real meaning. Since people disagree on what something means\n\nThere is real meaning. The definitions are here: https://android.googlesource.com/platform/build/soong/+/master/docs/map_files.md\n\nIf there\u0027s documentation suggestions that\u0027s a valid complaint, but there\u0027s no general disagreement here.\n\n\u003e We have no way of knowing, so I\u0027d rather the ambiguity be explicit.\n\nsystemapi was added because we were having actual ambiguity issues trying to review #apex API additions. As mentioned, the policies for the API surfaces are different. Yes you can lie about it and confuse the reviewers, but I\u0027m assuming good intent here. This wasn\u0027t a random speculative change, it was an attempt to improve the API council review process. Given these are largely stable API surfaces, the risk of accidental out-of-sync seems improbable. The risk without build enforcement would be the accidental publishing of #platform-only into a stable surface (like #systemapi), which stub generation should be able to catch eventually.\n\nOtherwise there\u0027s really not a DRY issue here as this is the linker script itself after all.",
      "parentUuid": "b33bf29d_2628bd85",
      "range": {
        "startLine": 120,
        "startChar": 29,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "11cf242f3b582b2e3befc3751955785310785001",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}