{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "62496157_0e3b4f83",
        "filename": "libs/binder/ndk/include_cpp/android/binder_to_string.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2023-10-20T20:11:26Z",
      "side": 1,
      "message": "Frankly, I would prefer to have truncation turned on by default because otherwise I would need to specify this basically everywhere. Unless we make it a bit smarter, see below.",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 73,
        "endChar": 36
      },
      "revId": "d684ad120ff6217a07c8b653653f677e0d0a0ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67e0a2b1_ce1927bb",
        "filename": "libs/binder/ndk/include_cpp/android/binder_to_string.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-10-20T20:18:59Z",
      "side": 1,
      "message": "We can\u0027t make it the default because that would destroy information people may be relying on in existing places. You already have an abstraction layer for your audio tostring (with the enum bit) so you could use that for this as well.",
      "parentUuid": "62496157_0e3b4f83",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 73,
        "endChar": 36
      },
      "revId": "d684ad120ff6217a07c8b653653f677e0d0a0ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da9237d6_6a562de3",
        "filename": "libs/binder/ndk/include_cpp/android/binder_to_string.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-10-20T19:07:07Z",
      "side": 1,
      "message": "I also need to make this struct bigger, so if options do get baked into a prebuilt, we can still add more without OOBR",
      "revId": "d684ad120ff6217a07c8b653653f677e0d0a0ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b68af1ef_9f67e409",
        "filename": "libs/binder/ndk/include_cpp/android/binder_to_string.h",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2023-10-20T23:04:19Z",
      "side": 1,
      "message": "Out of curiosity, how does this work?",
      "revId": "d684ad120ff6217a07c8b653653f677e0d0a0ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2c884b1_bc86c113",
        "filename": "libs/binder/ndk/include_cpp/android/binder_to_string.h",
        "patchSetId": 1
      },
      "lineNbr": 234,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2023-10-20T20:11:26Z",
      "side": 1,
      "message": "What if we break after achieving a certain length instead? There is no problem with printing completely a short list of small numbers.",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 234,
        "endChar": 13
      },
      "revId": "d684ad120ff6217a07c8b653653f677e0d0a0ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "105b31d0_83742337",
        "filename": "libs/binder/ndk/include_cpp/android/binder_to_string.h",
        "patchSetId": 1
      },
      "lineNbr": 234,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-10-20T20:18:59Z",
      "side": 1,
      "message": "sure, we can do any option. Let me get this piped through everywhere, and I can change it to something else.\n\nHowever, a specific length may not work - these structures may be nested arbitrarily deeply, so it\u0027s hard to impose a global length.",
      "parentUuid": "c2c884b1_bc86c113",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 234,
        "endChar": 13
      },
      "revId": "d684ad120ff6217a07c8b653653f677e0d0a0ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e21a9fb_172feec0",
        "filename": "libs/binder/ndk/include_cpp/android/binder_to_string.h",
        "patchSetId": 1
      },
      "lineNbr": 234,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2023-10-20T20:52:13Z",
      "side": 1,
      "message": "I meant, the length of `out.str()` here. Agree that using a global length is more laborious.",
      "parentUuid": "105b31d0_83742337",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 234,
        "endChar": 13
      },
      "revId": "d684ad120ff6217a07c8b653653f677e0d0a0ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d06f10ed_6f39fe87",
        "filename": "libs/binder/ndk/include_cpp/android/binder_to_string.h",
        "patchSetId": 1
      },
      "lineNbr": 234,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-10-20T20:57:47Z",
      "side": 1,
      "message": "Do you mean, for instance, that instead of [1, 2, 3, ...] we should print [1, 2, 3, 4] because it\u0027s shorter?\n\nWe could also print [1, 2, 3, \u003c4 more elements\u003e] or similar.",
      "parentUuid": "3e21a9fb_172feec0",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 234,
        "endChar": 13
      },
      "revId": "d684ad120ff6217a07c8b653653f677e0d0a0ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6cc4ac7_0957bc06",
        "filename": "libs/binder/ndk/include_cpp/android/binder_to_string.h",
        "patchSetId": 1
      },
      "lineNbr": 234,
      "author": {
        "id": 1042638
      },
      "writtenOn": "2023-10-20T21:14:15Z",
      "side": 1,
      "message": "\u003e because it\u0027s shorter?\n\nIdeally, yes, but we can just limit the resulting string length (for the array, not overall string length).\n\n\u003e We could also print [1, 2, 3, \u003c4 more elements\u003e] or similar.\n\nThat\u0027s a good idea!",
      "parentUuid": "d06f10ed_6f39fe87",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 234,
        "endChar": 13
      },
      "revId": "d684ad120ff6217a07c8b653653f677e0d0a0ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01fbe52e_d7118db5",
        "filename": "libs/binder/ndk/include_cpp/android/binder_to_string.h",
        "patchSetId": 1
      },
      "lineNbr": 234,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-10-20T21:28:33Z",
      "side": 1,
      "message": "The global length is related to the local length because if the local length is the same everywhere, it also becomes the global length. Imagine if the first element of an array is a parcelable which contains an array that bumps against this limit, then you would always get an array with the first element cut off which contains many elements in a subarray. By picking a number of elements, we always guarantee visibility to elements at high and at low levels of nesting.\n\nIf this was BFS instead of DFS, we could limit string length in nested levels based on how much room is available when higher-level items are printed. Otherwise, you could do things like have the string length limit be different at different layers, but I don\u0027t really see a clean way. Maybe you have a more specific idea?",
      "parentUuid": "f6cc4ac7_0957bc06",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 234,
        "endChar": 13
      },
      "revId": "d684ad120ff6217a07c8b653653f677e0d0a0ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e0bbf3c_9989155f",
        "filename": "libs/binder/ndk/include_cpp/android/binder_to_string.h",
        "patchSetId": 1
      },
      "lineNbr": 234,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2023-10-20T23:04:19Z",
      "side": 1,
      "message": "An alternate approach (not saying that it is preferable), is a per-field annotation (e.g. @TruncateString(length \u003d 5)) or something similar (which is opt-in by the actual interface definition).\n\nThis would mean that you could generically specify which fields were unimportant for a particular parcel stringify, and then all containing parcels would drop it.\n\nThis maps more clearly to a mental model where the problem is that certain fields are just not that helpful to be stringified (i.e. a data[] array) for logging purposes.\n\nA reason for this approach is imo, both fan-out and array length are parallel causes of verbosity.",
      "parentUuid": "01fbe52e_d7118db5",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 234,
        "endChar": 13
      },
      "revId": "d684ad120ff6217a07c8b653653f677e0d0a0ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}