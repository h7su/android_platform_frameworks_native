{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a09f3d67_093be43f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2021-09-23T09:34:02Z",
      "side": 1,
      "message": "From the suggestion in https://android-review.googlesource.com/c/platform/frameworks/native/+/1823253/comments/c82ea2b4_10bda72e.",
      "revId": "1a49e4fd6c819c809b51e1bfc5a347daa91c3477",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a87f97e_f5a7453c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2021-09-23T10:40:37Z",
      "side": 1,
      "message": "Test failure seems to be unrelated, and happening on other runs - binderVendorDoubleLoadTest. A recurrence of b/184608834 / b/194755841?",
      "revId": "1a49e4fd6c819c809b51e1bfc5a347daa91c3477",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06fb5055_5035f004",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2021-09-27T14:22:15Z",
      "side": 1,
      "message": "Ping?\nTest failures are unrelated.",
      "revId": "1a49e4fd6c819c809b51e1bfc5a347daa91c3477",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1086bf7f_95a341b1",
        "filename": "libs/binder/rust/src/native.rs",
        "patchSetId": 1
      },
      "lineNbr": 445,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-09-24T02:56:39Z",
      "side": 1,
      "message": "Why does it panic (in CString::new?)? How standard is this in Rust or C++ code? I\u0027m not sure it matters a lot in these two cases, but generally curious - if it\u0027s from CString::new, there should be a lot of other functions here. From the C++ API itself - maybe there is an issue in one of our conversion functions?",
      "range": {
        "startLine": 445,
        "startChar": 0,
        "endLine": 445,
        "endChar": 71
      },
      "revId": "1a49e4fd6c819c809b51e1bfc5a347daa91c3477",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c0f3f08_a4121f22",
        "filename": "libs/binder/rust/src/native.rs",
        "patchSetId": 1
      },
      "lineNbr": 445,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2021-09-24T08:10:15Z",
      "side": 1,
      "message": "CString is null-terminated, so can\u0027t represent a string with an embedded 0.\nCString::new returns an error, and then the unwrap() call panics, if one is passed in; we could instead return an error here.\nI wonder what the Java equivalent does?\n\nI didn\u0027t see any other usages of CString in this file, but I didn\u0027t look beyond that.",
      "parentUuid": "1086bf7f_95a341b1",
      "range": {
        "startLine": 445,
        "startChar": 0,
        "endLine": 445,
        "endChar": 71
      },
      "revId": "1a49e4fd6c819c809b51e1bfc5a347daa91c3477",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f942564a_cea6801a",
        "filename": "libs/binder/rust/src/native.rs",
        "patchSetId": 1
      },
      "lineNbr": 445,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-09-27T17:47:51Z",
      "side": 1,
      "message": "I checked through what Java does - they convert the Java string to a char16_t representation, which then gets serialized and sent to the service manager. On the servicemanager side, this gets packed into a String16 on deserialization, which uses data+length rather than relying on null termination (though it *also* gets null terminated during unpacking). It\u0027s possible that at some point this will cause hiccups inside ServiceManager, but that would not be a Rust problem but rather a general one.\n\nIt looks like either:\n\n* `AServiceManager_addService` is too narrow, and should take a `char16_t *` / `size_t` pair rather than a `char *`\n* If we don\u0027t intend to support embedded `NUL`s, we should probably add a check to this to the deserialization of `String16` values.",
      "parentUuid": "4c0f3f08_a4121f22",
      "range": {
        "startLine": 445,
        "startChar": 0,
        "endLine": 445,
        "endChar": 71
      },
      "revId": "1a49e4fd6c819c809b51e1bfc5a347daa91c3477",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}