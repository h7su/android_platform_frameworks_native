{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "69783e1d_128ba630",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-27T20:26:04Z",
      "side": 1,
      "message": "failure is unrelated io_uring test failure",
      "revId": "63ab43be9e32a8a288968f5db38ee31d447762f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27e5e8b2_e0600a46",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-27T23:39:59Z",
      "side": 1,
      "message": "Other than the dynamically allocated threads, I think the rest of the CL is good. I have the same concern that Jiyong has.\n\nOne naive design I can think of is:\n- Only bind() once, with backlock \u003d\u003d # of max threads\n- Have one single thread that is dedicated to accept4(). Once it gets a new fd, spawns a new thread to handle it. \n\nBased on that we should be able to apply the optimizations like not wasting the main thread, tearing down threads when it is necessary, etc.",
      "revId": "63ab43be9e32a8a288968f5db38ee31d447762f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d46ec86_37bad6d2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-27T23:41:00Z",
      "side": 1,
      "message": "s/backlock/backlog",
      "parentUuid": "27e5e8b2_e0600a46",
      "revId": "63ab43be9e32a8a288968f5db38ee31d447762f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6712b117_2d9bfb27",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-28T02:12:49Z",
      "side": 1,
      "message": "Yeah, so there are two possibilities here, hoping to talk to you/Jiyong about it this week.\n\n- accept4 per server (shared between clients) - also need to figure out a way for the server to separate and detect different clients. Will hopefully be able to say what this would look like after a security review tomorrow.\n- accept4 per client - this is definitely the POR to follow this up\n\nI would already have CLs on top of this, but blocked on something unrelated. Personally, I\u0027m happy to merge this now and do follow-ups, but will also start adding CLs on top, hopefully soon.",
      "parentUuid": "7d46ec86_37bad6d2",
      "revId": "63ab43be9e32a8a288968f5db38ee31d447762f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c471a700_e4eaec3d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-04-28T12:39:11Z",
      "side": 1,
      "message": "I don\u0027t have an intention to block you on this CL. I believe you will eventually fix all the concerns (and probably do more!). I am fine with this CL as long as this is WIP or experimental.\n\nI left comments as you asked to review this \"with an eye towards the API/setup\".",
      "revId": "63ab43be9e32a8a288968f5db38ee31d447762f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce4877f9_6078dfcb",
        "filename": "libs/binder/RpcConnection.cpp",
        "patchSetId": 4
      },
      "lineNbr": 321,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-27T17:47:31Z",
      "side": 1,
      "message": "jiyong/david/yifan, please also mention if you know how to fix this race. It seems that we might always have the case where the server isn\u0027t currently inside of accept4. I need to look into it more, but it\u0027s certainly STOPSHIP",
      "range": {
        "startLine": 321,
        "startChar": 0,
        "endLine": 321,
        "endChar": 26
      },
      "revId": "63ab43be9e32a8a288968f5db38ee31d447762f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "969bf3df_0d75d0e0",
        "filename": "libs/binder/RpcConnection.cpp",
        "patchSetId": 4
      },
      "lineNbr": 321,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-28T02:39:58Z",
      "side": 1,
      "message": "Do I understand the problem correctly?\n\n- Client calls connect();\n- server unblocks from accept(), dispatching the fd to some handler\n- If any client calls connect() during this time, the server won\u0027t be able to respond because it is not accept()-ing\n- server finishes dispatching the fd, call into accept() again\n\nThe problem is #3 right? That\u0027s why you need the 5 trials?\n\nIf that\u0027s the case, I think this is unavoidable.",
      "parentUuid": "ce4877f9_6078dfcb",
      "range": {
        "startLine": 321,
        "startChar": 0,
        "endLine": 321,
        "endChar": 26
      },
      "revId": "63ab43be9e32a8a288968f5db38ee31d447762f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2868bca4_06da82c9",
        "filename": "libs/binder/RpcConnection.cpp",
        "patchSetId": 4
      },
      "lineNbr": 321,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-28T03:30:00Z",
      "side": 1,
      "message": "I think about this a bit more. \n\nWhy does the client need to know how many threads the server can handle? And why does the client need to connect() the exact number of times as the number of threads in the server?\n\nFor example, the server can have 5 threads (meaning that it can handle 5 clients), and there can be 5 separate clients from different processes. A server should be able to handle clients from different places.\n\nI think it makes more sense if we delete setupSocketClient and rename setupOneSocketSclient to setupSocketClient.",
      "parentUuid": "969bf3df_0d75d0e0",
      "range": {
        "startLine": 321,
        "startChar": 0,
        "endLine": 321,
        "endChar": 26
      },
      "revId": "63ab43be9e32a8a288968f5db38ee31d447762f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}