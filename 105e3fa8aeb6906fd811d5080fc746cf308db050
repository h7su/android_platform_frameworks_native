{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e607c8ea_d8096ec4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-09-28T20:45:52Z",
      "side": 1,
      "message": "To double-check I\u0027m not missing something, this is intended only for calls which are not the child of another binder call, and supporting that will come in future patches, right?",
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6063c159_cf06789b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2021-10-05T08:10:07Z",
      "side": 1,
      "message": "Yeah.",
      "parentUuid": "e607c8ea_d8096ec4",
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37127cc3_c11b4a21",
        "filename": "libs/binder/rust/Android.bp",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-09-29T18:33:22Z",
      "side": 1,
      "message": "okay, cool, so we did get it so that only people that want to use this need to add this dep?",
      "range": {
        "startLine": 35,
        "startChar": 11,
        "endLine": 35,
        "endChar": 29
      },
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc6bdac3_7ee97fc6",
        "filename": "libs/binder/rust/Android.bp",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-09-29T20:22:56Z",
      "side": 1,
      "message": "Yes, that is what parameterizing the type did - basically, it describes an abstract interface that this library happens to fulfill. If someone wants to use the async features they\u0027ll need this library, but sync people won\u0027t.",
      "parentUuid": "37127cc3_c11b4a21",
      "range": {
        "startLine": 35,
        "startChar": 11,
        "endLine": 35,
        "endChar": 29
      },
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09f21c14_9697d87e",
        "filename": "libs/binder/rust/binder_tokio/sync_wrapper.rs",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-09-28T20:45:52Z",
      "side": 1,
      "message": "Doesn\u0027t T need to be Send for this to be legal?",
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f295334_c268363d",
        "filename": "libs/binder/rust/binder_tokio/sync_wrapper.rs",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2021-09-29T22:09:02Z",
      "side": 1,
      "message": "It doesn\u0027t need `T: Send` for the same reasons that it doesn\u0027t need `T: Sync`, namely that an `\u0026SyncWrapper\u003cT\u003e` is useless.",
      "parentUuid": "09f21c14_9697d87e",
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5432503_23c30f68",
        "filename": "libs/binder/rust/binder_tokio/sync_wrapper.rs",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-10-07T17:58:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6f295334_c268363d",
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a43d2bc_ef097ffc",
        "filename": "libs/binder/rust/binder_tokio/sync_wrapper.rs",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-09-28T20:45:52Z",
      "side": 1,
      "message": "Maybe explicitly point out that this has \u0026mut to the SyncWrapper, so it\u0027s not violating the promise made in the unsafe impl Sync?",
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb74245f_24decf20",
        "filename": "libs/binder/rust/binder_tokio/sync_wrapper.rs",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2021-10-05T08:10:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3a43d2bc_ef097ffc",
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a67e565_90901852",
        "filename": "libs/binder/rust/src/binder_async.rs",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-09-28T20:45:52Z",
      "side": 1,
      "message": "Why is this not just a re-export of futures::future::BoxFuture ? Is it because it\u0027s also Sync? Why does it need to be Sync?\n\nIf it doesn\u0027t need to be sync, I\u0027d also expect that binder_tokio would no longer need the sync_wrapper module\n\nIf it does need to be sync, I\u0027d prefer a name other than BoxFuture because I think people will confuse it with `futures::future::BoxFuture` which would be a subtly different type.",
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b347d9b5_befc1bb8",
        "filename": "libs/binder/rust/src/binder_async.rs",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2021-09-29T22:09:02Z",
      "side": 1,
      "message": "I added the `+ Sync` because it makes the functions more ergonomic to use. Things that aren\u0027t `Sync` can propagate through many layers of types an async fns, and you will sometimes run into issues with other libraries that have a `: Sync` bound somewhere. A similar discussion can be found in https://github.com/hyperium/hyper/pull/2653.\n\nAlso, this crate does not depend on the futures crate.",
      "parentUuid": "1a67e565_90901852",
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ccc966d_839d96fe",
        "filename": "libs/binder/rust/src/binder_async.rs",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2021-10-05T08:10:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b347d9b5_befc1bb8",
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c265271_6d7ca17e",
        "filename": "libs/binder/rust/src/binder_async.rs",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-10-08T20:34:04Z",
      "side": 1,
      "message": "So, futures crate aside, I\u0027m not sure I understand from looking at that hyperium pull request *why* it\u0027s useful for a BoxFuture to be sync. The one response giving an example is some guy putting a future into an Arc, which is of questionable usefulness...",
      "parentUuid": "1ccc966d_839d96fe",
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c87d9dd_36995223",
        "filename": "libs/binder/rust/src/binder_async.rs",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2021-10-12T07:55:18Z",
      "side": 1,
      "message": "The example isn\u0027t putting the future in an arc - it\u0027s putting a closure that returns a future in an Arc. But it\u0027s isn\u0027t the Arc causing the requirement here, it\u0027s something else not visible in the comment, probably the way they defined the struct containing that `inner` field.\n\nGenerally the reason you want your futures to be Sync is because there are rather many crates out there that require the Sync bound on streams, and the lack of Sync would bubble up to any stream using these binder calls internally in any way.\n\nArguably this is usually a mistake of some sort in the external crate, but when you run into it it\u0027s a really cryptic compiler error, and it\u0027s really difficult to work around when you do run into it. The only workaround I know that doesn\u0027t involve fixing the external crate or writing unsafe code is to wrap the future in  `tokio_util::sync::ReusableBoxFuture`. I added the SyncWrapper here to reduce the chance that anyone runs into that error.\n\nOne example of such a requirement can be found here: https://docs.rs/tonic/0.5.2/tonic/client/struct.Grpc.html#method.client_streaming",
      "parentUuid": "3c265271_6d7ca17e",
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47113941_015680a4",
        "filename": "libs/binder/rust/src/parcel.rs",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-09-29T20:22:56Z",
      "side": 1,
      "message": "After chatting with Andrei, I\u0027m not convinced that Parcel is Send because of the Borrowed case.\n\nIn the Borrowed case, the object is still owned by C++ somewhere. That means that if we `Send` it, we are asserting that the underlying `AParcel` is threadsafe, because C++ may attempt to access it from the thread we sent it from. It is not clear to me that it is, though I\u0027d be happy for smoreland@ to tell me I\u0027m wrong and that `AParcel` is thread-safe.",
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c18c262_b7081fef",
        "filename": "libs/binder/rust/src/parcel.rs",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2021-09-29T22:09:02Z",
      "side": 1,
      "message": "I see. In that case, this is yet another reason that it shouldn\u0027t be an enum (b/200676345)",
      "parentUuid": "47113941_015680a4",
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fee1f68a_cb9d157b",
        "filename": "libs/binder/rust/src/parcel.rs",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-10-07T22:18:47Z",
      "side": 1,
      "message": "Parcel is not threadsafe. However, AParcel also owns the C++ object. If you are sure all references to it are destroyed, then it is okay to send.",
      "parentUuid": "4c18c262_b7081fef",
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e594ab6_8f47a692",
        "filename": "libs/binder/rust/src/parcel.rs",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2021-10-12T11:19:11Z",
      "side": 1,
      "message": "I\u0027ve implemented a different way of doing this.",
      "parentUuid": "fee1f68a_cb9d157b",
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d417736_34195ecb",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 4
      },
      "lineNbr": 158,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-09-29T18:33:22Z",
      "side": 1,
      "message": "would you consider adding some cases to aidl_integration_tests as well, to make sure this still interops w/ the other languages w/o any problems?",
      "range": {
        "startLine": 158,
        "startChar": 10,
        "endLine": 158,
        "endChar": 16
      },
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f844f08_ea501853",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 4
      },
      "lineNbr": 158,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2021-09-29T22:09:02Z",
      "side": 1,
      "message": "Sure, I\u0027ll do that next week.",
      "parentUuid": "3d417736_34195ecb",
      "range": {
        "startLine": 158,
        "startChar": 10,
        "endLine": 158,
        "endChar": 16
      },
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa123fe9_3f28169b",
        "filename": "libs/binder/rust/tests/integration.rs",
        "patchSetId": 4
      },
      "lineNbr": 158,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2021-10-12T07:55:18Z",
      "side": 1,
      "message": "I couldn\u0027t find the test folder you are referring to. Where do you want me to add this?",
      "parentUuid": "0f844f08_ea501853",
      "range": {
        "startLine": 158,
        "startChar": 10,
        "endLine": 158,
        "endChar": 16
      },
      "revId": "105e3fa8aeb6906fd811d5080fc746cf308db050",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}