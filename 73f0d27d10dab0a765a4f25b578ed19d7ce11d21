{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f56f2c79_7afd9c87",
        "filename": "libs/binder/rust/src/parcel/parcelable.rs",
        "patchSetId": 3
      },
      "lineNbr": 769,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-08-13T00:00:38Z",
      "side": 1,
      "message": "Nit: this is usually `\u0026*self` rather than using AsRef.",
      "revId": "73f0d27d10dab0a765a4f25b578ed19d7ce11d21",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2ed8515_ea48b10e",
        "filename": "libs/binder/rust/src/parcel/parcelable.rs",
        "patchSetId": 3
      },
      "lineNbr": 769,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2021-08-13T00:33:42Z",
      "side": 1,
      "message": "I got \"cannot return without recursing\" warning. I\u0027d like to keep this rather adding [allow(..)]",
      "parentUuid": "f56f2c79_7afd9c87",
      "revId": "73f0d27d10dab0a765a4f25b578ed19d7ce11d21",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f78e3aaa_22b7b98f",
        "filename": "libs/binder/rust/src/parcel/parcelable.rs",
        "patchSetId": 3
      },
      "lineNbr": 769,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-08-13T01:09:31Z",
      "side": 1,
      "message": "Sorry, it should be `\u0026**` because you\u0027re dealing with a reference to a box.",
      "parentUuid": "b2ed8515_ea48b10e",
      "revId": "73f0d27d10dab0a765a4f25b578ed19d7ce11d21",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac7c8193_e03436e1",
        "filename": "libs/binder/rust/src/parcel/parcelable.rs",
        "patchSetId": 3
      },
      "lineNbr": 769,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2021-08-13T02:30:26Z",
      "side": 1,
      "message": "Done.\n\nOut of curiosity, is this(\u0026*) an idiom for as_ref() in general? Or, just for AOSP?",
      "parentUuid": "f78e3aaa_22b7b98f",
      "revId": "73f0d27d10dab0a765a4f25b578ed19d7ce11d21",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7edbd430_5ee7e16a",
        "filename": "libs/binder/rust/src/parcel/parcelable.rs",
        "patchSetId": 3
      },
      "lineNbr": 769,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2021-08-13T20:13:14Z",
      "side": 1,
      "message": "It\u0027s not AOSP-specific, I\u0027ve seen it a lot in the Rust standard library.",
      "parentUuid": "ac7c8193_e03436e1",
      "revId": "73f0d27d10dab0a765a4f25b578ed19d7ce11d21",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dccde6d3_b0a0a1e0",
        "filename": "libs/binder/rust/src/parcel/parcelable.rs",
        "patchSetId": 3
      },
      "lineNbr": 769,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-08-13T20:18:31Z",
      "side": 1,
      "message": "AsRef is usually used as a generic trait param to accept both values and references for a function param. Deref then taking a reference is usually used to deref through boxes, etc.",
      "parentUuid": "7edbd430_5ee7e16a",
      "revId": "73f0d27d10dab0a765a4f25b578ed19d7ce11d21",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba2fed67_b7479c99",
        "filename": "libs/binder/rust/src/parcel/parcelable.rs",
        "patchSetId": 3
      },
      "lineNbr": 781,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-08-13T00:00:38Z",
      "side": 1,
      "message": "Ditto, `\u0026*inner`.",
      "revId": "73f0d27d10dab0a765a4f25b578ed19d7ce11d21",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "176b01fd_0a095ecf",
        "filename": "libs/binder/rust/src/parcel/parcelable.rs",
        "patchSetId": 3
      },
      "lineNbr": 781,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2021-08-13T00:22:32Z",
      "side": 1,
      "message": "Alternatively, I think Option::as_deref could replace the entire Option::map call.",
      "parentUuid": "ba2fed67_b7479c99",
      "revId": "73f0d27d10dab0a765a4f25b578ed19d7ce11d21",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3f3a065_c203962e",
        "filename": "libs/binder/rust/src/parcel/parcelable.rs",
        "patchSetId": 3
      },
      "lineNbr": 781,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2021-08-13T00:33:42Z",
      "side": 1,
      "message": "I tried both suggestions but they results in infinite loop.",
      "parentUuid": "176b01fd_0a095ecf",
      "revId": "73f0d27d10dab0a765a4f25b578ed19d7ce11d21",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2fc2e6e_13113e44",
        "filename": "libs/binder/rust/src/parcel/parcelable.rs",
        "patchSetId": 3
      },
      "lineNbr": 781,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-08-13T01:09:31Z",
      "side": 1,
      "message": "Same as above, need to double deref through the reference and the box.",
      "parentUuid": "e3f3a065_c203962e",
      "revId": "73f0d27d10dab0a765a4f25b578ed19d7ce11d21",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "faab127d_5bf3cf80",
        "filename": "libs/binder/rust/src/parcel/parcelable.rs",
        "patchSetId": 3
      },
      "lineNbr": 781,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2021-08-13T02:30:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c2fc2e6e_13113e44",
      "revId": "73f0d27d10dab0a765a4f25b578ed19d7ce11d21",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}