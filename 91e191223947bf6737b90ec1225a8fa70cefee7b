{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e5b79063_d3b8645a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-10-14T01:22:22Z",
      "side": 1,
      "message": "add an API to libcutils that lets a caller opt-in early instead of duplicating?",
      "range": {
        "startLine": 11,
        "startChar": 43,
        "endLine": 12,
        "endChar": 64
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b76c05a_d291d672",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2021-10-26T22:31:45Z",
      "side": 1,
      "message": "My understanding was that libcutils ashmem was intended to facilitate migration between ashmem and memfd under the hood. Since we are utilizing the system call memfd_create directly, I am not sure what the benefit of adding a libcutils function which transparently calls two syscalls.",
      "parentUuid": "e5b79063_d3b8645a",
      "range": {
        "startLine": 11,
        "startChar": 43,
        "endLine": 12,
        "endChar": 64
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1d9a041_8545e537",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-11-17T00:43:29Z",
      "side": 1,
      "message": "I think Elliott is saying add an option to libcutils which causes all users to use memfd. Do we need any additional support other than that? If we could transparently move more users to memfd, it seems simpler, and it would also avoid having copies of this memfd code. Or maybe Elliott can clarify?",
      "parentUuid": "5b76c05a_d291d672",
      "range": {
        "startLine": 11,
        "startChar": 43,
        "endLine": 12,
        "endChar": 64
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b782b3d6_2a1e3eea",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-11-17T01:27:35Z",
      "side": 1,
      "message": "/me didn\u0027t realize that no-one had ever flipped the switch...\n```\n    # sys.memfd_use set to false by default, which keeps it disabled\n    # until it is confirmed that apps and vendor processes don\u0027t make\n    # IOCTLs on ashmem fds any more.\n    setprop sys.use_memfd false\n```\n/facepalm\n\ngiven *that* i\u0027m tempted to *delete* the unused memfd code from cutils. in which case, yeah, code like this \"duplicating\" the memfd_create() stuff is perhaps the least worst choice :-(\n\nbut if anyone is planning on trying to move the ashmem -\u003e memfd thing forward, yeah, let\u0027s improve the cutils API so a caller like this can use libcutils but explicitly \"always prefer to give me memfd please, and only fall back to ashmem if you absolutely have to...",
      "parentUuid": "f1d9a041_8545e537",
      "range": {
        "startLine": 11,
        "startChar": 43,
        "endLine": 12,
        "endChar": 64
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69e11ad0_4cbd375b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2021-11-19T00:03:14Z",
      "side": 1,
      "message": "My understanding was that the intent of wrapping ashmem-dev in libcutils was to prepare for the memfd migration by swapping ashmem under the hood to memfd. We don\u0027t really need this under the hood behavior for memfd.\n\nThe status of the migration non-withstanding, the code to open a memfd region and set it to a specific size seems clearer to explicitly enumerate where relevant (it is only two system calls, and is the explicitly documented flow of interacting with memfd provided in man), as opposed to wrapping in a libcutils library (the code here seems intended for legacy, compatibility, and android specific implementation).\n\nThat being said, if moving the function to a library better fits future development direction, I don\u0027t think it makes too much of a difference.\n\nAs a side note -- I am still not thrilled with checking if we are on the host side. The newer versions of glibc include the function, but, the versions we build host with do not -- I am not sure if we can update the library we build on, so I can\u0027t think of any much better alternatives.",
      "parentUuid": "b782b3d6_2a1e3eea",
      "range": {
        "startLine": 11,
        "startChar": 43,
        "endLine": 12,
        "endChar": 64
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04be41c4_fbed9e37",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-12-13T18:55:45Z",
      "side": 1,
      "message": "see b/190084016 - most likely we won\u0027t be updating glibc",
      "parentUuid": "69e11ad0_4cbd375b",
      "range": {
        "startLine": 11,
        "startChar": 43,
        "endLine": 12,
        "endChar": 64
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6722a706_7fa2db4f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-10-14T01:19:45Z",
      "side": 1,
      "message": "could we also add a unit test here?",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 4
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "edb1ed79_273143c6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2021-10-26T22:31:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6722a706_7fa2db4f",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 4
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43dbcba6_53dcfd80",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2021-10-13T00:28:04Z",
      "side": 1,
      "message": "please also review Steven\u0027s comments on internal master.",
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "886d4727_e5c45aff",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-10-14T01:19:27Z",
      "side": 1,
      "message": "I think thread from internal CL got lost, can we update libbinder to be at the next API level? or file an issue for that? We shouldn\u0027t need this",
      "range": {
        "startLine": 42,
        "startChar": 7,
        "endLine": 42,
        "endChar": 24
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4dcd838e_a3c01205",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2021-10-26T22:31:45Z",
      "side": 1,
      "message": "I updated the required API level for libbinder, but memfd_create is only visible on BIONIC (host glibc does not have memfd_create). Is there another way to conditionally define methods between host and arm targets?",
      "parentUuid": "886d4727_e5c45aff",
      "range": {
        "startLine": 42,
        "startChar": 7,
        "endLine": 42,
        "endChar": 24
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c35e962_ce1ed654",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2021-10-13T00:28:04Z",
      "side": 1,
      "message": "will this logspam?",
      "range": {
        "startLine": 79,
        "startChar": 12,
        "endLine": 79,
        "endChar": 13
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b05a8b66_eaf81256",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2021-10-26T22:31:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c35e962_ce1ed654",
      "range": {
        "startLine": 79,
        "startChar": 12,
        "endLine": 79,
        "endChar": 13
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30a18b2e_47e9d4eb",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-10-14T01:19:27Z",
      "side": 1,
      "message": "same as below",
      "range": {
        "startLine": 83,
        "startChar": 41,
        "endLine": 83,
        "endChar": 47
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef945bfa_101ad6c2",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2021-10-26T22:31:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "30a18b2e_47e9d4eb",
      "range": {
        "startLine": 83,
        "startChar": 41,
        "endLine": 83,
        "endChar": 47
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df63ebc4_87962bc3",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-10-14T01:19:27Z",
      "side": 1,
      "message": "hard abort w/ error message for bad client usage?",
      "range": {
        "startLine": 109,
        "startChar": 53,
        "endLine": 109,
        "endChar": 59
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4413f10_b90e141e",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2021-10-26T22:31:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df63ebc4_87962bc3",
      "range": {
        "startLine": 109,
        "startChar": 53,
        "endLine": 109,
        "endChar": 59
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ee869d7_1a705d71",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-10-14T01:19:27Z",
      "side": 1,
      "message": "same",
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99b51a86_02a09a0f",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2021-10-26T22:31:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ee869d7_1a705d71",
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}