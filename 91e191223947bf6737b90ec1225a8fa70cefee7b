{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e5b79063_d3b8645a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-10-14T01:22:22Z",
      "side": 1,
      "message": "add an API to libcutils that lets a caller opt-in early instead of duplicating?",
      "range": {
        "startLine": 11,
        "startChar": 43,
        "endLine": 12,
        "endChar": 64
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b76c05a_d291d672",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2021-10-26T22:31:45Z",
      "side": 1,
      "message": "My understanding was that libcutils ashmem was intended to facilitate migration between ashmem and memfd under the hood. Since we are utilizing the system call memfd_create directly, I am not sure what the benefit of adding a libcutils function which transparently calls two syscalls.",
      "parentUuid": "e5b79063_d3b8645a",
      "range": {
        "startLine": 11,
        "startChar": 43,
        "endLine": 12,
        "endChar": 64
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6722a706_7fa2db4f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-10-14T01:19:45Z",
      "side": 1,
      "message": "could we also add a unit test here?",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 4
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "edb1ed79_273143c6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2021-10-26T22:31:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6722a706_7fa2db4f",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 4
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43dbcba6_53dcfd80",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2021-10-13T00:28:04Z",
      "side": 1,
      "message": "please also review Steven\u0027s comments on internal master.",
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "886d4727_e5c45aff",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-10-14T01:19:27Z",
      "side": 1,
      "message": "I think thread from internal CL got lost, can we update libbinder to be at the next API level? or file an issue for that? We shouldn\u0027t need this",
      "range": {
        "startLine": 42,
        "startChar": 7,
        "endLine": 42,
        "endChar": 24
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4dcd838e_a3c01205",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2021-10-26T22:31:45Z",
      "side": 1,
      "message": "I updated the required API level for libbinder, but memfd_create is only visible on BIONIC (host glibc does not have memfd_create). Is there another way to conditionally define methods between host and arm targets?",
      "parentUuid": "886d4727_e5c45aff",
      "range": {
        "startLine": 42,
        "startChar": 7,
        "endLine": 42,
        "endChar": 24
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c35e962_ce1ed654",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2021-10-13T00:28:04Z",
      "side": 1,
      "message": "will this logspam?",
      "range": {
        "startLine": 79,
        "startChar": 12,
        "endLine": 79,
        "endChar": 13
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b05a8b66_eaf81256",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2021-10-26T22:31:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c35e962_ce1ed654",
      "range": {
        "startLine": 79,
        "startChar": 12,
        "endLine": 79,
        "endChar": 13
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30a18b2e_47e9d4eb",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-10-14T01:19:27Z",
      "side": 1,
      "message": "same as below",
      "range": {
        "startLine": 83,
        "startChar": 41,
        "endLine": 83,
        "endChar": 47
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef945bfa_101ad6c2",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2021-10-26T22:31:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "30a18b2e_47e9d4eb",
      "range": {
        "startLine": 83,
        "startChar": 41,
        "endLine": 83,
        "endChar": 47
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df63ebc4_87962bc3",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-10-14T01:19:27Z",
      "side": 1,
      "message": "hard abort w/ error message for bad client usage?",
      "range": {
        "startLine": 109,
        "startChar": 53,
        "endLine": 109,
        "endChar": 59
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4413f10_b90e141e",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2021-10-26T22:31:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df63ebc4_87962bc3",
      "range": {
        "startLine": 109,
        "startChar": 53,
        "endLine": 109,
        "endChar": 59
      },
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ee869d7_1a705d71",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-10-14T01:19:27Z",
      "side": 1,
      "message": "same",
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99b51a86_02a09a0f",
        "filename": "libs/binder/MemoryHeapBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2021-10-26T22:31:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ee869d7_1a705d71",
      "revId": "91e191223947bf6737b90ec1225a8fa70cefee7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}