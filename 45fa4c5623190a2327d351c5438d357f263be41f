{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1b36d8cc_cd9cce05",
        "filename": "libs/binder/ndk/ibinder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 541,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-08-25T17:17:58Z",
      "side": 1,
      "message": "This has a subtle mismatch with the Java implementation because of\n\nhttps://cs.android.com/android/platform/superproject/+/master:frameworks/native/libs/binderthreadstate/include/binderthreadstate/CallerUtils.h;l\u003d46?q\u003dCallerUtils.h\n\nNote that this means even if we have a normal-binder call in progress, we could be closer to a hardware-binder call than a normal one. While we don\u0027t have Rust support for hardware-binder, it would be unsurprising if we linked Rust code into existing legacy C++ code that uses it.\n\ntl;dr mabye mimic the Java interface more exactly and do https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/jni/android_util_Binder.cpp;l\u003d963?q\u003dAndroid_util_binder.cpp",
      "revId": "45fa4c5623190a2327d351c5438d357f263be41f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b449fbab_354a9de8",
        "filename": "libs/binder/ndk/ibinder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 541,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-25T18:13:02Z",
      "side": 1,
      "message": "Yes. For instance, the issue would be if you receive a binder call, then you make a HIDL call, then as part of making that HIDL call, you process a nested HIDL transaction, Java would return that it is not currently handling a binder call, but this would return that it is.\n\nHowever, I\u0027d also like to point out, the name is a bit misleading since it is both handling a binder transaction and isn\u0027t handling a binder transaction, depending on what you want to consider. Also, the Java API isn\u0027t actually exposed here. So we should at least use a separate name here.\n\nIs there anywhere I can learn about this async feature? I\u0027m not sure if you care about this HIDL semantic.",
      "parentUuid": "1b36d8cc_cd9cce05",
      "revId": "45fa4c5623190a2327d351c5438d357f263be41f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fbe4c3c_e4c27820",
        "filename": "libs/binder/ndk/ibinder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 541,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-08-25T21:19:11Z",
      "side": 1,
      "message": "I don\u0027t think the HIDL/AIDL distinction is likely to cause problems in our use case, but since this API would be available in the NDK in general, it\u0027s hard to predict how others would try to use it.\n\nWe have a design doc, but we\u0027ve taken a few changes in direction, so I\u0027ll try to spruce it up and get it to you later today.",
      "parentUuid": "b449fbab_354a9de8",
      "revId": "45fa4c5623190a2327d351c5438d357f263be41f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a77c4b0_bc279339",
        "filename": "libs/binder/ndk/ibinder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 541,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-25T22:33:46Z",
      "side": 1,
      "message": "Yes, agreed, but in this case, it should be called something else (or perhaps more suitably, the Java API should be renamed)",
      "parentUuid": "8fbe4c3c_e4c27820",
      "revId": "45fa4c5623190a2327d351c5438d357f263be41f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef3d6d9b_069e423a",
        "filename": "libs/binder/ndk/ibinder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 541,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2021-08-26T05:54:04Z",
      "side": 1,
      "message": "Ultimately the purpose is to, when starting a transaction, figure out if its ok to offload the transaction to another thread. The situation when this is not ok is when the transaction would become a sub-transaction, because then you _must_ start it on the current thread in order for the kernel to properly handle A-\u003eB-\u003eA calls.",
      "parentUuid": "9a77c4b0_bc279339",
      "revId": "45fa4c5623190a2327d351c5438d357f263be41f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7634b1fe_cc82ea97",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-25T22:33:46Z",
      "side": 1,
      "message": "introduced",
      "range": {
        "startLine": 144,
        "startChar": 20,
        "endLine": 144,
        "endChar": 30
      },
      "revId": "45fa4c5623190a2327d351c5438d357f263be41f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}