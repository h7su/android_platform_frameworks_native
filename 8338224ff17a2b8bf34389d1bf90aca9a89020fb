{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1e6c2169_b72478b1",
        "filename": "libs/binder/include/binder/RpcCertificateVerifier.h",
        "patchSetId": 7
      },
      "lineNbr": 25,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-09-10T17:07:22Z",
      "side": 1,
      "message": "nit: WDYT about exposing a lambda for this function or exposing the same API, to avoid needing the extra class/abstraction layer?",
      "range": {
        "startLine": 25,
        "startChar": 24,
        "endLine": 25,
        "endChar": 49
      },
      "revId": "8338224ff17a2b8bf34389d1bf90aca9a89020fb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9792df05_c1aef261",
        "filename": "libs/binder/include/binder/RpcCertificateVerifier.h",
        "patchSetId": 7
      },
      "lineNbr": 25,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-09-10T22:36:55Z",
      "side": 1,
      "message": "I agree that using lambdas and std::functions would be a more straight-forward API, but I think it makes the implementation harder.\n\nThe reason I create a separate class for this is that the verifier may store data (see https://android-review.googlesource.com/c/platform/frameworks/native/+/1823368/7/libs/binder/tests/RpcCertificateVerifierSimple.cpp ). Admittedly, lambdas may implicitly store data by capturing variables, but then these variables (e.g. mTrustedPeerCertificates) are hard to be modified later.\n\nIt is also not an std::function to avoid being copied. For example, RpcCertificateVerifierSimple cannot be copied because it stores unique_ptr\u0027s. (Technically SSL objects are reference counted, and those unique_ptr\u0027s are simply reference counts to the internal objects, but relying on that is too convoluted IMO).\n\nAnother option would be\n\n```\nusing RpcCertificateVerifier \u003d std::function\u003c...\u003e;\nclass RpcCertificateVerifierImpl {\n  ... operator(...) {}\n};\n```\n\nHowever, since RpcCertificateVerifierImpl can\u0027t be copied (for the reasons above), I have to store `std::shared_ptr\u003cstd::function\u003c\u003e\u003e` in RpcTransportCtxFactoryTls instead, which is not any better than the current code IMO.",
      "parentUuid": "1e6c2169_b72478b1",
      "range": {
        "startLine": 25,
        "startChar": 24,
        "endLine": 25,
        "endChar": 49
      },
      "revId": "8338224ff17a2b8bf34389d1bf90aca9a89020fb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96c4db27_cb2a73ac",
        "filename": "libs/binder/tests/Android.bp",
        "patchSetId": 7
      },
      "lineNbr": 153,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-09-10T17:07:22Z",
      "side": 1,
      "message": "nit: Do we need two new files (and 59 LOC) for \u0027return OK;\u0027?",
      "range": {
        "startLine": 153,
        "startChar": 0,
        "endLine": 153,
        "endChar": 43
      },
      "revId": "8338224ff17a2b8bf34389d1bf90aca9a89020fb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74d8a505_9d824940",
        "filename": "libs/binder/tests/Android.bp",
        "patchSetId": 7
      },
      "lineNbr": 153,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-09-10T17:08:17Z",
      "side": 1,
      "message": "nvm - I see you\u0027re modifying this later.",
      "parentUuid": "96c4db27_cb2a73ac",
      "range": {
        "startLine": 153,
        "startChar": 0,
        "endLine": 153,
        "endChar": 43
      },
      "revId": "8338224ff17a2b8bf34389d1bf90aca9a89020fb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}