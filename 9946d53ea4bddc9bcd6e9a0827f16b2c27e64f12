{
  "comments": [
    {
      "key": {
        "uuid": "27b61101_bda562c9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-08-12T09:56:34Z",
      "side": 1,
      "message": "If this is the way forward, we need similar in libbinder_ndk and also in android.os.Binder, right?",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 9
      },
      "revId": "9946d53ea4bddc9bcd6e9a0827f16b2c27e64f12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2eb96e0_1ca3569d",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-08-12T09:56:34Z",
      "side": 1,
      "message": "Do you think we need to support multiple extensions for a binder? e.g. via a tag? For example, getExtension(int tag, sp\u003cIBinder\u003e* out)\n\nThis might be needed when both an SoC vendor and an OEM that is a downstream of the SoC vendor have a need to extend the same interface.",
      "range": {
        "startLine": 84,
        "startChar": 18,
        "endLine": 84,
        "endChar": 30
      },
      "revId": "9946d53ea4bddc9bcd6e9a0827f16b2c27e64f12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc9607e3_3286e763",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2019-08-09T22:01:15Z",
      "side": 1,
      "message": "we can at least invent polymorphism, even though the virtual tables are stuck. Maybe we should do this for shellCommand as well?",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 89,
        "endChar": 5
      },
      "revId": "9946d53ea4bddc9bcd6e9a0827f16b2c27e64f12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56b81829_046a6d75",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-08-12T09:56:34Z",
      "side": 1,
      "message": "What about caching the result of this?",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 96,
        "endChar": 68
      },
      "revId": "9946d53ea4bddc9bcd6e9a0827f16b2c27e64f12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb874d1e_ac1d5d09",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2019-08-09T22:01:15Z",
      "side": 1,
      "message": "any thoughts on putting it here VS inside of the object manager?",
      "range": {
        "startLine": 109,
        "startChar": 0,
        "endLine": 109,
        "endChar": 27
      },
      "revId": "9946d53ea4bddc9bcd6e9a0827f16b2c27e64f12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ac37ff9_06d497f8",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 255,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-08-12T09:56:34Z",
      "side": 1,
      "message": "Do you intend to allow changing the extension at runtime? If so, why?\n\nWhat about returning the extension via a function in BBinder that can be overridden by clients?",
      "range": {
        "startLine": 255,
        "startChar": 0,
        "endLine": 255,
        "endChar": 30
      },
      "revId": "9946d53ea4bddc9bcd6e9a0827f16b2c27e64f12",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}