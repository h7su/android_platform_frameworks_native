{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "18cb33b9_6e307667",
        "filename": "libs/binder/rust/src/proxy.rs",
        "patchSetId": 1
      },
      "lineNbr": 373,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2020-12-15T18:48:38Z",
      "side": 1,
      "message": "Probably best to just mirror the comment above from SpIBinder (which will get rid of my spelling mistake, too ðŸ˜Š):\n\n    /// This struct encapsulates the generic C++ `wp\u003cIBinder\u003e` class. This wrapper\n    /// is untyped; typed interface access is implemented by the AIDL compiler.",
      "revId": "604114d223a32bab35aac7393f5f1770481993c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a6f48d6_d5bb63b7",
        "filename": "libs/binder/rust/src/proxy.rs",
        "patchSetId": 1
      },
      "lineNbr": 376,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2020-12-15T18:48:38Z",
      "side": 1,
      "message": "I\u0027d like to add Clone for WpIBinder, but there isn\u0027t an NDK API to directly duplicate the AIBinder_Weak object or call incWeak, so we would have to promote and create a new weak binder, which isn\u0027t really what we want.",
      "revId": "604114d223a32bab35aac7393f5f1770481993c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b05d8fb_c34186d1",
        "filename": "libs/binder/rust/src/proxy.rs",
        "patchSetId": 1
      },
      "lineNbr": 386,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-12-15T16:17:52Z",
      "side": 1,
      "message": "new+promote should be, yeah. Is that all we\u0027re making a statement about?",
      "range": {
        "startLine": 386,
        "startChar": 0,
        "endLine": 386,
        "endChar": 69
      },
      "revId": "604114d223a32bab35aac7393f5f1770481993c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe687f33_11a238c9",
        "filename": "libs/binder/rust/src/proxy.rs",
        "patchSetId": 1
      },
      "lineNbr": 386,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-12-15T16:18:32Z",
      "side": 1,
      "message": "(+1 is for owners - want Matt/Stephen/Andrei to TAL)",
      "parentUuid": "0b05d8fb_c34186d1",
      "range": {
        "startLine": 386,
        "startChar": 0,
        "endLine": 386,
        "endChar": 69
      },
      "revId": "604114d223a32bab35aac7393f5f1770481993c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f965856c_88ff0e52",
        "filename": "libs/binder/rust/src/proxy.rs",
        "patchSetId": 1
      },
      "lineNbr": 386,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2020-12-15T16:30:10Z",
      "side": 1,
      "message": "This is saying that it is safe to send an instance of AIBinder_Weak (i.e. a wp\u003cAIBinder\u003e) between threads, and so to access whatever it points to from different threads (not concurrently).",
      "parentUuid": "fe687f33_11a238c9",
      "range": {
        "startLine": 386,
        "startChar": 0,
        "endLine": 386,
        "endChar": 69
      },
      "revId": "604114d223a32bab35aac7393f5f1770481993c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9124807c_0873ed0d",
        "filename": "libs/binder/rust/src/proxy.rs",
        "patchSetId": 1
      },
      "lineNbr": 386,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-12-15T16:40:15Z",
      "side": 1,
      "message": "I wonder if we should also add a test to the unit tests here?",
      "parentUuid": "f965856c_88ff0e52",
      "range": {
        "startLine": 386,
        "startChar": 0,
        "endLine": 386,
        "endChar": 69
      },
      "revId": "604114d223a32bab35aac7393f5f1770481993c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1969e14a_777d8dc0",
        "filename": "libs/binder/rust/src/proxy.rs",
        "patchSetId": 1
      },
      "lineNbr": 386,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2020-12-15T17:00:58Z",
      "side": 1,
      "message": "I\u0027m not sure how we could have a unit test to check thread safety properties. Some kind of stress test might possible, but it seems more like something that you\u0027d want to prove. What we\u0027re doing in the Rust wrapper here is just putting into code part of the API contract of the C API.",
      "parentUuid": "9124807c_0873ed0d",
      "range": {
        "startLine": 386,
        "startChar": 0,
        "endLine": 386,
        "endChar": 69
      },
      "revId": "604114d223a32bab35aac7393f5f1770481993c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1dde11a2_b5dcac49",
        "filename": "libs/binder/rust/src/proxy.rs",
        "patchSetId": 1
      },
      "lineNbr": 386,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-12-15T17:09:29Z",
      "side": 1,
      "message": "I mean, test WpIBinder at all. It seems to have been added here, without being used, exported, or tested...",
      "parentUuid": "1969e14a_777d8dc0",
      "range": {
        "startLine": 386,
        "startChar": 0,
        "endLine": 386,
        "endChar": 69
      },
      "revId": "604114d223a32bab35aac7393f5f1770481993c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ef23ff0_f3219656",
        "filename": "libs/binder/rust/src/proxy.rs",
        "patchSetId": 1
      },
      "lineNbr": 386,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2020-12-15T18:48:38Z",
      "side": 1,
      "message": "WpIBinder and death notifications are tested in https://android-review.googlesource.com/c/platform/frameworks/native/+/1315033/ which still hasn\u0027t landed, probably because it was forgotten.\n\n\u003e new+promote should be, yeah. Is that all we\u0027re making a statement about?\n\nRust distinguishes Send, which means we can send this object from one thread to another, and Sync, which means we can concurrently access the same object from multiple threads.\n\nIBinder is thread-safe, i.e. it can be passed from one thread to another. wp\u003c\u003e is fine to share between threads, as it explicitly allows concurrent access from multiple threads to the same underlying object as long as each thread has its own wp\u003c\u003e or sp\u003c\u003e object.",
      "parentUuid": "1dde11a2_b5dcac49",
      "range": {
        "startLine": 386,
        "startChar": 0,
        "endLine": 386,
        "endChar": 69
      },
      "revId": "604114d223a32bab35aac7393f5f1770481993c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}