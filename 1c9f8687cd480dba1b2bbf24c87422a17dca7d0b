{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bdde2054_01df1c24",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2024-01-16T15:01:20Z",
      "side": 1,
      "message": "LGTM other than the weird return type.",
      "revId": "1c9f8687cd480dba1b2bbf24c87422a17dca7d0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "818d7395_84ef1c61",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1496421
      },
      "writtenOn": "2024-01-22T23:04:08Z",
      "side": 1,
      "message": "Just a heads-up: the Rust ecosystem already has most of these APIs mapped out:\n\nhttps://github.com/rust-mobile/ndk\n\nMore APIs are being added and mapped every day or improved (see open PRs) but the main blocker is currently inconsistent/incomplete documentation on the AOSP side (especially with regards to pointer ownership, threading, and callback semantics).\n\nWe haven\u0027t yet mapped the parcel APIs, could we collaborate on that?",
      "revId": "1c9f8687cd480dba1b2bbf24c87422a17dca7d0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "807f4799_6fecc7a2",
        "filename": "libs/nativewindow/rust/src/surface.rs",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2024-01-16T15:01:20Z",
      "side": 1,
      "message": "What\u0027s up with this return type?",
      "revId": "1c9f8687cd480dba1b2bbf24c87422a17dca7d0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d1c06ec_b1c6f040",
        "filename": "libs/nativewindow/rust/src/surface.rs",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2024-01-16T15:46:33Z",
      "side": 1,
      "message": "ANativeWindow_getWidth is documented to return a negative value on error, but I couldn\u0027t find any documentation of what the negative values mean. If there\u0027s a better type to represent these errors I\u0027d be very happy to use it!",
      "parentUuid": "807f4799_6fecc7a2",
      "revId": "1c9f8687cd480dba1b2bbf24c87422a17dca7d0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "652d579b_2d970b7d",
        "filename": "libs/nativewindow/rust/src/surface.rs",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2024-01-16T15:53:27Z",
      "side": 1,
      "message": "Hmm, I found two places that return errors:\n\n* [the first](https://cs.android.com/android/platform/superproject/main/+/main:hardware/libhardware/tests/hwc/cnativewindow.c;l\u003d309;drc\u003d24d1a985cba70eca151ab07d6fef76ff1ca4f483) uses standard errno codes\n* [the second](https://cs.android.com/android/platform/superproject/main/+/main:frameworks/native/libs/gui/include/gui/IGraphicBufferProducer.h;l\u003d467-468;drc\u003d24d1a985cba70eca151ab07d6fef76ff1ca4f483;bpv\u003d1;bpt\u003d1) uses something that looks like Android error codes?",
      "parentUuid": "5d1c06ec_b1c6f040",
      "revId": "1c9f8687cd480dba1b2bbf24c87422a17dca7d0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "493d7b71_cb99c54d",
        "filename": "libs/nativewindow/rust/src/surface.rs",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2024-01-16T15:54:47Z",
      "side": 1,
      "message": "One option is to define an error type that just wraps the integer. This will make `width` work with the question mark operator with catch-all error types.",
      "parentUuid": "652d579b_2d970b7d",
      "revId": "1c9f8687cd480dba1b2bbf24c87422a17dca7d0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea788c1f_dc89999b",
        "filename": "libs/nativewindow/rust/src/surface.rs",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1060289
      },
      "writtenOn": "2024-01-18T00:45:58Z",
      "side": 1,
      "message": "+1, I\u0027d prefer to avoid the error being a raw int. A custom error type would be nice, I think.\n\nI wish we had better standard ones.",
      "parentUuid": "493d7b71_cb99c54d",
      "revId": "1c9f8687cd480dba1b2bbf24c87422a17dca7d0b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}