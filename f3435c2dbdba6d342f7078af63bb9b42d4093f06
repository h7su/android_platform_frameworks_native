{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cf8f9ec1_3bed6575",
        "filename": "libs/binder/Utils.h",
        "patchSetId": 8
      },
      "lineNbr": 97,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2023-10-17T23:23:42Z",
      "side": 1,
      "message": "putting this in a unique_ptr might make tools like address sanitizer unhappy and it isn\u0027t too bad to implement the \"right way\". as a bonus, it doesn\u0027t require the function to be small\n\n```\ntemplate \u003ctypename F\u003e\nstruct scope_guard {\n  F f;\n  ~scope_guard() { f(); }\n};\n\ntemplate \u003ctypename F\u003e\nscope_guard\u003cF\u003e make_scope_guard(F f) {\n  return scope_guard\u003cF\u003e { .f \u003d std::move(f) };\n}\n```",
      "range": {
        "startLine": 97,
        "startChar": 12,
        "endLine": 97,
        "endChar": 41
      },
      "revId": "f3435c2dbdba6d342f7078af63bb9b42d4093f06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f995dd48_45e1ad5c",
        "filename": "libs/binder/Utils.h",
        "patchSetId": 8
      },
      "lineNbr": 97,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-10-17T23:38:49Z",
      "side": 1,
      "message": "Did you mean to comment on https://r.android.com/2784072? I don\u0027t think I can use that scope_guard example in this CL.\n\nRegarding the suggested implementation, we would also need a flag to deactivate guard, delete some constructors and assignment operators and ideally implement move operator. Then, it suddenly makes more sense to copy-paste ScopeGuard from libbase:\nhttps://cs.android.com/android/platform/superproject/main/+/main:system/libbase/include/android-base/scopeguard.h\n\nIs making this based on unique_ptr really a problem? I don\u0027t think address sanitizer should be unhappy about this.\n\nAnyway, I\u0027m leaving it up to Steven to break a tie here.",
      "parentUuid": "cf8f9ec1_3bed6575",
      "range": {
        "startLine": 97,
        "startChar": 12,
        "endLine": 97,
        "endChar": 41
      },
      "revId": "f3435c2dbdba6d342f7078af63bb9b42d4093f06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e48e7ab_1db18c13",
        "filename": "libs/binder/Utils.h",
        "patchSetId": 8
      },
      "lineNbr": 97,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2023-10-17T23:49:10Z",
      "side": 1,
      "message": "\u003e Regarding the suggested implementation, we would also need a flag to deactivate guard\n\n```\ntemplate \u003ctypename F\u003e\nstruct scope_guard {\n  std::optional\u003cF\u003e f;\n  ~scope_guard() { if (f.has_value()) std::move(f.value())(); }\n  void release() { f.reset(); }\n};\n\ntemplate \u003ctypename F\u003e\nscope_guard\u003cF\u003e make_scope_guard(F f) {\n  return scope_guard\u003cF\u003e { .f \u003d std::make_optional(std::move(f)) };\n}\n```\n\n\u003e delete some constructors\n\nwhich constructors are problematic?\n\n\u003e assignment operators and ideally implement move operator\n\nimplicitly defined already\n\n\u003e Is making this based on unique_ptr really a problem? I don\u0027t think address sanitizer should be unhappy about this.\n\nnot sure, but a unique_ptr that points to memory it doesn\u0027t own seems unnecessarily messy to me\n\n\u003e Then, it suddenly makes more sense to copy-paste ScopeGuard from libbase:\n\nthat also sounds reasonable to me",
      "parentUuid": "f995dd48_45e1ad5c",
      "range": {
        "startLine": 97,
        "startChar": 12,
        "endLine": 97,
        "endChar": 41
      },
      "revId": "f3435c2dbdba6d342f7078af63bb9b42d4093f06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe8e2ebf_af108fb7",
        "filename": "libs/binder/Utils.h",
        "patchSetId": 8
      },
      "lineNbr": 97,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2023-10-17T23:49:10Z",
      "side": 1,
      "message": "```\ntemplate \u003ctypename F\u003e\nstruct scope_guard {\n  F f;\n  ~scope_guard() { f(); }\n};\n\ntemplate \u003ctypename F\u003e\nscope_guard\u003cF\u003e make_scope_guard(F f) {\n  return scope_guard\u003cF\u003e { .f \u003d std::move(f) };\n}\n```",
      "parentUuid": "f995dd48_45e1ad5c",
      "range": {
        "startLine": 97,
        "startChar": 12,
        "endLine": 97,
        "endChar": 41
      },
      "revId": "f3435c2dbdba6d342f7078af63bb9b42d4093f06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}