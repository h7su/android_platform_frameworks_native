{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "26fde029_4824724c",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2349,
      "author": {
        "id": 1124543
      },
      "writtenOn": "2021-11-18T02:44:58Z",
      "side": 1,
      "message": "Nit: weird spacing\n\nclang-format should pick up that there\u0027s a config file for it in the project root",
      "range": {
        "startLine": 2349,
        "startChar": 6,
        "endLine": 2349,
        "endChar": 7
      },
      "revId": "60f72e266ea141dcb955018f1c62623937af367e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7edf938e_1baac79d",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2349,
      "author": {
        "id": 1900005
      },
      "writtenOn": "2021-11-18T07:58:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "26fde029_4824724c",
      "range": {
        "startLine": 2349,
        "startChar": 6,
        "endLine": 2349,
        "endChar": 7
      },
      "revId": "60f72e266ea141dcb955018f1c62623937af367e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9813fa91_837326af",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2397,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2021-11-17T17:41:10Z",
      "side": 1,
      "message": "nit: Can move this down to line 2417 where it will be needed.",
      "range": {
        "startLine": 2395,
        "startChar": 4,
        "endLine": 2397,
        "endChar": 59
      },
      "revId": "60f72e266ea141dcb955018f1c62623937af367e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5fc1d8b_7d33a8b3",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2397,
      "author": {
        "id": 1900005
      },
      "writtenOn": "2021-11-18T07:58:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9813fa91_837326af",
      "range": {
        "startLine": 2395,
        "startChar": 4,
        "endLine": 2397,
        "endChar": 59
      },
      "revId": "60f72e266ea141dcb955018f1c62623937af367e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "180f3046_04e35fb7",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2402,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2021-11-17T17:41:10Z",
      "side": 1,
      "message": "I think this should bumped down to debug messages or something like that. It is expected that a device will only have one implementation, AIDL or HIDL, so one of these messages will be hit every time.",
      "range": {
        "startLine": 2402,
        "startChar": 8,
        "endLine": 2402,
        "endChar": 14
      },
      "revId": "60f72e266ea141dcb955018f1c62623937af367e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61845072_0bcb26f0",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2402,
      "author": {
        "id": 1900005
      },
      "writtenOn": "2021-11-18T07:58:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "180f3046_04e35fb7",
      "range": {
        "startLine": 2402,
        "startChar": 8,
        "endLine": 2402,
        "endChar": 14
      },
      "revId": "60f72e266ea141dcb955018f1c62623937af367e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e91420f_fbb25973",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2449,
      "author": {
        "id": 1124543
      },
      "writtenOn": "2021-11-18T02:44:58Z",
      "side": 1,
      "message": "This should probably be a bit more structured like:\n\n```\nif (aidl) {\n  do_aidl_stuff();\n} else if (hidl) {\n  do_hidl_stuff();\n}\n```",
      "range": {
        "startLine": 2449,
        "startChar": 4,
        "endLine": 2449,
        "endChar": 6
      },
      "revId": "60f72e266ea141dcb955018f1c62623937af367e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0a98fb8_5e41b99d",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2449,
      "author": {
        "id": 1900005
      },
      "writtenOn": "2021-11-18T07:58:49Z",
      "side": 1,
      "message": "smoreland@ recommends to invoke both HIDL and AIDL if both are found. My opinion was also to invoke AIDL if found else try HIDL.\n\nsmoreland@ please confirm if I should call both HIDL and AIDL",
      "parentUuid": "1e91420f_fbb25973",
      "range": {
        "startLine": 2449,
        "startChar": 4,
        "endLine": 2449,
        "endChar": 6
      },
      "revId": "60f72e266ea141dcb955018f1c62623937af367e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f8b9e49_0d5158c7",
        "filename": "cmds/dumpstate/dumpstate.h",
        "patchSetId": 3
      },
      "lineNbr": 410,
      "author": {
        "id": 1124543
      },
      "writtenOn": "2021-11-18T02:44:58Z",
      "side": 1,
      "message": "Hmm, this extra field feels a bit odd. Can/should we just static_cast\u003c\u003e from one type to the other? The HIDL VTS test already enforces that the HIDL version of the HAL rejects any unrecognized DumpstateMode values (e.g. `static_cast\u003cHidlDumpstateMode\u003e(-1)`, see `TestInvalidModeArgument_*` test cases), so I think static_cast-ing from the AIDL enum back into the HIDL enum in dumpstate.cpp is reasonable to do rather than adding yet another field to the options.\n\nb/148168577 remains relevant as eventual follow-up, we\u0027d just update the IDumpstate AIDL file and BugreportManager to reference the HAL enum, which is an actual API surface, and get rid of those old BUGREPORT_MODE_* constants that are not.",
      "range": {
        "startLine": 410,
        "startChar": 60,
        "endLine": 410,
        "endChar": 83
      },
      "revId": "60f72e266ea141dcb955018f1c62623937af367e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90c86f49_d10d3694",
        "filename": "cmds/dumpstate/dumpstate.h",
        "patchSetId": 3
      },
      "lineNbr": 410,
      "author": {
        "id": 1900005
      },
      "writtenOn": "2021-11-18T07:58:49Z",
      "side": 1,
      "message": "Yes, indeed this is messy.\n\nLooking a bit more at the code, My recommendation is below, remove both \"dumpstate_hal_mode\" and \"dumpstate_aidl_mode\" from \"options_\" and instead put BugreportMode in options_\n\nAnd then have two static utility functions, which translates BugreportMode to HAL mode, it would be a quick translation and not called frequently so ok to do it in a function when needed, than one-time upfront like its done now.\nDumpstateModeHidl GetHidlDumpstateHalMode(BugreportMode mode)\nDumpstateModeAidl GetAidlDumpstateHalMode(BugreportMode mode)\n\nI am not very comfortable with static cast of one enum to another.This makes the code readability difficult.\nThe HIDL interface and AIDL interface as such are different, and over time AIDL interface may add more modes which could then make it messy.\nThe error handling will return error, yes, but still it will need some investigation in the code for users to figure out what went wrong.\n\nLet me know if this is ok and I will make the change",
      "parentUuid": "5f8b9e49_0d5158c7",
      "range": {
        "startLine": 410,
        "startChar": 60,
        "endLine": 410,
        "endChar": 83
      },
      "revId": "60f72e266ea141dcb955018f1c62623937af367e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}