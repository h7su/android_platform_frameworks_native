{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ff79a30d_afbc26b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-11T14:59:56Z",
      "side": 1,
      "message": "Hey folks I have update the CL addressing the comments an re-tested.\nRhed/Paul: does the new if{} work for you?\nNandanda for the other comments.",
      "revId": "78e450c03810cb463483cb7dc618578150530657",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "178730c1_af9574c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1810984
      },
      "writtenOn": "2021-01-11T16:08:58Z",
      "side": 1,
      "message": "\u003e Rhed/Paul: does the new if{} work for you?\nI think the new if{} works for me.",
      "parentUuid": "ff79a30d_afbc26b0",
      "revId": "78e450c03810cb463483cb7dc618578150530657",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37ceac55_ba314f39",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2021-01-13T13:05:28Z",
      "side": 1,
      "message": "r",
      "revId": "78e450c03810cb463483cb7dc618578150530657",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d6f6576_0c88efed",
        "filename": "cmds/dumpstate/DumpstateUtil.cpp",
        "patchSetId": 5
      },
      "lineNbr": 337,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-01-12T16:51:56Z",
      "side": 1,
      "message": "seems like it would be better to reuse what we have in the zygote instead? (which is basically the readdir() solution, but doing that before the fork(), and with an abort if it catches anything so we actually have clean code in the steady state. yes, there\u0027s a potential race, but we\u0027ll win it often enough [and this alternative isn\u0027t right all the time either].)",
      "revId": "78e450c03810cb463483cb7dc618578150530657",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c2af514_638db9e9",
        "filename": "cmds/dumpstate/DumpstateUtil.cpp",
        "patchSetId": 5
      },
      "lineNbr": 337,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-12T17:04:53Z",
      "side": 1,
      "message": "The timing race doesn\u0027t worry me. I agree it\u0027s  rare enough (although it\u0027s more binary, more runtime and more code to reason about and maintain). But fine to switch to that. \n\nI personally worry a bit more about the abort(). I am all for \"fail fast\" but not in \"leaf\" binary like dumpstate. Here\u0027s my objection to the abort:\n- If that happens in the zygote that generates a very user-visible bug, people will file a bug.\n- If it happens in dumpstate, extremely few people will notice, very few will report it, as it will just happen to fail the bugreport. There is imho more risk that, if a CLOEXEC bug sneaks in, it will stay there, break bug reports. THe risk is that somebody finds out only too late, when the ship (Android) has sailed.\n\nBut if you folks feel you want a fail-fast and buy the future risk I am fine as well. This is the sort of call owners should make.",
      "parentUuid": "7d6f6576_0c88efed",
      "revId": "78e450c03810cb463483cb7dc618578150530657",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39632192_37a64039",
        "filename": "cmds/dumpstate/DumpstateUtil.cpp",
        "patchSetId": 5
      },
      "lineNbr": 337,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2021-01-13T15:30:40Z",
      "side": 1,
      "message": "If dumpstate crashes, if the bugreport is triggered from power button, or from betterbug, the caller should notice it, because the death recipient should trigger on the other side and the api client will get an error. I think \"adb bugreport\" should also catch aborts of the other side of the socket, but if it does not, it can cause annoying timeouts on Â adb shell, which isn\u0027t ideal. We also have presubmit tests etc for bugreports now, so I\u0027m ok with being cautious and following enh@\u0027s suggestion",
      "parentUuid": "2c2af514_638db9e9",
      "revId": "78e450c03810cb463483cb7dc618578150530657",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be7b377c_555ebe2f",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2992,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2021-01-13T13:05:28Z",
      "side": 1,
      "message": "how much time does this typically take? if it is closer to 10s, this is the thing that need to be enqueued.",
      "range": {
        "startLine": 2992,
        "startChar": 2,
        "endLine": 2992,
        "endChar": 25
      },
      "revId": "78e450c03810cb463483cb7dc618578150530657",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1adfa5ae_275d40c7",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2992,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-13T13:19:01Z",
      "side": 1,
      "message": "In the case I tested is hundreds of ms. But if the system is in some sad state, we shouldn\u0027t lose the trace.\nEffectively this does a open() + write(src\u003din_memory_ring_buffer), which is typically few MB. \n\nWe can\u0027t enqueue this because the trace needs to be snapshotted early, otherwise that becomes the \"trace of dumpstate\" rather than \"the trace of the system just before dumpstat was invoked\"",
      "parentUuid": "be7b377c_555ebe2f",
      "range": {
        "startLine": 2992,
        "startChar": 2,
        "endLine": 2992,
        "endChar": 25
      },
      "revId": "78e450c03810cb463483cb7dc618578150530657",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4c6369c_19480bab",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2992,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2021-01-13T15:30:40Z",
      "side": 1,
      "message": "let\u0027s add a comment saying this should not be enqueued so that a future maintainer won\u0027t be temped\n\n(I also wonder if DUMP_TRACES_TASK should not be enqueued by that logic - Rhed?)",
      "parentUuid": "1adfa5ae_275d40c7",
      "range": {
        "startLine": 2992,
        "startChar": 2,
        "endLine": 2992,
        "endChar": 25
      },
      "revId": "78e450c03810cb463483cb7dc618578150530657",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}