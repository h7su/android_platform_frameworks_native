{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8d19b712_17a87fb5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-04-18T19:42:56Z",
      "side": 1,
      "message": "where is this test? Do we have a way to test this in upstream Android? Can binderLibTest be modified or can the tests there be reused?",
      "range": {
        "startLine": 12,
        "startChar": 6,
        "endLine": 12,
        "endChar": 24
      },
      "revId": "aff9e1848212fe47fb38add6134a430c88de5265",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fbc3e46_30828741",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-04-18T22:15:30Z",
      "side": 1,
      "message": "The test lives under system/core/trusty in the CL at https://android-review.googlesource.com/c/platform/system/core/+/2045930. I could move it to the binder directory if that would be useful.\n\nThere are a few complications: one is that the test is a client that requires a service on the Trusty side (CL at https://android-review.googlesource.com/c/trusty/app/sample/+/1932245).\n\nThe second is that Trusty doesn\u0027t run under Cuttlefish, but on an arm64 qemu built for Trusty which runs a specific AOSP build (lunch qemu_trusty_arm64-userdebug). I\u0027ve been running the test manually, still have to figure it out how to automate that since atest doesn\u0027t run on the Trusty build.",
      "parentUuid": "8d19b712_17a87fb5",
      "range": {
        "startLine": 12,
        "startChar": 6,
        "endLine": 12,
        "endChar": 24
      },
      "revId": "aff9e1848212fe47fb38add6134a430c88de5265",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76e84bec_0339e9fb",
        "filename": "libs/binder/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 272,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-04-18T19:42:56Z",
      "side": 1,
      "message": "nit: do we need this if it\u0027s only used once?",
      "range": {
        "startLine": 272,
        "startChar": 0,
        "endLine": 272,
        "endChar": 38
      },
      "revId": "aff9e1848212fe47fb38add6134a430c88de5265",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e2edc5a_5dd798c4",
        "filename": "libs/binder/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 272,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-04-18T22:37:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76e84bec_0339e9fb",
      "range": {
        "startLine": 272,
        "startChar": 0,
        "endLine": 272,
        "endChar": 38
      },
      "revId": "aff9e1848212fe47fb38add6134a430c88de5265",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe04403c_b43b60b3",
        "filename": "libs/binder/RpcTransportTrusty.cpp",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-04-18T19:42:56Z",
      "side": 1,
      "message": "nit: should we use this same logic in RpcTransportRaw? Seems we use a different way of handling it there",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 89,
        "endChar": 13
      },
      "revId": "aff9e1848212fe47fb38add6134a430c88de5265",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d8ade1c_c6e8b56c",
        "filename": "libs/binder/RpcTransportTrusty.cpp",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-04-18T22:26:18Z",
      "side": 1,
      "message": "There are a few significant differences in this code, mainly because tipc works like a message-oriented transport (the closest thing in Linux sockets would be SOCK_SEQPACKET, but the tipc file is not a socket):\n* tipc doesn\u0027t support reading a message with multiple reads, every message needs to be read with a single call. For this reason, I split messages at the sender and transmit each iovec as a separate message (assuming that the receiver won\u0027t attempt to read a message partially).\n* The receiver can read multiple messages with one interruptableReadFully call, but assumes that an iovec doesn\u0027t end in the middle of a message (or vice versa).\n\nThe simplest way to handle this is here in the RPC transport, but there are other alternatives that we can discuss.",
      "parentUuid": "fe04403c_b43b60b3",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 89,
        "endChar": 13
      },
      "revId": "aff9e1848212fe47fb38add6134a430c88de5265",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f99a6088_7398c3e9",
        "filename": "libs/binder/RpcTransportTrusty.cpp",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-04-18T22:55:55Z",
      "side": 1,
      "message": "\u003e assumes that an iovec doesn\u0027t end in the middle of a message (or vice versa)\n\nCorrection: this only goes in one direction. An iovec can receive multiple messages, but a message can\u0027t be split across multiple iovecs because the latter would require multiple read() calls per message.",
      "parentUuid": "2d8ade1c_c6e8b56c",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 89,
        "endChar": 13
      },
      "revId": "aff9e1848212fe47fb38add6134a430c88de5265",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e985c6e_f505ceff",
        "filename": "libs/binder/RpcTransportTrusty.cpp",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-04-20T00:06:46Z",
      "side": 1,
      "message": "Would it make more sense to merge this with the other implementation but with an additional `bool splitIovecs` argument that controls whether it does one send per iov?",
      "parentUuid": "f99a6088_7398c3e9",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 89,
        "endChar": 13
      },
      "revId": "aff9e1848212fe47fb38add6134a430c88de5265",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ce6e47c_e7bc3d69",
        "filename": "libs/binder/RpcTransportTrusty.cpp",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-04-20T01:29:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e985c6e_f505ceff",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 89,
        "endChar": 13
      },
      "revId": "aff9e1848212fe47fb38add6134a430c88de5265",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adfe0502_bf75efa4",
        "filename": "libs/binder/RpcTransportTrusty.cpp",
        "patchSetId": 2
      },
      "lineNbr": 133,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-04-18T19:42:56Z",
      "side": 1,
      "message": "is this the only thing forked from the raw transport? I\u0027m wondering if you can move the interruptableReadOrWrite function into maybe a common header so that we can reuse the logic? (a lot seems duplicated - maybe I\u0027m missing another reason)",
      "range": {
        "startLine": 133,
        "startChar": 64,
        "endLine": 133,
        "endChar": 84
      },
      "revId": "aff9e1848212fe47fb38add6134a430c88de5265",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39fa4bba_3b37238c",
        "filename": "libs/binder/RpcTransportTrusty.cpp",
        "patchSetId": 2
      },
      "lineNbr": 133,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-04-18T22:26:18Z",
      "side": 1,
      "message": "There are a few differences, some discussed in the other comment. Another one is pollRead(). Sockets support MSG_PEEK but the TIPC device doesn\u0027t (it\u0027s basically a device file with some extra ioctl\u0027s).",
      "parentUuid": "adfe0502_bf75efa4",
      "range": {
        "startLine": 133,
        "startChar": 64,
        "endLine": 133,
        "endChar": 84
      },
      "revId": "aff9e1848212fe47fb38add6134a430c88de5265",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb56b003_4754f044",
        "filename": "libs/binder/RpcTransportTrusty.cpp",
        "patchSetId": 2
      },
      "lineNbr": 133,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-04-20T00:22:00Z",
      "side": 1,
      "message": "Would we want to switch RpcTransportRaw::pollRead from MSG_PEEK to poll as well? I tried it a while ago and it worked, but there might be some subtle differences between the two approaches that I\u0027m not aware of and that the tests might not catch.",
      "parentUuid": "39fa4bba_3b37238c",
      "range": {
        "startLine": 133,
        "startChar": 64,
        "endLine": 133,
        "endChar": 84
      },
      "revId": "aff9e1848212fe47fb38add6134a430c88de5265",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90bd6169_1f268ec2",
        "filename": "libs/binder/RpcTransportTrusty.cpp",
        "patchSetId": 2
      },
      "lineNbr": 133,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-04-20T01:29:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb56b003_4754f044",
      "range": {
        "startLine": 133,
        "startChar": 64,
        "endLine": 133,
        "endChar": 84
      },
      "revId": "aff9e1848212fe47fb38add6134a430c88de5265",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}