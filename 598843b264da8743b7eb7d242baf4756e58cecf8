{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "60ce2b84_61e2b58d",
        "filename": "libs/binder/RpcTransportRaw.cpp",
        "patchSetId": 9
      },
      "lineNbr": 75,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-02T20:19:14Z",
      "side": 1,
      "message": "why do we need separate server and client contexts?",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 75,
        "endChar": 1
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ce40f36_5118c2fc",
        "filename": "libs/binder/RpcTransportRaw.cpp",
        "patchSetId": 9
      },
      "lineNbr": 75,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-08-03T16:41:10Z",
      "side": 1,
      "message": "This is needed for TLS.",
      "parentUuid": "60ce2b84_61e2b58d",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 75,
        "endChar": 1
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcf4726f_22867221",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 9
      },
      "lineNbr": 33,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-02T20:19:14Z",
      "side": 1,
      "message": "nit: since we are creating a new interface, could we put the error information in the return type?",
      "range": {
        "startLine": 33,
        "startChar": 32,
        "endLine": 33,
        "endChar": 70
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1defde3f_8b63ec6d",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 9
      },
      "lineNbr": 33,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-08-03T16:41:10Z",
      "side": 1,
      "message": "sure. WDYT about\n\n```\nint send(buf, size, std::string* error)\n```\n\n?",
      "parentUuid": "fcf4726f_22867221",
      "range": {
        "startLine": 33,
        "startChar": 32,
        "endLine": 33,
        "endChar": 70
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22d437d4_80b39238",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 9
      },
      "lineNbr": 33,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-08-03T17:07:24Z",
      "side": 1,
      "message": "I could also use base::Result now that we have libbase. Though, that may bring in libfmt dependency.",
      "parentUuid": "1defde3f_8b63ec6d",
      "range": {
        "startLine": 33,
        "startChar": 32,
        "endLine": 33,
        "endChar": 70
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "debfff8b_1356e5af",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 9
      },
      "lineNbr": 53,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-02T20:19:14Z",
      "side": 1,
      "message": "This isn\u0027t the behavior we want, right? Since the goal of using this function is to drain commands. If there are things in the kernel, we could drain more.\n\nIs this a limitation of TLS?",
      "range": {
        "startLine": 52,
        "startChar": 18,
        "endLine": 53,
        "endChar": 17
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "357eea35_f894fe9c",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 9
      },
      "lineNbr": 53,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-08-03T16:41:10Z",
      "side": 1,
      "message": "It is a limitation of libssl. libssl may have pending data in a userspace buffer.\n\nI need to peek the userspace buffer without actually calling any syscalls, see CL:1747935",
      "parentUuid": "debfff8b_1356e5af",
      "range": {
        "startLine": 52,
        "startChar": 18,
        "endLine": 53,
        "endChar": 17
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee79734e_5998420f",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 9
      },
      "lineNbr": 67,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-02T20:19:14Z",
      "side": 1,
      "message": "there are a lot of allocations here (we are adding one per session). Do note that RpcSession/RpcServer are always allocated on the heap w/ sp\u003c\u003e, so they can have RpcTransport as a member without freezing sizeof(RpcTransport).\n\nThough, it won\u0027t work because it\u0027s a virtual class? Okay.",
      "range": {
        "startLine": 67,
        "startChar": 26,
        "endLine": 67,
        "endChar": 55
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eedfad97_c69717d9",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 9
      },
      "lineNbr": 67,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-08-03T16:42:57Z",
      "side": 1,
      "message": "If you really want to avoid allocations on the heap, this can be changed to a struct of function pointers. But it would be pretty nasty.",
      "parentUuid": "ee79734e_5998420f",
      "range": {
        "startLine": 67,
        "startChar": 26,
        "endLine": 67,
        "endChar": 55
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1437d0e0_179a9be7",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 9
      },
      "lineNbr": 77,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-02T20:19:14Z",
      "side": 1,
      "message": "this doesn\u0027t seem very extensible",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 77,
        "endChar": 54
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "704a81a1_a348dbe0",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 9
      },
      "lineNbr": 77,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-08-03T16:41:10Z",
      "side": 1,
      "message": "This is for logging \u0026 testing only.",
      "parentUuid": "1437d0e0_179a9be7",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 77,
        "endChar": 54
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "312ab93a_ef11c751",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-02T20:19:14Z",
      "side": 1,
      "message": "make this virtual instead?",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 79,
        "endChar": 95
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5fd64270_7eb883c5",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-08-03T17:40:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "312ab93a_ef11c751",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 79,
        "endChar": 95
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93483b59_79cccae6",
        "filename": "libs/binder/include/binder/RpcTransportRaw.h",
        "patchSetId": 9
      },
      "lineNbr": 29,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-02T20:24:26Z",
      "side": 1,
      "message": "make constructor private, make virtual destructor, have a static method which returns \u0026 constructs std::unique_ptr\u003cRpcTransportCtxFactoryRaw\u003e (we don\u0027t want to risk sizeof(RpcTransportCtxFactoryRaw) being frozen)",
      "range": {
        "startLine": 29,
        "startChar": 6,
        "endLine": 29,
        "endChar": 31
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1654ce40_55863c50",
        "filename": "libs/binder/include/binder/RpcTransportRaw.h",
        "patchSetId": 9
      },
      "lineNbr": 29,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-08-03T17:40:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "93483b59_79cccae6",
      "range": {
        "startLine": 29,
        "startChar": 6,
        "endLine": 29,
        "endChar": 31
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}