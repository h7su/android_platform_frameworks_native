{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "60ce2b84_61e2b58d",
        "filename": "libs/binder/RpcTransportRaw.cpp",
        "patchSetId": 9
      },
      "lineNbr": 75,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-02T20:19:14Z",
      "side": 1,
      "message": "why do we need separate server and client contexts?",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 75,
        "endChar": 1
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcf4726f_22867221",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 9
      },
      "lineNbr": 33,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-02T20:19:14Z",
      "side": 1,
      "message": "nit: since we are creating a new interface, could we put the error information in the return type?",
      "range": {
        "startLine": 33,
        "startChar": 32,
        "endLine": 33,
        "endChar": 70
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "debfff8b_1356e5af",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 9
      },
      "lineNbr": 53,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-02T20:19:14Z",
      "side": 1,
      "message": "This isn\u0027t the behavior we want, right? Since the goal of using this function is to drain commands. If there are things in the kernel, we could drain more.\n\nIs this a limitation of TLS?",
      "range": {
        "startLine": 52,
        "startChar": 18,
        "endLine": 53,
        "endChar": 17
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee79734e_5998420f",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 9
      },
      "lineNbr": 67,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-02T20:19:14Z",
      "side": 1,
      "message": "there are a lot of allocations here (we are adding one per session). Do note that RpcSession/RpcServer are always allocated on the heap w/ sp\u003c\u003e, so they can have RpcTransport as a member without freezing sizeof(RpcTransport).\n\nThough, it won\u0027t work because it\u0027s a virtual class? Okay.",
      "range": {
        "startLine": 67,
        "startChar": 26,
        "endLine": 67,
        "endChar": 55
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1437d0e0_179a9be7",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 9
      },
      "lineNbr": 77,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-02T20:19:14Z",
      "side": 1,
      "message": "this doesn\u0027t seem very extensible",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 77,
        "endChar": 54
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "312ab93a_ef11c751",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-02T20:19:14Z",
      "side": 1,
      "message": "make this virtual instead?",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 79,
        "endChar": 95
      },
      "revId": "598843b264da8743b7eb7d242baf4756e58cecf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}