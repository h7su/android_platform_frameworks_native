{
  "comments": [
    {
      "key": {
        "uuid": "787745f3_7e7f12fe",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-07-26T09:30:14Z",
      "side": 1,
      "message": "technically you don\u0027t even need a pair if \u00270\u0027 means error or uncached (assuming you want to try again in case there was an error). You could even use an atomic and drop the lock, though I\u0027m not sure that would actually be faster since this lock shouldn\u0027t be contended.",
      "range": {
        "startLine": 149,
        "startChar": 6,
        "endLine": 149,
        "endChar": 29
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61149046_0fa8d01c",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-07-26T10:00:03Z",
      "side": 1,
      "message": "0 is not an error. It\u0027s unspecified - an interface built with version unspecified.",
      "parentUuid": "787745f3_7e7f12fe",
      "range": {
        "startLine": 149,
        "startChar": 6,
        "endLine": 149,
        "endChar": 29
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e765f58d_645b4bf2",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-07-26T10:07:53Z",
      "side": 1,
      "message": "do you want to distinguish the error case vs the unspecified case then?",
      "parentUuid": "61149046_0fa8d01c",
      "range": {
        "startLine": 149,
        "startChar": 6,
        "endLine": 149,
        "endChar": 29
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8065a18_0725e2a0",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-07-26T11:48:41Z",
      "side": 1,
      "message": "Ok I will change version as signed int so that we can treat negative numbers as errors, 0 as unspecified and 1, 2, ... as normal ones. Sounds right?\n\n(I thought I have tried this but can\u0027t remember why I finally choose unsigned int...)",
      "parentUuid": "e765f58d_645b4bf2",
      "range": {
        "startLine": 149,
        "startChar": 6,
        "endLine": 149,
        "endChar": 29
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c701dd91_7a70c461",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-07-26T12:02:53Z",
      "side": 1,
      "message": "sounds good to me. Is it supposed to be a major/minor format?",
      "parentUuid": "a8065a18_0725e2a0",
      "range": {
        "startLine": 149,
        "startChar": 6,
        "endLine": 149,
        "endChar": 29
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05ec2ba3_39d94233",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 189,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-07-26T09:30:14Z",
      "side": 1,
      "message": "is a return value of \u00270\u0027 an error?",
      "range": {
        "startLine": 186,
        "startChar": 0,
        "endLine": 189,
        "endChar": 8
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88126ce1_c77516d9",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 189,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-07-26T10:00:03Z",
      "side": 1,
      "message": "no...",
      "parentUuid": "05ec2ba3_39d94233",
      "range": {
        "startLine": 186,
        "startChar": 0,
        "endLine": 189,
        "endChar": 8
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "168fc67c_6521f9f1",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 191,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-07-26T09:30:14Z",
      "side": 1,
      "message": "since this method can actually change state (store mIsAlive in case of dead remote), maybe just drop the const? Also gets rid of the ugly const_cast below.",
      "range": {
        "startLine": 191,
        "startChar": 41,
        "endLine": 191,
        "endChar": 46
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dfa1a56_89653f5f",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 191,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-07-26T10:00:03Z",
      "side": 1,
      "message": "Oh I just followed the pattern at getInterfaceDescriptor() which essentially does the same thing. Doing the same thing in different ways would look weird. Do you want me to drop const from getInterfaceDescriptor as well?",
      "parentUuid": "168fc67c_6521f9f1",
      "range": {
        "startLine": 191,
        "startChar": 41,
        "endLine": 191,
        "endChar": 46
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e100c61_89b30a1c",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 191,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-07-26T10:07:53Z",
      "side": 1,
      "message": "ah I didn\u0027t see that, it seems more correct to drop it there as well, but if you prefer to keep it this way I don\u0027t feel too strongly about it.",
      "parentUuid": "4dfa1a56_89653f5f",
      "range": {
        "startLine": 191,
        "startChar": 41,
        "endLine": 191,
        "endChar": 46
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3b29f56_2e9c4c76",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 191,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-07-26T11:48:41Z",
      "side": 1,
      "message": "ok then I will keep this as const.",
      "parentUuid": "1e100c61_89b30a1c",
      "range": {
        "startLine": 191,
        "startChar": 41,
        "endLine": 191,
        "endChar": 46
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b7bfcc0_7ae72342",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 196,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-07-26T09:30:14Z",
      "side": 1,
      "message": "nit: indent",
      "range": {
        "startLine": 196,
        "startChar": 10,
        "endLine": 196,
        "endChar": 37
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93453ffa_6713a19c",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 196,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-07-26T10:00:03Z",
      "side": 1,
      "message": "yes I will",
      "parentUuid": "7b7bfcc0_7ae72342",
      "range": {
        "startLine": 196,
        "startChar": 10,
        "endLine": 196,
        "endChar": 37
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad37c803_90a3f9fe",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 207,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-07-26T09:30:14Z",
      "side": 1,
      "message": "as mentioned above, you could just store the version unconditionally; two threads might get in this block, but storing the same value twice doesn\u0027t hurt as long as it\u0027s done atomically.",
      "range": {
        "startLine": 206,
        "startChar": 8,
        "endLine": 207,
        "endChar": 39
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97ab26fe_f2741ac6",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 211,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-07-26T09:30:14Z",
      "side": 1,
      "message": "theoretically this is not safe without the lock; thread T1/T2 could both reach line 201; T1 could then complete the next few lines, and be in the process of storing something in mVersionCache.first; T2 meanwhile could have a transaction error, and return a partially stored value in mVersionCache.first\n\nI don\u0027t think this can happen on any of the archs we support (writes to aligned ints should be atomic), but all the same it\u0027s safer to just return \"ver\" here (and default to 0).",
      "range": {
        "startLine": 211,
        "startChar": 11,
        "endLine": 211,
        "endChar": 31
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20da691d_258a88de",
        "filename": "libs/binder/IInterface.cpp",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-07-26T09:30:14Z",
      "side": 1,
      "message": "Erm this feels wrong...",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 59,
        "endChar": 1
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77238efd_fc52b8ee",
        "filename": "libs/binder/include/binder/IBinder.h",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-07-26T09:30:14Z",
      "side": 1,
      "message": "0 means error... ?",
      "range": {
        "startLine": 84,
        "startChar": 4,
        "endLine": 85,
        "endChar": 30
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f99b1177_5ef45338",
        "filename": "libs/binder/include/binder/IBinder.h",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-07-26T11:48:41Z",
      "side": 1,
      "message": "ver \u003d\u003d 0: unspecified\nver \u003c 0: error\nver \u003e 0: normal",
      "parentUuid": "77238efd_fc52b8ee",
      "range": {
        "startLine": 84,
        "startChar": 4,
        "endLine": 85,
        "endChar": 30
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0cc08c4_09b6e8a8",
        "filename": "libs/binder/include/binder/IInterface.h",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-07-26T09:30:14Z",
      "side": 1,
      "message": "This class is not supposed to know about this stuff; I suggest implementing VERSION_TRANSACTION in BBinder, and calling getInterfaceVersion() in the implementation over there. That will then get the result of the overriden variant implemented by IMPLEMENT_META_INTERFACE.\n\nMay have to make that virtual, but that also makes it consistent with the rest.",
      "range": {
        "startLine": 57,
        "startChar": 32,
        "endLine": 58,
        "endChar": 74
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c617c699_512b0f7b",
        "filename": "libs/binder/include/binder/IInterface.h",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-07-26T10:00:03Z",
      "side": 1,
      "message": "Yeah, that was my first approach. I had to make getInterfaceVersion() as virtual and it broke existing prebuilts (as expected).",
      "parentUuid": "b0cc08c4_09b6e8a8",
      "range": {
        "startLine": 57,
        "startChar": 32,
        "endLine": 58,
        "endChar": 74
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acf1fb03_a7dc4de2",
        "filename": "libs/binder/include/binder/IInterface.h",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-07-26T10:07:53Z",
      "side": 1,
      "message": "bleh that is pretty horrible :(( In that case, could we not implement VERSION_TRANSACTION in all the auto-generated interface code? I know that technically it belongs to the interface, but having these things here makes me really sad.",
      "parentUuid": "c617c699_512b0f7b",
      "range": {
        "startLine": 57,
        "startChar": 32,
        "endLine": 58,
        "endChar": 74
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43dc828f_6333dec1",
        "filename": "libs/binder/include/binder/IInterface.h",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-07-26T11:48:41Z",
      "side": 1,
      "message": "This was exactly what I tried at first:\n1) DECLARE_META_INTERFACE adds getInterfaceVersion() as a new virtual function (just like getInterfaceDescriptor())\n2) Corresponding change also at IMPLEMENT_META_INTERFACE.\n3) BBinder::onTransact dispatches to it.\n4) No change in the aidl compiler.\n\nBut this broke prebuilt binaries that were built before this CL, because this CL changed the vtable layout of the interface/stubs class.\n\n-----------------------\n\nOne way to remove onTransact from here is to implement this entirely in the generated stub class. In fact, that was my second trial, but I didn\u0027t like it because I think libbinder must not depend on how the code is generated by the aidl compiler.\n\nIf what I think was wrong, I will follow that path. What do you think?",
      "parentUuid": "acf1fb03_a7dc4de2",
      "range": {
        "startLine": 57,
        "startChar": 32,
        "endLine": 58,
        "endChar": 74
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06217a3c_ac4c2ca4",
        "filename": "libs/binder/include/binder/IInterface.h",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-07-26T11:54:15Z",
      "side": 1,
      "message": "in other words, my question is \"can part of meta-interface be implemented outside of libbinder\"?",
      "parentUuid": "43dc828f_6333dec1",
      "range": {
        "startLine": 57,
        "startChar": 32,
        "endLine": 58,
        "endChar": 74
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9554e726_fac2e779",
        "filename": "libs/binder/include/binder/IInterface.h",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-07-26T12:02:53Z",
      "side": 1,
      "message": "I think your second suggestion is what I meant; for the stub case, don\u0027t change libbinder at all, and instead implement this purely in the generated code.\n\nI don\u0027t think you\u0027re wrong about that not being a nice dependency, though I do prefer it over this. One other idea: how about not making libbinder aware of this at all? You could also auto-generate the proxy version of this completely. In case people always call this on an instantiated version (not IBinder, but IFoo), that should be ok. You would still do the correct thing for interfaces not implementing it, because you can simply map UNKNOWN_TRANSACTION to 0.",
      "parentUuid": "43dc828f_6333dec1",
      "range": {
        "startLine": 57,
        "startChar": 32,
        "endLine": 58,
        "endChar": 74
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16ffa5f6_d773030e",
        "filename": "libs/binder/include/binder/IInterface.h",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-07-26T12:16:36Z",
      "side": 1,
      "message": "Ok then getInterfaceVersion() is not part of the meta-interface, but just an extra method that is emitted by the aidl compiler in addition to the user-defined methods.\n\nThen, of course, we need to do the same for the Java side. aosp/712625 is not needed.\n\nI am okay with that because we would like to enforce automatic code generation for the \u0027versioned\u0027 interfaces.",
      "parentUuid": "9554e726_fac2e779",
      "range": {
        "startLine": 57,
        "startChar": 32,
        "endLine": 58,
        "endChar": 74
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fe98fd8_01db8006",
        "filename": "libs/binder/include/binder/IInterface.h",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-07-26T09:30:14Z",
      "side": 1,
      "message": "which also allows you to get rid of this :)",
      "range": {
        "startLine": 163,
        "startChar": 0,
        "endLine": 166,
        "endChar": 58
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4088bffa_61f07db7",
        "filename": "libs/binder/include/binder/IInterface.h",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-07-26T10:00:03Z",
      "side": 1,
      "message": "I would love to.. but existing prebuilts.. :(",
      "parentUuid": "5fe98fd8_01db8006",
      "range": {
        "startLine": 163,
        "startChar": 0,
        "endLine": 166,
        "endChar": 58
      },
      "revId": "332a2fb56f3634758ea131925198e93345759ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}