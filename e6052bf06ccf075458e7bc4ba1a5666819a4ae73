{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "af132cff_61ed456e",
        "filename": "libs/binder/Parcel.cpp",
        "patchSetId": 7
      },
      "lineNbr": 424,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-20T01:01:18Z",
      "side": 1,
      "message": "btw, you might consider adding some cases to this in binderUnitTest. A lot of the coverage for this function is in like Bundle tests or similar, and that won\u0027t really cover the RPC stuff either.",
      "range": {
        "startLine": 424,
        "startChar": 17,
        "endLine": 424,
        "endChar": 27
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d90195fb_efa72a45",
        "filename": "libs/binder/Parcel.cpp",
        "patchSetId": 7
      },
      "lineNbr": 458,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-20T01:01:18Z",
      "side": 1,
      "message": "TIL an assignment can be falsy in C++. Cool",
      "range": {
        "startLine": 458,
        "startChar": 14,
        "endLine": 458,
        "endChar": 26
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef1f2f6c_bc950109",
        "filename": "libs/binder/Parcel.cpp",
        "patchSetId": 7
      },
      "lineNbr": 458,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-05-20T17:42:53Z",
      "side": 1,
      "message": "I can make all these explicit if anyone has a preference",
      "parentUuid": "d90195fb_efa72a45",
      "range": {
        "startLine": 458,
        "startChar": 14,
        "endLine": 458,
        "endChar": 26
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da545193_f2bc5383",
        "filename": "libs/binder/Parcel.cpp",
        "patchSetId": 7
      },
      "lineNbr": 458,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-20T17:55:33Z",
      "side": 1,
      "message": "oh - no, not at all. Please keep it. I think it\u0027s quite clear, just didn\u0027t know the syntax exists.",
      "parentUuid": "ef1f2f6c_bc950109",
      "range": {
        "startLine": 458,
        "startChar": 14,
        "endLine": 458,
        "endChar": 26
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f44e4e3_2db5b073",
        "filename": "libs/binder/RpcSession.cpp",
        "patchSetId": 7
      },
      "lineNbr": 150,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-20T01:01:18Z",
      "side": 1,
      "message": "aside: this brings up the topic of \"failing shallow VS failing deep\" VS \"don\u0027t repeat yourself\". I think the resolution is that, due to the way Linux exposes APIs, we don\u0027t have a way to check what the kernel already knows here - that the subsequent operations this flag implies will fail. Curious if you have any thoughts on this.",
      "range": {
        "startLine": 148,
        "startChar": 0,
        "endLine": 150,
        "endChar": 5
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1afea4b_0053040f",
        "filename": "libs/binder/RpcSession.cpp",
        "patchSetId": 7
      },
      "lineNbr": 150,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-04T01:23:12Z",
      "side": 1,
      "message": "Yeah, in this case we are repeating what is done in the kernel. It would be nice if we could query it for support (especially for setupPreconnectedClient).\n\nI think it would be nice to fail fast to aid debugging. OTOH, I feel that it is unlikely that someone is going to misconfigure the server in this way, so I\u0027d be up for dropping the checks.\n\nI\u0027d guess the main failure mode is that someone forgets to enable FDs and then tries to use them. That seems non-trivial to check upfront (maybe inspect the AIDL interfaces and fail if they can possibly use FDs).",
      "parentUuid": "6f44e4e3_2db5b073",
      "range": {
        "startLine": 148,
        "startChar": 0,
        "endLine": 150,
        "endChar": 5
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd6c0ad0_f492f3c4",
        "filename": "libs/binder/RpcSession.cpp",
        "patchSetId": 7
      },
      "lineNbr": 150,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-06T20:33:02Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c1afea4b_0053040f",
      "range": {
        "startLine": 148,
        "startChar": 0,
        "endLine": 150,
        "endChar": 5
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ffc93e9_0bacfd9a",
        "filename": "libs/binder/include/binder/Parcel.h",
        "patchSetId": 7
      },
      "lineNbr": 105,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-20T01:01:18Z",
      "side": 1,
      "message": "would this also be for debugging like in the other cases? (in either case, we should update libbinder_random_parcel)",
      "range": {
        "startLine": 105,
        "startChar": 35,
        "endLine": 105,
        "endChar": 39
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2d42fc1_22a040dc",
        "filename": "libs/binder/include/binder/Parcel.h",
        "patchSetId": 7
      },
      "lineNbr": 105,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-05-20T17:42:53Z",
      "side": 1,
      "message": "I added it for non-debugging purposes, so that RpcState could get the list of FDs to send over the wire, but since then I realized RpcState is a friend class so I could drop this and have it read the fields directly. I\u0027m leaning towards that solution. Let me know what you think.",
      "parentUuid": "6ffc93e9_0bacfd9a",
      "range": {
        "startLine": 105,
        "startChar": 35,
        "endLine": 105,
        "endChar": 39
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "309d5c44_b0827026",
        "filename": "libs/binder/include/binder/Parcel.h",
        "patchSetId": 7
      },
      "lineNbr": 105,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-20T17:55:33Z",
      "side": 1,
      "message": "+1 - minimize API exposed.",
      "parentUuid": "a2d42fc1_22a040dc",
      "range": {
        "startLine": 105,
        "startChar": 35,
        "endLine": 105,
        "endChar": 39
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e09460af_b9a986eb",
        "filename": "libs/binder/include/binder/Parcel.h",
        "patchSetId": 7
      },
      "lineNbr": 105,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-04T01:23:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "309d5c44_b0827026",
      "range": {
        "startLine": 105,
        "startChar": 35,
        "endLine": 105,
        "endChar": 39
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfcdc0c9_bfe7e491",
        "filename": "libs/binder/include/binder/RpcServer.h",
        "patchSetId": 7
      },
      "lineNbr": 122,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-20T01:01:18Z",
      "side": 1,
      "message": "Ancillery is ancillary :D (s/Ancillery//?)\n\nThough, for compat with Trusty or actual RPC FDs (like we have with authfs), could we have a choice of FD mode?",
      "range": {
        "startLine": 122,
        "startChar": 18,
        "endLine": 122,
        "endChar": 27
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d38c7fab_7640666d",
        "filename": "libs/binder/include/binder/RpcServer.h",
        "patchSetId": 7
      },
      "lineNbr": 122,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-05-20T17:42:53Z",
      "side": 1,
      "message": "What do you think of something like\n\n```\nenum FdTransportMode {\n  FD_TRANSPORT_NONE,\n  FD_TRANSPORT_UNIX,\n  FD_TRANSPORT_TRUSTY,\n  FD_TRANSPORT_TUNNEL,\n}\n\nvoid setFileDescriptorTransport(FdTransportMode mode)\n```",
      "parentUuid": "cfcdc0c9_bfe7e491",
      "range": {
        "startLine": 122,
        "startChar": 18,
        "endLine": 122,
        "endChar": 27
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee1c1b64_7148f0ee",
        "filename": "libs/binder/include/binder/RpcServer.h",
        "patchSetId": 7
      },
      "lineNbr": 122,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-20T17:55:33Z",
      "side": 1,
      "message": "Consider enum class for type checking, and of course, TRUSTY/TUNNEL only when added, but yeah, I think that is perfect",
      "parentUuid": "d38c7fab_7640666d",
      "range": {
        "startLine": 122,
        "startChar": 18,
        "endLine": 122,
        "endChar": 27
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90ae2a9d_4dec72fb",
        "filename": "libs/binder/include/binder/RpcServer.h",
        "patchSetId": 7
      },
      "lineNbr": 122,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-04T01:23:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ee1c1b64_7148f0ee",
      "range": {
        "startLine": 122,
        "startChar": 18,
        "endLine": 122,
        "endChar": 27
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d1ce51f_801ad16b",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 7
      },
      "lineNbr": 71,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-20T01:01:18Z",
      "side": 1,
      "message": "is there a way to avoid allocations? (noting specifically this vector is a different type than Parcel)",
      "range": {
        "startLine": 71,
        "startChar": 46,
        "endLine": 71,
        "endChar": 57
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdb6b95f_864290db",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 7
      },
      "lineNbr": 71,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-04T01:23:12Z",
      "side": 1,
      "message": "Merged this method into `interruptableWriteFully` so we don\u0027t need the intermediary buffer to accumulate things.\n\nThere is still an intermediary buffer in `RpcTransportRaw::interruptableWriteFully` unfortunately. The final destination is the `CMSG_DATA` buffer. There are warnings about that buffer possibly being unaligned, so you are suppose to `memcpy` an `int[]` into it instead of reinterpret casting. However, I\u0027m not storing an `int` array in `Parcel`, so I need to convert first.\n\nThere is a smallish max for the number of FDs, so I\u0027m using a fixed sized stack array (~1KiB) to avoid the heap allocation. Do we need to be careful about overflowing the stack in android system libraries?",
      "parentUuid": "7d1ce51f_801ad16b",
      "range": {
        "startLine": 71,
        "startChar": 46,
        "endLine": 71,
        "endChar": 57
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f50ca3e_5ab9030f",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 7
      },
      "lineNbr": 71,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-17T23:19:56Z",
      "side": 1,
      "message": "See the *Nasty*Nester* test cases for instance to see how deep the stack will get. We do want to avoid a caller being able to cause a stack overflow in a server. I think if you reserve even 10 FDs, it would handle this in 99% of cases without causing stack overflow. Though, since you looked at the data recently for gMaxFds, maybe you know a better small bound",
      "parentUuid": "bdb6b95f_864290db",
      "range": {
        "startLine": 71,
        "startChar": 46,
        "endLine": 71,
        "endChar": 57
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a57bc9ea_b9f245bc",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 7
      },
      "lineNbr": 71,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-21T22:50:05Z",
      "side": 1,
      "message": "Some notes:\n* The allocations for this aren\u0027t part of the nested stack, we only need it long enough to perform the send/recv syscalls.\n* When FD support is on, for every recvmsg that can possibly get FDs, we will always need to create a CMSG_DATA array big enough for the hard max number of FDs (since there is no FD count sent in advance).\n\nAlways heap allocating as needed doesn\u0027t seem viable because of the second point. We could do a mix of heap and stack, but that just reduces the stack requirements a bit, so I\u0027m not a fan unless we a specific target we are tuning for.\n\nIf stack is precious, a more complex idea is to heap allocate the buffers up front as part of the connection (or transport) and then reuse them for each syscall. Could make it lazy so that the extra memory isn\u0027t used unless they send an FD first.\n\nI propose trying the large stack allocation approach and then adjust if it causes any issues.\n\nI\u0027ve changed the NestedTransaction test to enable FDs so that the extra stack space is covered.",
      "parentUuid": "5f50ca3e_5ab9030f",
      "range": {
        "startLine": 71,
        "startChar": 46,
        "endLine": 71,
        "endChar": 57
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a49e5857_5782c5e0",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 7
      },
      "lineNbr": 73,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-20T01:01:18Z",
      "side": 1,
      "message": "pure virtual (make implementations explicit since there are few)",
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb3c3bdb_7bed96c3",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 7
      },
      "lineNbr": 73,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-17T22:31:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a49e5857_5782c5e0",
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1956b49_b402d144",
        "filename": "libs/binder/tests/binderRpcTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 656,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-20T01:01:18Z",
      "side": 1,
      "message": "WDYT if the client reads this value from the server? Or if the server reads it from each client? Or, are these options applied by both (and they must cooperate) in the current configuration?\n\nCan we add tests for when they disagree on this setting?",
      "range": {
        "startLine": 655,
        "startChar": 0,
        "endLine": 656,
        "endChar": 66
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bccd6d8c_5ca5f156",
        "filename": "libs/binder/tests/binderRpcTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 656,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-05-20T18:07:56Z",
      "side": 1,
      "message": "ATM, they both have to set it separately and there is no check to ensure they match. It only detects the mismatch once an FD is sent (I\u0027m actually missing a check, so this flag only guards sending FDs right now, but that is easy to fix).\n\nNeed to think about the other ideas more.\n\nAgreed this needs some tests.",
      "parentUuid": "a1956b49_b402d144",
      "range": {
        "startLine": 655,
        "startChar": 0,
        "endLine": 656,
        "endChar": 66
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56508d84_413f282d",
        "filename": "libs/binder/tests/binderRpcTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 656,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-23T00:54:16Z",
      "side": 1,
      "message": "Added unit tests to cover this.\n\nSome notes about how it works in the other comment thread.",
      "parentUuid": "bccd6d8c_5ca5f156",
      "range": {
        "startLine": 655,
        "startChar": 0,
        "endLine": 656,
        "endChar": 66
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1c2755e_d217baa4",
        "filename": "libs/binder/tests/binderRpcTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 789,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-20T17:55:33Z",
      "side": 1,
      "message": "btw - please do feel free to break part of these changes out and submit them independently, especially here where we want to do something regardless. It\u0027ll start getting soak time. You can use \u0027git rebase -i\u0027 to reorder CLs locally, so that a change like this is at the bottom of the stack, and TH will still be able to run on this CL w/ this change, but also independently on this change for independent submission.",
      "range": {
        "startLine": 789,
        "startChar": 0,
        "endLine": 789,
        "endChar": 66
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c5540f1_0f2e1ca5",
        "filename": "libs/binder/tests/binderRpcTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 789,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-17T22:31:29Z",
      "side": 1,
      "message": "Moved to https://r.android.com/2128761.\n\n(I originally needed this because I changed the order of the checks in appendFrom. I\u0027ve since changed the check order back for other reasons, so this isn\u0027t technically needed, just seems like an improvement)",
      "parentUuid": "d1c2755e_d217baa4",
      "range": {
        "startLine": 789,
        "startChar": 0,
        "endLine": 789,
        "endChar": 66
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49fa7246_3617cf39",
        "filename": "libs/binder/tests/binderRpcTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1371,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-20T01:01:18Z",
      "side": 1,
      "message": "btw - consider \u0027GTEST_SKIP() \u003c\u003c \"asdfasdfasdfasdf\"\u0027 here. It will show up when you run the test very visibly, so there is no risk to miss (\u0027DO NOT SUBMIT\u0027 is also hard to miss)",
      "range": {
        "startLine": 1370,
        "startChar": 8,
        "endLine": 1371,
        "endChar": 15
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e004a41e_59d0e963",
        "filename": "libs/binder/tests/binderRpcTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1371,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-17T22:31:29Z",
      "side": 1,
      "message": "I\u0027m used to there being a presubmit check that fails if it sees a \"do not submit\" string anywhere, but I guess that probably doesn\u0027t work here.\n\nFinished the TODO.",
      "parentUuid": "49fa7246_3617cf39",
      "range": {
        "startLine": 1370,
        "startChar": 8,
        "endLine": 1371,
        "endChar": 15
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17097283_7fa35668",
        "filename": "libs/binder/tests/binderRpcTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1435,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-20T01:01:18Z",
      "side": 1,
      "message": "nit: std::string(253, \u0027a\u0027) ?",
      "range": {
        "startLine": 1433,
        "startChar": 2,
        "endLine": 1435,
        "endChar": 5
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a11badff_f2fea956",
        "filename": "libs/binder/tests/binderRpcTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1435,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-17T22:31:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "17097283_7fa35668",
      "range": {
        "startLine": 1433,
        "startChar": 2,
        "endLine": 1435,
        "endChar": 5
      },
      "revId": "e6052bf06ccf075458e7bc4ba1a5666819a4ae73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}