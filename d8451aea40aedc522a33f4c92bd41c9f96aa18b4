{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f28e0e32_3e4ab310",
        "filename": "libs/binder/include/binder/BpBinder.h",
        "patchSetId": 4
      },
      "lineNbr": 97,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T23:41:53Z",
      "side": 1,
      "message": "Also for many of these, unique_fd could be forward-declared. Could we avoid exporting this as API? or no?",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 97,
        "endChar": 70
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d8b31b8_e21c67a6",
        "filename": "libs/binder/include/binder/BpBinder.h",
        "patchSetId": 4
      },
      "lineNbr": 97,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-14T18:39:19Z",
      "side": 1,
      "message": "I don\u0027t think we can avoid exporting binder\u0027s flavor of unique_fd. If we don\u0027t, none of unique_fd dependant APIs would be possible to implement on Linux.\n\nAlso, I can forward-declare it for Linux, but it will break regular android build:\nhttps://paste.googleplex.com/6554609485611008?raw",
      "parentUuid": "f28e0e32_3e4ab310",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 97,
        "endChar": 70
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75b08acb_8e408efe",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T23:39:07Z",
      "side": 1,
      "message": "we do need to include the Android version, but we should use \u0027#ifdef __ANDROID__\u0027 here or similar, instead of __has_include, so that people that have binder headers without libbase headers don\u0027t accidentally include it",
      "range": {
        "startLine": 19,
        "startChar": 4,
        "endLine": 19,
        "endChar": 17
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b444c83_3b8f8b9d",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-13T22:52:24Z",
      "side": 1,
      "message": "Moved to line #45",
      "parentUuid": "75b08acb_8e408efe",
      "range": {
        "startLine": 19,
        "startChar": 4,
        "endLine": 19,
        "endChar": 17
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d884246b_acd27798",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T23:39:07Z",
      "side": 1,
      "message": "we should change the namespace so we are sure these types can\u0027t be confused",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 45,
        "endChar": 16
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86dac431_f4739e72",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-06T16:51:35Z",
      "side": 1,
      "message": "Then change the namespace or `#ifdef ANDROID` + include original one. Is there any point in doing both?",
      "parentUuid": "d884246b_acd27798",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 45,
        "endChar": 16
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f6008e6_e6b7c214",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-07T01:34:07Z",
      "side": 1,
      "message": "If the namespace is changed but `#ifdef ANDROID` is not used, then Android code may use the libbinder unique_fd instead of the one we maintain, and so we\u0027d also need to maintain fdsan support in unique_fd or otherwise experience a degraded fdsan experience in Android.\n\nIf we leave the namesapce the same but use `#ifdef ANDROID`, something other code may include android-base/unique_fd.h unconditionally and still confuse the types.",
      "parentUuid": "86dac431_f4739e72",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 45,
        "endChar": 16
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d496e2c_216a8d41",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-13T22:52:24Z",
      "side": 1,
      "message": "Moving your comments from other threads:\n\u003e We cannot do this change as is. For instance, if someone has access to libbinder headers but not libbase headers, they would get binder/unique_fd.h, has_include would be false, and if they pass unique_fd into another translation unit, they\u0027d effectively be reinterpret casting between the libbase and libbinder unique_fd implementations, causing UB if any of the methods/etc.. here change.\n\nAnother:\n\u003e we do need to include the Android version, but we should use \u0027#ifdef ANDROID\u0027 here or similar, instead of __has_include, so that people that have binder headers without libbase headers don\u0027t accidentally include it\n\nCurrent status: I started working on this comment in aosp/2828634, but it\u0027s not as easy as I thought. Will continue investigation.",
      "parentUuid": "1f6008e6_e6b7c214",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 45,
        "endChar": 16
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "776143e3_f1bdf2ba",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-14T06:54:27Z",
      "side": 1,
      "message": "You could also do this, which would avoid having to update the type name everywhre, but it would still make sure the types have different names in symbol tables, so if they are confused, you\u0027d at least get linker errors:\n\n```\nnamespace android::binder { class unique_fd {... }; }\n\n#ifdef __ANDROID__\n#include \u003cbase/unique_fd.h\u003e\n#else\nnamespace android::base { using unique_fd \u003d binder::unique_fd; }\n#endif\n```",
      "parentUuid": "3d496e2c_216a8d41",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 45,
        "endChar": 16
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "054141eb_ee330bac",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-14T18:19:24Z",
      "side": 1,
      "message": "That\u0027s what I did in this change: https://android-review.git.corp.google.com/c/platform/frameworks/native/+/2828634/3/libs/binder/include/binder/unique_fd.h#223\n\nAnd yes, I\u0027m hitting some linker errors now that I need to dive deep into.\n\nBut here\u0027s another question: do you want this to run this way on in-tree host (that\u0027s also not `__ANDROID__`)?",
      "parentUuid": "776143e3_f1bdf2ba",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 45,
        "endChar": 16
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fec672f3_8c220734",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-14T18:47:55Z",
      "side": 1,
      "message": "Problem: we also need to change client code to refer to android::binder::unique_fd:\nhttps://paste.googleplex.com/6203998219010048?raw",
      "parentUuid": "054141eb_ee330bac",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 45,
        "endChar": 16
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2746a749_4f14a228",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-14T19:08:47Z",
      "side": 1,
      "message": "I\u0027m trying and hitting problems - I don\u0027t think we can do\n```\nnamespace android::base { using unique_fd \u003d binder::unique_fd; }\n```\n\\- if any client code includes anything from both libbase and binder, it will have two conflicting definitions of android::base::unique_fd.\n\nWhat we can do is to change all of Binder unique_fd references to android::binder::unique_fd and do\n```\nnamespace android::binder::impl { class unique_fd {... }; }\n\n#ifdef __ANDROID__\n#include \u003cbase/unique_fd.h\u003e\nnamespace android::binder { using unique_fd \u003d base::unique_fd; }\n#else\nnamespace android::binder { using unique_fd \u003d impl::unique_fd; }\n#endif\n```\n\nWDYT?",
      "parentUuid": "fec672f3_8c220734",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 45,
        "endChar": 16
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de65c55a_8a747d9c",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-15T05:09:07Z",
      "side": 1,
      "message": "\u003e if any client code includes anything from both libbase and binder, it will have two conflicting definitions of android::base::unique_fd.\n\nright - we would want it to show an issue, so that we could know to include libbase in those locations. Since both things should be built with __ANDROID__ though, this case shouldn\u0027t come up.\n\nI\u0027m also okay with your suggestion, I just suspect it will require a lot more changes in libbinder, because you\u0027ll have to update all references to base::unique_fd to refer to binder::unique_fd",
      "parentUuid": "2746a749_4f14a228",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 45,
        "endChar": 16
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9693bc8d_f3e27fb2",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-15T05:09:35Z",
      "side": 1,
      "message": "also is it possible to avoid exporting this header?",
      "parentUuid": "de65c55a_8a747d9c",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 45,
        "endChar": 16
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63d5870c_c7bb73bf",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-15T05:54:29Z",
      "side": 1,
      "message": "I don\u0027t fully understand your first paragraph. Anyway, there\u0027s 181 hits against `base::unique_fd`. Not small, but I\u0027ve seen worse.\n\nFor not exporting this header - please see my response to your comment on BpBinder.h.",
      "parentUuid": "9693bc8d_f3e27fb2",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 45,
        "endChar": 16
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfe83371_04d9334c",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-15T05:56:36Z",
      "side": 1,
      "message": "sg\n\n\u003e if any client code includes anything from both libbase and binder, it will have two conflicting definitions of android::base::unique_fd.\n\nThis shouldn\u0027t happen because `__ANDROID__ `(or maybe `__ANDROID__` + Android host things) should always use libbase.",
      "parentUuid": "63d5870c_c7bb73bf",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 45,
        "endChar": 16
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0763ad61_a21e0c46",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-15T06:01:16Z",
      "side": 1,
      "message": "Host is precisely a problem here. If any host library/binary (`!defined(__ANDROID__)`) uses both binder and libbase (not uncommon), it will blow up.",
      "parentUuid": "cfe83371_04d9334c",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 45,
        "endChar": 16
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1349762_a53602d3",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T23:39:07Z",
      "side": 1,
      "message": "also, this should not be duplicated",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 51
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "652103a9_263dda64",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-14T01:03:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f1349762_a53602d3",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 51
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46350c35_40c04761",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 98,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T23:39:07Z",
      "side": 1,
      "message": "we could drop APIs if libbinder is not using them as well?",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 98,
        "endChar": 81
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "064fb693_476c6ac1",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 98,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-14T01:03:31Z",
      "side": 1,
      "message": "Dropped some. To drop all of them I need to migrate current Binder code that compares against -1 and 0 to `ok()` method. Added TODO for that.",
      "parentUuid": "46350c35_40c04761",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 98,
        "endChar": 81
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0768ea97_029a3fd6",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T23:39:07Z",
      "side": 1,
      "message": "this is only needed because of L90 operator so I think we can delete it as well",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 101,
        "endChar": 34
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2cab271_e4555e36",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-14T01:03:31Z",
      "side": 1,
      "message": "I\u0027m fine to delete this line, but are you sure we don\u0027t want it just to be a little safer?",
      "parentUuid": "0768ea97_029a3fd6",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 101,
        "endChar": 34
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f976ac6_fda05fda",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-14T06:55:14Z",
      "side": 1,
      "message": "Try to use \u0027!myUniqueFd\u0027 after the implicit conversion to \u0027int\u0027 is removed. I believe you\u0027ll see that there is no implementation for it, so it\u0027ll be a compile error anyway.",
      "parentUuid": "c2cab271_e4555e36",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 101,
        "endChar": 34
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18bb6d1a_2bc8bb15",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-14T18:19:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8f976ac6_fda05fda",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 101,
        "endChar": 34
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d1f5f98_371c97bb",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T23:39:07Z",
      "side": 1,
      "message": "there is also a lot of other code that can be deleted",
      "range": {
        "startLine": 106,
        "startChar": 0,
        "endLine": 106,
        "endChar": 28
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2df8ea2_04a8146f",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-14T01:03:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5d1f5f98_371c97bb",
      "range": {
        "startLine": 106,
        "startChar": 0,
        "endLine": 106,
        "endChar": 28
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b5fc733_7250378e",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 153,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T23:39:07Z",
      "side": 1,
      "message": "delete",
      "range": {
        "startLine": 130,
        "startChar": 7,
        "endLine": 153,
        "endChar": 0
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8c52bb1_292bdab3",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 153,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-14T01:03:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b5fc733_7250378e",
      "range": {
        "startLine": 130,
        "startChar": 7,
        "endLine": 153,
        "endChar": 0
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a58806b6_ff76346a",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 177,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T23:39:07Z",
      "side": 1,
      "message": "this would be dead code",
      "range": {
        "startLine": 160,
        "startChar": 10,
        "endLine": 177,
        "endChar": 3
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9e4720e_0a4f0947",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 177,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-14T01:03:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a58806b6_ff76346a",
      "range": {
        "startLine": 160,
        "startChar": 10,
        "endLine": 177,
        "endChar": 3
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e450de91_51d232e5",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 189,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T23:39:07Z",
      "side": 1,
      "message": "we can also remove the abstraction layer",
      "range": {
        "startLine": 189,
        "startChar": 6,
        "endLine": 189,
        "endChar": 15
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05dc8b40_c396d740",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 189,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-14T01:03:31Z",
      "side": 1,
      "message": "You mean the `Closer` template as well?",
      "parentUuid": "e450de91_51d232e5",
      "range": {
        "startLine": 189,
        "startChar": 6,
        "endLine": 189,
        "endChar": 15
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9677b39a_c12f3b53",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 189,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-14T06:54:27Z",
      "side": 1,
      "message": "yes",
      "parentUuid": "05dc8b40_c396d740",
      "range": {
        "startLine": 189,
        "startChar": 6,
        "endLine": 189,
        "endChar": 15
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f28d6460_0385e61b",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 189,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-14T18:19:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9677b39a_c12f3b53",
      "range": {
        "startLine": 189,
        "startChar": 6,
        "endLine": 189,
        "endChar": 15
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbbc9a68_5ab92d65",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 197,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T23:39:07Z",
      "side": 1,
      "message": "we can drop this for libbinder for now as well - we could call pipe2 directly.",
      "range": {
        "startLine": 197,
        "startChar": 0,
        "endLine": 197,
        "endChar": 68
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43e610d2_cf065609",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 197,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-14T01:03:31Z",
      "side": 1,
      "message": "Pipe and Socketpair seem to be useful wrappers - why not to keep them?",
      "parentUuid": "bbbc9a68_5ab92d65",
      "range": {
        "startLine": 197,
        "startChar": 0,
        "endLine": 197,
        "endChar": 68
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b66a6630_c29e30ae",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 197,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-15T05:09:07Z",
      "side": 1,
      "message": "I\u0027d agree if we use `__APPLE__`, but otherwise they are a passthrough abstraction layer?\n\nThe \u0027#else\u0027 clause is wrong now? O_CLOEXEC/O_NONBLOCK may or may not be supported on other OSes - it depends.",
      "parentUuid": "43e610d2_cf065609",
      "range": {
        "startLine": 197,
        "startChar": 0,
        "endLine": 197,
        "endChar": 68
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20906f0b_0bfee994",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 197,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-15T05:54:29Z",
      "side": 1,
      "message": "Not just abstraction layer - if I use pipe2 directly, I\u0027ll loose all of RAII coupling between pipe2 and unique_fd - I\u0027ll need to manually move these fds (see lines 139-140).\n\nFor #else, I can switch it around (start with `ifdef __APPLE__`). Since this is supposed to run on host, it needs to work on apple too.",
      "parentUuid": "b66a6630_c29e30ae",
      "range": {
        "startLine": 197,
        "startChar": 0,
        "endLine": 197,
        "endChar": 68
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2888ffa3_582da984",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 267,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T23:39:07Z",
      "side": 1,
      "message": "some of these don\u0027t appear used in libbinder?",
      "range": {
        "startLine": 260,
        "startChar": 1,
        "endLine": 267,
        "endChar": 1
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af99606f_f0d232f7",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 267,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-14T01:03:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2888ffa3_582da984",
      "range": {
        "startLine": 260,
        "startChar": 1,
        "endLine": 267,
        "endChar": 1
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a7d5928_2a457fae",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 328,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T23:39:07Z",
      "side": 1,
      "message": "these can also be removed, since we\u0027ll remove \u0027operator int\u0027",
      "range": {
        "startLine": 315,
        "startChar": 0,
        "endLine": 328,
        "endChar": 0
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "445b770a_64a1039c",
        "filename": "libs/binder/include/binder/unique_fd.h",
        "patchSetId": 4
      },
      "lineNbr": 328,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-14T01:03:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a7d5928_2a457fae",
      "range": {
        "startLine": 315,
        "startChar": 0,
        "endLine": 328,
        "endChar": 0
      },
      "revId": "d8451aea40aedc522a33f4c92bd41c9f96aa18b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}