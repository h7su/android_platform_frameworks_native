{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0d264c79_07bb72de",
        "filename": "libs/binder/libbinder_rpc_unstable.cpp",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2021-09-02T12:26:42Z",
      "side": 1,
      "message": "Are there any cases where this is actually useful?",
      "revId": "35a83bb7a4204c13cd6369eea7b1f724b9ae1f82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e73b9064_51399c33",
        "filename": "libs/binder/libbinder_rpc_unstable.cpp",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2021-09-02T09:37:31Z",
      "side": 1,
      "message": "It looks like this takes responsibility for closing the fd. Should we document that?\nIt may make it slightly harder to call from Rust.",
      "range": {
        "startLine": 58,
        "startChar": 10,
        "endLine": 58,
        "endChar": 31
      },
      "revId": "35a83bb7a4204c13cd6369eea7b1f724b9ae1f82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d5fce8a_4e551ac5",
        "filename": "libs/binder/libbinder_rpc_unstable.cpp",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1291338
      },
      "writtenOn": "2021-09-02T10:06:47Z",
      "side": 1,
      "message": "How can we handle the Rust case? IntoRawFd?",
      "parentUuid": "e73b9064_51399c33",
      "range": {
        "startLine": 58,
        "startChar": 10,
        "endLine": 58,
        "endChar": 31
      },
      "revId": "35a83bb7a4204c13cd6369eea7b1f724b9ae1f82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae21b0db_5ee6af34",
        "filename": "libs/binder/libbinder_rpc_unstable.cpp",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2021-09-02T10:50:06Z",
      "side": 1,
      "message": "Yes. (I was struggling to find that until Andrew pointed it out to me.)\n\nWould still be good to document the ownership though.",
      "parentUuid": "4d5fce8a_4e551ac5",
      "range": {
        "startLine": 58,
        "startChar": 10,
        "endLine": 58,
        "endChar": 31
      },
      "revId": "35a83bb7a4204c13cd6369eea7b1f724b9ae1f82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fceec5e3_2e3ed734",
        "filename": "libs/binder/libbinder_rpc_unstable.cpp",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2021-09-02T12:26:42Z",
      "side": 1,
      "message": "Will this cause problems? It might be better to keep a reference to the IVirtualMachine so that you can call connectVsock as needed.",
      "revId": "35a83bb7a4204c13cd6369eea7b1f724b9ae1f82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b215fdf_dfa63e71",
        "filename": "libs/binder/libbinder_rpc_unstable.cpp",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1291338
      },
      "writtenOn": "2021-09-02T12:42:19Z",
      "side": 1,
      "message": "So the function signature would be either\n\n    AIBinder*(IVirtualMachine* vm, int port)\n    \nor\n\n    AIBinder*(function\u003cunique_fd()\u003e requestFunc)\n    \n, right? Is it the idea?",
      "parentUuid": "fceec5e3_2e3ed734",
      "revId": "35a83bb7a4204c13cd6369eea7b1f724b9ae1f82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}