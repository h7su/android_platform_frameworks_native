{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "711d2860_b8aca56a",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 7
      },
      "lineNbr": 52,
      "author": {
        "id": 1956970
      },
      "writtenOn": "2022-08-12T00:27:04Z",
      "side": 1,
      "message": "bool mRecordingOn and unique_fd mRecordingFd change the size of BBinder, but they are not always a set size. What\u0027s the best way to save that data in a size safe way?",
      "range": {
        "startLine": 52,
        "startChar": 40,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "b08451966cdf272fcd722f431ae96e00f1bcce98",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73c71004_90ba2679",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 7
      },
      "lineNbr": 52,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-12T00:37:18Z",
      "side": 1,
      "message": "Hopefully someone else has a better, but here is one:\n\nDelete `mRecordingOn`. If `mRecordingFd \u003d\u003d -1`, then recording off. Otherwise it is on.\n\nThen, you just need 4 bytes. On 64 bit builds there is 4 bytes of reserved space (`int32_t mReserved1`). If only supporting recording 64 bit is OK, then we could use that.",
      "parentUuid": "711d2860_b8aca56a",
      "range": {
        "startLine": 52,
        "startChar": 40,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "b08451966cdf272fcd722f431ae96e00f1bcce98",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbca1ae2_1b045522",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 7
      },
      "lineNbr": 52,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-15T18:01:43Z",
      "side": 1,
      "message": "See BBinder::Extras. Work to get rid of these asserts, then you can run presubmit here.",
      "parentUuid": "73c71004_90ba2679",
      "range": {
        "startLine": 52,
        "startChar": 40,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "b08451966cdf272fcd722f431ae96e00f1bcce98",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acaa8db9_e856e2bd",
        "filename": "libs/binder/BinderRecordReplay.cpp",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-12T01:06:43Z",
      "side": 1,
      "message": "maybe just log a message and return void",
      "revId": "b08451966cdf272fcd722f431ae96e00f1bcce98",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "531c21b9_b807805d",
        "filename": "libs/binder/BinderRecordReplay.cpp",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1956970
      },
      "writtenOn": "2022-08-12T18:20:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "acaa8db9_e856e2bd",
      "revId": "b08451966cdf272fcd722f431ae96e00f1bcce98",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dee2c3b9_5558546d",
        "filename": "libs/binder/BinderRecordReplay.cpp",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-15T21:49:32Z",
      "side": 1,
      "message": "i wouldn\u0027t return `DEAD_OBJECT`. if the caller checked the status and propagated that up, then it would kill the current binder (because it thinks it is dead). since the current code doesn\u0027t check the return status of this function, i\u0027d suggest changing the return type of `recordTransaction` to `void`\n\nalternatively, could return a `bool` and then the caller can stop attempting to record on the first failure it sees",
      "parentUuid": "531c21b9_b807805d",
      "revId": "b08451966cdf272fcd722f431ae96e00f1bcce98",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d849ea4_f4ec782a",
        "filename": "libs/binder/BinderRecordReplay.cpp",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-12T01:06:43Z",
      "side": 1,
      "message": "this is probably suppose to be `(8 - header.dataSize % 8) % 8` (or `-header.dataSize % 8`)\n\ni\u0027m curious if we really need 8 bytes alignment, but not a blocker for the initial commit",
      "range": {
        "startLine": 32,
        "startChar": 46,
        "endLine": 32,
        "endChar": 65
      },
      "revId": "b08451966cdf272fcd722f431ae96e00f1bcce98",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3f2bcf2_b16b936d",
        "filename": "libs/binder/BinderRecordReplay.cpp",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1956970
      },
      "writtenOn": "2022-08-12T18:20:42Z",
      "side": 1,
      "message": "Fixed the mod error.\nRegarding alignment, I\u0027ll wait until replaying is implemented for all interfaces to test 8 vs 4 byte alignment.",
      "parentUuid": "0d849ea4_f4ec782a",
      "range": {
        "startLine": 32,
        "startChar": 46,
        "endLine": 32,
        "endChar": 65
      },
      "revId": "b08451966cdf272fcd722f431ae96e00f1bcce98",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56a6bfd6_7403fd07",
        "filename": "libs/binder/BinderRecordReplay.cpp",
        "patchSetId": 7
      },
      "lineNbr": 34,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-12T01:06:43Z",
      "side": 1,
      "message": "document the padding property in the header. maybe something like\n\n```\n// The recording format is a sequence of entries, where each entries looks like\n//\n//   transactionHeader  (32 bytes)\n//   parcel data        (transactionHeader.dataSize bytes)\n//   padding            (enough bytes to align the next header to 8 bytes)\n//   [repeats]\n```",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 5
      },
      "revId": "b08451966cdf272fcd722f431ae96e00f1bcce98",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3350c8a8_5445e200",
        "filename": "libs/binder/BinderRecordReplay.cpp",
        "patchSetId": 7
      },
      "lineNbr": 34,
      "author": {
        "id": 1956970
      },
      "writtenOn": "2022-08-12T18:20:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "56a6bfd6_7403fd07",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 5
      },
      "revId": "b08451966cdf272fcd722f431ae96e00f1bcce98",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdf9b37d_35331eac",
        "filename": "libs/binder/include/binder/BinderRecordReplay.h",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-12T01:06:43Z",
      "side": 1,
      "message": "this is the request parcel. should we record the reply parcel as well?",
      "range": {
        "startLine": 24,
        "startChar": 50,
        "endLine": 24,
        "endChar": 68
      },
      "revId": "b08451966cdf272fcd722f431ae96e00f1bcce98",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2949b46d_d78b92d2",
        "filename": "libs/binder/include/binder/BinderRecordReplay.h",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1956970
      },
      "writtenOn": "2022-08-12T18:20:42Z",
      "side": 1,
      "message": "For non-deterministic transactions, the reply parcel will often be different even if the transaction is behaving properly. That could cause replays to fail even though everything is good, so I figured status_t err is the correct metric to compare on replays.",
      "parentUuid": "cdf9b37d_35331eac",
      "range": {
        "startLine": 24,
        "startChar": 50,
        "endLine": 24,
        "endChar": 68
      },
      "revId": "b08451966cdf272fcd722f431ae96e00f1bcce98",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67c7a466_f1a0027f",
        "filename": "libs/binder/include/binder/BinderRecordReplay.h",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-15T18:01:43Z",
      "side": 1,
      "message": "There is no such thing as \u0027correct\u0027, or \u0027incorrect\u0027 outside of a specific value system.\n\nHere are some things where we might need \u0027reply\u0027:\n- determining if a transaction is deterministic\n- simulating a binder with its recorded transactions\n\nWe should build a generic tool here.",
      "parentUuid": "2949b46d_d78b92d2",
      "range": {
        "startLine": 24,
        "startChar": 50,
        "endLine": 24,
        "endChar": 68
      },
      "revId": "b08451966cdf272fcd722f431ae96e00f1bcce98",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}