{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c27aa801_9fb83604",
        "filename": "libs/binder/RpcConnection.cpp",
        "patchSetId": 4
      },
      "lineNbr": 289,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-27T16:47:46Z",
      "side": 1,
      "message": "can you move this logic inside SocketAddress?",
      "range": {
        "startLine": 289,
        "startChar": 38,
        "endLine": 289,
        "endChar": 45
      },
      "revId": "75036f05cc78ea6931466e9ac3f05e113984cca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04e48606_4ccaa6da",
        "filename": "libs/binder/RpcConnection.cpp",
        "patchSetId": 4
      },
      "lineNbr": 289,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-28T00:58:35Z",
      "side": 1,
      "message": "See if it looks better now. I use sockaddr_storage instead.",
      "parentUuid": "c27aa801_9fb83604",
      "range": {
        "startLine": 289,
        "startChar": 38,
        "endLine": 289,
        "endChar": 45
      },
      "revId": "75036f05cc78ea6931466e9ac3f05e113984cca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "798a5864_58262e52",
        "filename": "libs/binder/RpcConnection.cpp",
        "patchSetId": 4
      },
      "lineNbr": 291,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-27T16:47:46Z",
      "side": 1,
      "message": "nit: extra variable?",
      "range": {
        "startLine": 291,
        "startChar": 0,
        "endLine": 291,
        "endChar": 69
      },
      "revId": "75036f05cc78ea6931466e9ac3f05e113984cca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ffc65eba_1cda4a87",
        "filename": "libs/binder/RpcConnection.cpp",
        "patchSetId": 4
      },
      "lineNbr": 291,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-27T21:21:15Z",
      "side": 1,
      "message": "To avoid L293 being too long",
      "parentUuid": "798a5864_58262e52",
      "range": {
        "startLine": 291,
        "startChar": 0,
        "endLine": 291,
        "endChar": 69
      },
      "revId": "75036f05cc78ea6931466e9ac3f05e113984cca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cc5071c_45285997",
        "filename": "libs/binder/RpcConnection.cpp",
        "patchSetId": 4
      },
      "lineNbr": 293,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-27T16:47:46Z",
      "side": 1,
      "message": "err, or this should work on all the socket types, right? I think we should be able to also fill in the port inside of SocketAddress if we use VMADDR_PORT_ANY, for instance. If SocketAddress is non-const, and you use the addr there as the out address, shouldn\u0027t we always get more info?",
      "range": {
        "startLine": 293,
        "startChar": 21,
        "endLine": 293,
        "endChar": 32
      },
      "revId": "75036f05cc78ea6931466e9ac3f05e113984cca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84ba85f8_643fbc08",
        "filename": "libs/binder/RpcConnection.cpp",
        "patchSetId": 4
      },
      "lineNbr": 293,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-27T21:21:15Z",
      "side": 1,
      "message": "It does but I\u0027ll need a branch for every family we use (in, in6, vsock and unix domain socket. Each have a different sockaddr_* type",
      "parentUuid": "0cc5071c_45285997",
      "range": {
        "startLine": 293,
        "startChar": 21,
        "endLine": 293,
        "endChar": 32
      },
      "revId": "75036f05cc78ea6931466e9ac3f05e113984cca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d36e08a_54345836",
        "filename": "libs/binder/RpcConnection.cpp",
        "patchSetId": 4
      },
      "lineNbr": 293,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-27T21:50:06Z",
      "side": 1,
      "message": "Yeah, but SocketAddress should already have the right socket type internally, right? We could reuse that, or have these classes create another? This seems like useful information in general.",
      "parentUuid": "84ba85f8_643fbc08",
      "range": {
        "startLine": 293,
        "startChar": 21,
        "endLine": 293,
        "endChar": 32
      },
      "revId": "75036f05cc78ea6931466e9ac3f05e113984cca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69c3aae6_23d97bc3",
        "filename": "libs/binder/RpcConnection.cpp",
        "patchSetId": 4
      },
      "lineNbr": 293,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-28T00:58:35Z",
      "side": 1,
      "message": "Not InetSocketAddress, which is a borrowed sockaddr* from getaddrinfo().\n\nSee if it looks better now. I made it generic so that when we want to use VMADDR_PORT_ANY for vsock, just specify a non-null outSockAddr / outSockLen to call getsockname for vsock as well.",
      "parentUuid": "9d36e08a_54345836",
      "range": {
        "startLine": 293,
        "startChar": 21,
        "endLine": 293,
        "endChar": 32
      },
      "revId": "75036f05cc78ea6931466e9ac3f05e113984cca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12bf2f66_8686ef94",
        "filename": "libs/binder/RpcConnection.cpp",
        "patchSetId": 4
      },
      "lineNbr": 303,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-27T16:47:46Z",
      "side": 1,
      "message": "if you avoid the family check or remove the address logic, maybe this branch will go away, but otherwise, should this be a hard error since we only call this function w/o nullptr when sa_family is AF_INET?",
      "range": {
        "startLine": 303,
        "startChar": 0,
        "endLine": 303,
        "endChar": 78
      },
      "revId": "75036f05cc78ea6931466e9ac3f05e113984cca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "898814f9_407c7986",
        "filename": "libs/binder/RpcConnection.cpp",
        "patchSetId": 4
      },
      "lineNbr": 303,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-27T21:21:15Z",
      "side": 1,
      "message": "if it is a different family, I can\u0027t use sockaddr_in; I need to use sockaddr_something else.",
      "parentUuid": "12bf2f66_8686ef94",
      "range": {
        "startLine": 303,
        "startChar": 0,
        "endLine": 303,
        "endChar": 78
      },
      "revId": "75036f05cc78ea6931466e9ac3f05e113984cca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a06d787_0081f547",
        "filename": "libs/binder/RpcConnection.cpp",
        "patchSetId": 4
      },
      "lineNbr": 303,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-27T22:45:42Z",
      "side": 1,
      "message": "The right type should already be created inside of SocketAddress, right?",
      "parentUuid": "898814f9_407c7986",
      "range": {
        "startLine": 303,
        "startChar": 0,
        "endLine": 303,
        "endChar": 78
      },
      "revId": "75036f05cc78ea6931466e9ac3f05e113984cca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f02a44a_d206bf9b",
        "filename": "libs/binder/RpcConnection.cpp",
        "patchSetId": 4
      },
      "lineNbr": 303,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-28T00:58:35Z",
      "side": 1,
      "message": "See previous comment",
      "parentUuid": "1a06d787_0081f547",
      "range": {
        "startLine": 303,
        "startChar": 0,
        "endLine": 303,
        "endChar": 78
      },
      "revId": "75036f05cc78ea6931466e9ac3f05e113984cca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99ac243d_efaf6e6f",
        "filename": "libs/binder/include/binder/RpcConnection.h",
        "patchSetId": 4
      },
      "lineNbr": 145,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-27T16:47:46Z",
      "side": 1,
      "message": "can we avoid defaults?",
      "range": {
        "startLine": 145,
        "startChar": 83,
        "endLine": 145,
        "endChar": 93
      },
      "revId": "75036f05cc78ea6931466e9ac3f05e113984cca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e306d74_1f766384",
        "filename": "libs/binder/include/binder/RpcConnection.h",
        "patchSetId": 4
      },
      "lineNbr": 145,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-28T00:58:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99ac243d_efaf6e6f",
      "range": {
        "startLine": 145,
        "startChar": 83,
        "endLine": 145,
        "endChar": 93
      },
      "revId": "75036f05cc78ea6931466e9ac3f05e113984cca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}