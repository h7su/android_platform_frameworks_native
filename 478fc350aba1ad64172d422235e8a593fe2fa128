{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f9e9e77f_9b5960cb",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 6
      },
      "lineNbr": 1222,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2022-07-07T19:23:29Z",
      "side": 1,
      "message": "I\u0027m confused on the value of this API. It looks to just do a readInt and then verify that elementSize * count is \u003c 1MB. But the 1MB is kinda arbitrary (and questionable - who said this Parcel came over Binder in the first place?)\n\nBut also it looks like something a simple helper could just as easily do, not something AParcel needs to provide?\n\nAlso since there\u0027s an extra readInt here, is there a missing write-equivalent of this?",
      "revId": "478fc350aba1ad64172d422235e8a593fe2fa128",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d686914e_f499ee68",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 6
      },
      "lineNbr": 1222,
      "author": {
        "id": 1944405
      },
      "writtenOn": "2022-07-07T21:08:06Z",
      "side": 1,
      "message": "The 1MB is related to the buffer size as mentioned by Steven\u0027s comment on line #1222, and it\u0027s matching the write from the writeVector call (linked below). \n\nThe Parcel could indeed not come from Binder, but we\u0027d still want to avoid allocating a very large chunk of RAM and have a chance of running OOM leading to crashes. If there\u0027s a case where this is needed in a non-binder context, we could approach that problem once it presents itself. The concern right now would be to have matching API calls and safe behavior for binder usage.\n\nAs for the \"write-equivalent\", it\u0027s in writeVector. \nhttps://cs.android.com/android/platform/superproject/+/master:frameworks/native/libs/binder/ndk/include_cpp/android/binder_parcel_utils.h;l\u003d1016?q\u003dbinder_parcel_utils.h\u0026ss\u003dandroid%2Fplatform%2Fsuperproject",
      "parentUuid": "f9e9e77f_9b5960cb",
      "revId": "478fc350aba1ad64172d422235e8a593fe2fa128",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "241f8911_6628e003",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 6
      },
      "lineNbr": 1222,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2022-07-07T21:15:32Z",
      "side": 1,
      "message": "\u003e As for the \"write-equivalent\", it\u0027s in writeVector\n\nwriteVector does writeInt32(data_lenght) followed by writing the data.\n\nThis looks like it\u0027ll be a readInt32 of the datalenght for this validation followed by... what? If you do a readVector you\u0027ll end up with 2x readInt32\u0027s, which doesn\u0027t match the write side. What\u0027s the next step to actually getting the data?\n\n\u003e The Parcel could indeed not come from Binder, but we\u0027d still want to avoid allocating a very large chunk of RAM and have a chance of running OOM leading to crashes.\n\nBut that allocation already happened, it\u0027s already in the Parcel? If I already have a Parcel with a, say, 2MB array in it, then the blocker won\u0027t be on reading that vector. I\u0027m not quite getting what this solves? It\u0027s already in my process, I\u0027m already paying for it, what\u0027s the value in just not letting me access it?\n\nA *write* version of this to avoid creating an overly large Parcel sounds like it could have value, but the *read* side doesn\u0027t seem like it helps?\n\n\u003e If there\u0027s a case where this is needed in a non-binder context, we could approach that problem once it presents itself.\n\nThat doesn\u0027t really work for stable APIs as applications need to run on existing versions of this code. If this is instead a helper that the AIDL generator spits out or whatever *then* you can easily do the evolution you\u0027re talking about. But once this goes into a stable API surface, changing its behavior down the road becomes a lot more challenging.",
      "parentUuid": "d686914e_f499ee68",
      "revId": "478fc350aba1ad64172d422235e8a593fe2fa128",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b167d4d8_518b4e45",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 6
      },
      "lineNbr": 1222,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-07-07T21:46:15Z",
      "side": 1,
      "message": "\u003e It\u0027s already in my process, I\u0027m already paying for it, what\u0027s the value in just not letting me access it?\n\nThe parcel might not actually be that big. I think we want to guard against malicious parcels and/or bugs where a vector is suppose to be at this position, but something else is present, resulting in an incorrect vector size that is large enough to kill the receiving process.\n\nNot related to the API design, but instead of checking against 10MB, maybe we could check against the remaining parcel size as a more flexible sanity check.",
      "parentUuid": "241f8911_6628e003",
      "revId": "478fc350aba1ad64172d422235e8a593fe2fa128",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}