{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3c29ec2a_c96edcad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-06-02T23:57:35Z",
      "side": 1,
      "message": "+ Elie and Frederick because they might be interested to see these numbers too",
      "revId": "5317271ddbfd5751a9a460fddcc3e01f0fa830e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36050ae5_84ae8bcd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-03T21:18:11Z",
      "side": 1,
      "message": "Cool!",
      "parentUuid": "3c29ec2a_c96edcad",
      "revId": "5317271ddbfd5751a9a460fddcc3e01f0fa830e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d688b7a_c46c5401",
        "filename": "libs/binder/tests/binderAllocationLimits.cpp",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-02T23:27:58Z",
      "side": 1,
      "message": "does the server make any allocations internally? I would think this would be racey, or are malloc counts per thread?",
      "range": {
        "startLine": 211,
        "startChar": 37,
        "endLine": 211,
        "endChar": 41
      },
      "revId": "5317271ddbfd5751a9a460fddcc3e01f0fa830e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe93829e_52b638de",
        "filename": "libs/binder/tests/binderAllocationLimits.cpp",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-06-02T23:57:35Z",
      "side": 1,
      "message": "Yes, I think this is racey because of that. The EXPECTs after the next make() can be off by one malloc. I\u0027ll be removing all these extra CHECKs outside of the pingBinder.",
      "parentUuid": "8d688b7a_c46c5401",
      "range": {
        "startLine": 211,
        "startChar": 37,
        "endLine": 211,
        "endChar": 41
      },
      "revId": "5317271ddbfd5751a9a460fddcc3e01f0fa830e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fab17508_4142d5e9",
        "filename": "libs/binder/tests/binderAllocationLimits.cpp",
        "patchSetId": 1
      },
      "lineNbr": 231,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-02T23:27:58Z",
      "side": 1,
      "message": "btw - these are the most important things. Essentially everything else, the static setup cost, we probably can and will want to change (fine to leave them here, but no guarantee they\u0027ll stay).\n\nWhat are these mallocs?",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 231,
        "endChar": 26
      },
      "revId": "5317271ddbfd5751a9a460fddcc3e01f0fa830e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73de1008_857fe5a8",
        "filename": "libs/binder/tests/binderAllocationLimits.cpp",
        "patchSetId": 1
      },
      "lineNbr": 231,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-06-02T23:57:35Z",
      "side": 1,
      "message": "\u003e these are the most important things\nRight, they have to be removed due to the raceyness.\n\nThese mallocs are coming from operator new:\n48 bytes android::RpcState::transactAddress\n- std::function for drainRefs\n- RpcState.cpp:520\n\n40 bytes android::RpcState::processTransact\n- android::RpcState::CommandData::CommandData\n- RpcState.cpp:309\n\n16 bytes android::RpcState::processDecStrong\n- android::RpcState::CommandData::CommandData\n- RpcState.cpp:309\n\n4 bytes android::RpcState::waitForReply\n- android::RpcState::CommandData::CommandData\n- RpcState.cpp:309\n\nhttps://paste.googleplex.com/4728057937002496\n\nWhat\u0027s the command to get the callstack on device to print line numbers? Somehow I always forget to write it down.\nI used \u0027stack\u0027 to get these but it\u0027s cumbersome.",
      "parentUuid": "fab17508_4142d5e9",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 231,
        "endChar": 26
      },
      "revId": "5317271ddbfd5751a9a460fddcc3e01f0fa830e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "057436df_f6ed7f94",
        "filename": "libs/binder/tests/binderAllocationLimits.cpp",
        "patchSetId": 1
      },
      "lineNbr": 231,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-03T21:18:11Z",
      "side": 1,
      "message": "The std::function allocation is probably easy to get rid of. std::function is often discouraged (e.g. go/totw/191). Looks like android has a `android::base::function_ref` type that might be relevant.",
      "parentUuid": "73de1008_857fe5a8",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 231,
        "endChar": 26
      },
      "revId": "5317271ddbfd5751a9a460fddcc3e01f0fa830e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1a47ea3_a763e28d",
        "filename": "libs/binder/tests/binderAllocationLimits.cpp",
        "patchSetId": 1
      },
      "lineNbr": 231,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-03T22:08:46Z",
      "side": 1,
      "message": "Yeah, we should fix that one. Devin, if it\u0027s not super easy, can you file a bug?",
      "parentUuid": "057436df_f6ed7f94",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 231,
        "endChar": 26
      },
      "revId": "5317271ddbfd5751a9a460fddcc3e01f0fa830e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "615ceda5_687f58cc",
        "filename": "libs/binder/tests/binderAllocationLimits.cpp",
        "patchSetId": 1
      },
      "lineNbr": 231,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-06-03T22:33:07Z",
      "side": 1,
      "message": "Nice suggestion Frederick!\nIt wasn\u0027t exactly 1:1 since there is no empty state for function_ref like there is for std::function so I had to add a `bool useAltPoll` to get the same functionality.\n\nI used defaults to make it a little easier, I forget where you stand on those ðŸ˜Š\n\naosp/2115298",
      "parentUuid": "e1a47ea3_a763e28d",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 231,
        "endChar": 26
      },
      "revId": "5317271ddbfd5751a9a460fddcc3e01f0fa830e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f11f57ad_75985cac",
        "filename": "libs/binder/tests/binderAllocationLimits.cpp",
        "patchSetId": 1
      },
      "lineNbr": 231,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-03T22:37:44Z",
      "side": 1,
      "message": "You can also use \"std::optional\u003cstd::base::function_ref...\u003e\" which could be more readable.\n\n\u003e I used defaults to make it a little easier, I forget where you stand on those ðŸ˜Š\n\nI tend to shy away from them to make clients more explicit, but it depends on the case.",
      "parentUuid": "615ceda5_687f58cc",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 231,
        "endChar": 26
      },
      "revId": "5317271ddbfd5751a9a460fddcc3e01f0fa830e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}