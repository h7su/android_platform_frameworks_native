{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1505b68e_df89c240",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1149384
      },
      "writtenOn": "2022-07-08T19:24:44Z",
      "side": 1,
      "message": "One concern I have with this:\n\nLet\u0027s say you have 2 USB ports:\n\nUSB1 - touchscreen should be in landscape mode\nUSB2 - touchscreen should be in portrait mode\n\nDo we actually care about which touchscreen is connected on USB1? I think the real requirement is that \"any touchscreen that is connected to USB1 should be used in landscape mode\" rather than \"the device A by manufacturer X plugged into USB1 should always be in landscape mode\".\n\nThe original reason that we used port association is for repairability: if you want to replace a display/touchscreen from model A to model B (maybe manufacturer discontinued model A), then we didn\u0027t want to require a software update to properly associate the new device with the correct port.\n\nIf the above is correct, then it would make more sense to do something like \"touchscreen_bus\" name matching, so the logic would be \"any touchscreen connected on this specific bus should use this idc file\".\n\nLet me know your thoughts here.\n\n\n\nTotally separately from the above, we also need tests and also we need to update the docs at https://source.android.com/devices/input/input-device-configuration-files",
      "revId": "01c78ccf094369db1fcc4623e23335dc6c955d7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1838895_addee43c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002669
      },
      "writtenOn": "2022-07-08T20:24:03Z",
      "side": 1,
      "message": "Siarhei,\n\nThanks for the feedback.\n\nNo we don\u0027t care about the model of touchscreen is on USB1 or USB2. Our requirements for the example above are:\n\n* The touchscreen on USB1 should be in landscape orientation and should be associated with the display that is in landscape orientation.\n* The touchscreen on USB2 should be in portrait orientation and should be associated with the display that is in portrait orientation.\n\nI did not see a way to associated an .idc file to a specific port without this change. The existing matching logic was to match by either:\n * Vendor, Product and Version ids as reported by the usb bus.\n * Vendor and Product ids as reported by the usb bus.\n * Device name as reported by the usb bus.\n\nYou can see these values by looking at \u0027cat /proc/bus/input/devices\u0027 and you can see what input manager store by doing a \u0027dumpsys input\u0027. None of the above 3 .idc file matching mechanisms worked for us because all of our touchpanels had the same device name and the same vendor, product, and version ids as they are all the same touchpanels on the displays we are using.\n\nThe change I have uploaded allows us to use the location of the device to match the .idc file. The location of the device include the bus path of the usb device as you are suggesting above (for example: Location: usb-xhci-hcd.1.auto-1.1/input1). This allows us to match the .idc file based on the port that the touchpanel is plugged into.\n\nHere is a concrete example of what we see on /proc/bus/input/devices for 2 of these displays:\n\nUSB1:\nI: Bus\u003d0003 Vendor\u003d0416 Product\u003dc168 Version\u003d0111\nN: Name\u003d\"TSTP MTouch\"\nP: Phys\u003dusb-xhci-hcd.1.auto-1.1/input1\nS: Sysfs\u003d/devices/platform/soc/a400000.ssusb/a400000.dwc3/xhci-hcd.1.auto/usb4/4-1/4-1.1/4-1.1:1.1/0003:0416:C168.0003/input/input4\nU: Uniq\u003dCMTP_1.0\nH: Handlers\u003devent4 cpufreq \nB: PROP\u003d2\nB: EV\u003d1b\nB: KEY\u003d400 0 0 0 0 0\nB: ABS\u003d260800000000003\nB: MSC\u003d20\n\nUSB2:\nI: Bus\u003d0003 Vendor\u003d0416 Product\u003dc168 Version\u003d0111\nN: Name\u003d\"TSTP MTouch\"\nP: Phys\u003dusb-xhci-hcd.1.auto-1.4/input1\nS: Sysfs\u003d/devices/platform/soc/a400000.ssusb/a400000.dwc3/xhci-hcd.1.auto/usb4/4-1/4-1.1/4-1.1:1.4/0003:0416:C168.0003/input/input2\nU: Uniq\u003dCMTP_1.0\nH: Handlers\u003devent4 cpufreq \nB: PROP\u003d2\nB: EV\u003d1b\nB: KEY\u003d400 0 0 0 0 0\nB: ABS\u003d260800000000003\nB: MSC\u003d20\n\nThe I: line is what we have the option to match against in the first two existing options above (Vendor id, Product id, and version).\n\nThe N: line is the third option existing option to match against from the options above (Name).\n\nThe P: line is what this change is allowing us to match against (Location).\n\nHere are the .idc files that we use for the example above:\n\nUSB1:\n/vendor/usr/idc/usb-xhci-hcd_1_auto-1_1_input1\ntouch.deviceType \u003d touchScreen\ntouch.displayId \u003d local:129\ntouch.orientation \u003d ORIENTATION_90\n\nUSB2:\n/vendor/usr/idc/usb-xhci-hcd_1_auto-1_4_input1\ntouch.deviceType \u003d touchScreen\ntouch.displayId \u003d local:3\ntouch.orientation \u003d ORIENTATION_0\n\nI would be happy to add some tests and update documentation for this change. You may need to point me to where to make these changes as I am not familiar with doing this. I assume the tests for this should be similar to any existing tests for the existing functionality of matching by name or vendor, product, and version. If you can point me to the existing test for those I can similar tests for matching by location.",
      "parentUuid": "1505b68e_df89c240",
      "revId": "01c78ccf094369db1fcc4623e23335dc6c955d7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbd3b7af_91e8b237",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002669
      },
      "writtenOn": "2022-07-08T21:59:49Z",
      "side": 1,
      "message": "I figured out where the input library tests were and added a test to InputDevice_test.cpp for the getCanonicalLocation method that I added which mirrors the existing test for getCanonicalName. I verified this passed when running atest -a libinput_tests. Patchset #4 contains the unit test addition.\n\nI did not see any existing tests to test idc file matching. Looking at how this could be tested in a unit test there would need to be a way to mock out which files the code found on the filesystem which would require changes to the code to allow that to be tested. I am guessing that is why there are not existing tests to validate this. Is the test I added sufficient or are there additional tests that should be added?",
      "parentUuid": "a1838895_addee43c",
      "revId": "01c78ccf094369db1fcc4623e23335dc6c955d7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7157938_329962ec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1407716
      },
      "writtenOn": "2022-07-11T18:59:27Z",
      "side": 1,
      "message": "I\u0027m also curious about how input port to display mapping competes with input-port-associations.xml. I think the mapping in the xml should override any display mappings from IDC files. Is that the case?",
      "parentUuid": "cbd3b7af_91e8b237",
      "revId": "01c78ccf094369db1fcc4623e23335dc6c955d7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7db8d313_0a34149c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002669
      },
      "writtenOn": "2022-07-11T20:20:08Z",
      "side": 1,
      "message": "If I understand the concern correctly it is that we can specify a display id in the .idc file and we also have an input-port-associations.xml file which can map a display id to a specific input device on a usb port. I agree that there could be a conflict between these two, but this issue exists with out without this patch as the display-id in the .idc file is existing functionality. ðŸ˜Š\n\nThis patch is just allowing us to match an .idc file by the location of the device. I guess the question back to the android team would be what is the future direction for mapping displays to inputs? Should it be done only with .idc files or only with input-port-associations.xml? If the direction is to only do it with input-port-associations.xml then it would be nice to add an \u0027orientation\u0027 attribute to the port elements in that file to allow us to configure the orientation of each display. If the direction is to do this with .idc files moving forward then perhaps input-port-associations.xml should be deprecated in favor of using a display-id in the .idc file instead.\n\nIn our case we are only using the .idc files to do this mapping and are not using the input-port-assocations.xml file.",
      "parentUuid": "a7157938_329962ec",
      "revId": "01c78ccf094369db1fcc4623e23335dc6c955d7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3002a41_766a6a3f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1149384
      },
      "writtenOn": "2022-07-11T20:27:34Z",
      "side": 1,
      "message": "I was actually typing a similar proposal as Joshua provided in the most recent message.\n\nAnother option is to add an \"idc\" file to input-port-associations.xml. So it could be something like this:\n\n```\n\u003cports\u003e\n    \u003cport display\u003d\"1\" input\u003d\"usb-xhci-hcd.0.auto-1.1/input0\" idc\u003d\"/vendor/etc/landscape.idc\"   /\u003e\n    \u003cport display\u003d\"2\" input\u003d\"usb-xhci-hcd.0.auto-1.2/input0\" idc\u003d\"/vendor/etc/portrait.idc\"  /\u003e\n\u003c/ports\u003e\n```\n\nThen add the corresponding idc files: portrait.idc and landscape.idc.\n\n\nHowever, what to do if we also have a match for \"\u003cdevice_name\u003e.idc\" file? Maybe this:\n\n\u003cdevice_name\u003e.idc always get preference. So in this auto use case, you wouldn\u0027t have any device_name idc files, but just generic \"idc\" files that get matched for any device connected to the input port.\n\nThoughts?",
      "parentUuid": "a7157938_329962ec",
      "revId": "01c78ccf094369db1fcc4623e23335dc6c955d7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b601e2b4_31fc6230",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002669
      },
      "writtenOn": "2022-07-12T13:13:41Z",
      "side": 1,
      "message": "In my mind it would be simpler to only have one mechanism to specify which idc file gets used - either through the existing file path matching or through the new proposed way of an attribute in the input-port-associations.xml file. However I also understand that there are likely additional uses cases for input configuration that I have not encountered that also need to be taken into consideration.",
      "parentUuid": "e3002a41_766a6a3f",
      "revId": "01c78ccf094369db1fcc4623e23335dc6c955d7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}