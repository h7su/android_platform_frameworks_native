{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1505b68e_df89c240",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1149384
      },
      "writtenOn": "2022-07-08T19:24:44Z",
      "side": 1,
      "message": "One concern I have with this:\n\nLet\u0027s say you have 2 USB ports:\n\nUSB1 - touchscreen should be in landscape mode\nUSB2 - touchscreen should be in portrait mode\n\nDo we actually care about which touchscreen is connected on USB1? I think the real requirement is that \"any touchscreen that is connected to USB1 should be used in landscape mode\" rather than \"the device A by manufacturer X plugged into USB1 should always be in landscape mode\".\n\nThe original reason that we used port association is for repairability: if you want to replace a display/touchscreen from model A to model B (maybe manufacturer discontinued model A), then we didn\u0027t want to require a software update to properly associate the new device with the correct port.\n\nIf the above is correct, then it would make more sense to do something like \"touchscreen_bus\" name matching, so the logic would be \"any touchscreen connected on this specific bus should use this idc file\".\n\nLet me know your thoughts here.\n\n\n\nTotally separately from the above, we also need tests and also we need to update the docs at https://source.android.com/devices/input/input-device-configuration-files",
      "revId": "01c78ccf094369db1fcc4623e23335dc6c955d7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1838895_addee43c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002669
      },
      "writtenOn": "2022-07-08T20:24:03Z",
      "side": 1,
      "message": "Siarhei,\n\nThanks for the feedback.\n\nNo we don\u0027t care about the model of touchscreen is on USB1 or USB2. Our requirements for the example above are:\n\n* The touchscreen on USB1 should be in landscape orientation and should be associated with the display that is in landscape orientation.\n* The touchscreen on USB2 should be in portrait orientation and should be associated with the display that is in portrait orientation.\n\nI did not see a way to associated an .idc file to a specific port without this change. The existing matching logic was to match by either:\n * Vendor, Product and Version ids as reported by the usb bus.\n * Vendor and Product ids as reported by the usb bus.\n * Device name as reported by the usb bus.\n\nYou can see these values by looking at \u0027cat /proc/bus/input/devices\u0027 and you can see what input manager store by doing a \u0027dumpsys input\u0027. None of the above 3 .idc file matching mechanisms worked for us because all of our touchpanels had the same device name and the same vendor, product, and version ids as they are all the same touchpanels on the displays we are using.\n\nThe change I have uploaded allows us to use the location of the device to match the .idc file. The location of the device include the bus path of the usb device as you are suggesting above (for example: Location: usb-xhci-hcd.1.auto-1.1/input1). This allows us to match the .idc file based on the port that the touchpanel is plugged into.\n\nHere is a concrete example of what we see on /proc/bus/input/devices for 2 of these displays:\n\nUSB1:\nI: Bus\u003d0003 Vendor\u003d0416 Product\u003dc168 Version\u003d0111\nN: Name\u003d\"TSTP MTouch\"\nP: Phys\u003dusb-xhci-hcd.1.auto-1.1/input1\nS: Sysfs\u003d/devices/platform/soc/a400000.ssusb/a400000.dwc3/xhci-hcd.1.auto/usb4/4-1/4-1.1/4-1.1:1.1/0003:0416:C168.0003/input/input4\nU: Uniq\u003dCMTP_1.0\nH: Handlers\u003devent4 cpufreq \nB: PROP\u003d2\nB: EV\u003d1b\nB: KEY\u003d400 0 0 0 0 0\nB: ABS\u003d260800000000003\nB: MSC\u003d20\n\nUSB2:\nI: Bus\u003d0003 Vendor\u003d0416 Product\u003dc168 Version\u003d0111\nN: Name\u003d\"TSTP MTouch\"\nP: Phys\u003dusb-xhci-hcd.1.auto-1.4/input1\nS: Sysfs\u003d/devices/platform/soc/a400000.ssusb/a400000.dwc3/xhci-hcd.1.auto/usb4/4-1/4-1.1/4-1.1:1.4/0003:0416:C168.0003/input/input2\nU: Uniq\u003dCMTP_1.0\nH: Handlers\u003devent4 cpufreq \nB: PROP\u003d2\nB: EV\u003d1b\nB: KEY\u003d400 0 0 0 0 0\nB: ABS\u003d260800000000003\nB: MSC\u003d20\n\nThe I: line is what we have the option to match against in the first two existing options above (Vendor id, Product id, and version).\n\nThe N: line is the third option existing option to match against from the options above (Name).\n\nThe P: line is what this change is allowing us to match against (Location).\n\nHere are the .idc files that we use for the example above:\n\nUSB1:\n/vendor/usr/idc/usb-xhci-hcd_1_auto-1_1_input1\ntouch.deviceType \u003d touchScreen\ntouch.displayId \u003d local:129\ntouch.orientation \u003d ORIENTATION_90\n\nUSB2:\n/vendor/usr/idc/usb-xhci-hcd_1_auto-1_4_input1\ntouch.deviceType \u003d touchScreen\ntouch.displayId \u003d local:3\ntouch.orientation \u003d ORIENTATION_0\n\nI would be happy to add some tests and update documentation for this change. You may need to point me to where to make these changes as I am not familiar with doing this. I assume the tests for this should be similar to any existing tests for the existing functionality of matching by name or vendor, product, and version. If you can point me to the existing test for those I can similar tests for matching by location.",
      "parentUuid": "1505b68e_df89c240",
      "revId": "01c78ccf094369db1fcc4623e23335dc6c955d7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbd3b7af_91e8b237",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002669
      },
      "writtenOn": "2022-07-08T21:59:49Z",
      "side": 1,
      "message": "I figured out where the input library tests were and added a test to InputDevice_test.cpp for the getCanonicalLocation method that I added which mirrors the existing test for getCanonicalName. I verified this passed when running atest -a libinput_tests. Patchset #4 contains the unit test addition.\n\nI did not see any existing tests to test idc file matching. Looking at how this could be tested in a unit test there would need to be a way to mock out which files the code found on the filesystem which would require changes to the code to allow that to be tested. I am guessing that is why there are not existing tests to validate this. Is the test I added sufficient or are there additional tests that should be added?",
      "parentUuid": "a1838895_addee43c",
      "revId": "01c78ccf094369db1fcc4623e23335dc6c955d7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7157938_329962ec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1407716
      },
      "writtenOn": "2022-07-11T18:59:27Z",
      "side": 1,
      "message": "I\u0027m also curious about how input port to display mapping competes with input-port-associations.xml. I think the mapping in the xml should override any display mappings from IDC files. Is that the case?",
      "parentUuid": "cbd3b7af_91e8b237",
      "revId": "01c78ccf094369db1fcc4623e23335dc6c955d7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7db8d313_0a34149c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002669
      },
      "writtenOn": "2022-07-11T20:20:08Z",
      "side": 1,
      "message": "If I understand the concern correctly it is that we can specify a display id in the .idc file and we also have an input-port-associations.xml file which can map a display id to a specific input device on a usb port. I agree that there could be a conflict between these two, but this issue exists with out without this patch as the display-id in the .idc file is existing functionality. ðŸ˜Š\n\nThis patch is just allowing us to match an .idc file by the location of the device. I guess the question back to the android team would be what is the future direction for mapping displays to inputs? Should it be done only with .idc files or only with input-port-associations.xml? If the direction is to only do it with input-port-associations.xml then it would be nice to add an \u0027orientation\u0027 attribute to the port elements in that file to allow us to configure the orientation of each display. If the direction is to do this with .idc files moving forward then perhaps input-port-associations.xml should be deprecated in favor of using a display-id in the .idc file instead.\n\nIn our case we are only using the .idc files to do this mapping and are not using the input-port-assocations.xml file.",
      "parentUuid": "a7157938_329962ec",
      "revId": "01c78ccf094369db1fcc4623e23335dc6c955d7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3002a41_766a6a3f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1149384
      },
      "writtenOn": "2022-07-11T20:27:34Z",
      "side": 1,
      "message": "I was actually typing a similar proposal as Joshua provided in the most recent message.\n\nAnother option is to add an \"idc\" file to input-port-associations.xml. So it could be something like this:\n\n```\n\u003cports\u003e\n    \u003cport display\u003d\"1\" input\u003d\"usb-xhci-hcd.0.auto-1.1/input0\" idc\u003d\"/vendor/etc/landscape.idc\"   /\u003e\n    \u003cport display\u003d\"2\" input\u003d\"usb-xhci-hcd.0.auto-1.2/input0\" idc\u003d\"/vendor/etc/portrait.idc\"  /\u003e\n\u003c/ports\u003e\n```\n\nThen add the corresponding idc files: portrait.idc and landscape.idc.\n\n\nHowever, what to do if we also have a match for \"\u003cdevice_name\u003e.idc\" file? Maybe this:\n\n\u003cdevice_name\u003e.idc always get preference. So in this auto use case, you wouldn\u0027t have any device_name idc files, but just generic \"idc\" files that get matched for any device connected to the input port.\n\nThoughts?",
      "parentUuid": "a7157938_329962ec",
      "revId": "01c78ccf094369db1fcc4623e23335dc6c955d7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b601e2b4_31fc6230",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002669
      },
      "writtenOn": "2022-07-12T13:13:41Z",
      "side": 1,
      "message": "In my mind it would be simpler to only have one mechanism to specify which idc file gets used - either through the existing file path matching or through the new proposed way of an attribute in the input-port-associations.xml file. However I also understand that there are likely additional uses cases for input configuration that I have not encountered that also need to be taken into consideration.",
      "parentUuid": "e3002a41_766a6a3f",
      "revId": "01c78ccf094369db1fcc4623e23335dc6c955d7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4904ce8c_9b145662",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002669
      },
      "writtenOn": "2022-07-19T21:33:52Z",
      "side": 1,
      "message": "I just wanted to follow up on this one. I was looking at the feasibility of doing this with the input-port-associations.xml file. It looks like this file is read and implemented up at the java layer (frameworks/base/service/core/java/com/android/server/input/InputManagerService.java). So to add this in the input-port-associations.xml file we would need to add plumbing from the java layer through inputflinger to implement using a specific idc file for a device plugged into the usb bus. \n\nSome downsides to this approach:\n1. The device is going to be enumerated and configured already before the java side service is up. This means we will end up configuring the input device twice with this approach instead of once.\n2. The current functionality in InputManagerService keeps this as a Map of String (usb bus location) to Integer (display id) and sends it down to the native callback as a flattened string.\n3. The input-port-associations.xml file seems to be not as well maintained as you can only specify an integer port id for the display where the idc file allows you to use a unique id (stable id) for the display which is preferable. This make me think that that display mapping in the idc file is the preferred route to do this over using input-port-associations.xml.\n\nGiven these does it still make sense to pursue the approach of doing this through input-port-associations.xml rather than the implementation in this patch which just adds a new file path to match for the existing idc file matching functionality?",
      "parentUuid": "b601e2b4_31fc6230",
      "revId": "01c78ccf094369db1fcc4623e23335dc6c955d7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a19b241_0ef6f4ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1149384
      },
      "writtenOn": "2022-07-22T19:15:23Z",
      "side": 1,
      "message": "Hi Joshua,\n\nI looked into this some more. I think that we should move the processing of \u0027input-port-associations.xml\u0027 into native code, probably into InputReader.cpp or into InputReaderBase.cpp as a static method for InputReaderPolicyInterface. I originally implemented it in Java to make it similar to \u0027excluded-input-devices.xml\u0027, but we have libxml2 and libtinyxml2 in native that we should be able to use. One complication could be the dynamic association featues, but that should also be solvable, maybe via a direct callback to native from policy or by reusing the existing \"InputReaderConfiguration\" callback from NativeInputManager, we would just change the \"portAssociations\" to mean \"dynamicPortAssociations\".\n\nWe do need to keep the support for \u0027input-port-associations.xml\u0027. It is currently maintained. It was originally added for android auto use case. There, we had the requirement to be able to specify \"any input device that\u0027s connected on a given usb port should be matched with a display that\u0027s connected on a given display port\". This way, if a part ever needs to be replaced, you could just swap for a different part, and things will just work, assuming that you plugged it into the same port.\nThe thinking was that maybe in 10 years after a car is made, display goes bad, but the original part was already discontinued.\n\nSo it\u0027s a different use case from the idc file, where it\u0027s the configuration of a specific kind of device.\n\nThat said, I do agree that there\u0027s a conflict if you have display id specified via xml and also via idc. It might make sense to resolve it, if we are looking to build more stuff on top of it.\n\nI don\u0027t think we support idc overlays today.\n\nSome ideas come to mind here:\n\n1) Add overlay support for idc. Then we could use the \"device_name\" idc as the base, and then apply the idc file from \"input-port-associations.xml\" as an overlay\n\n2) Just rely on input-port-associations.xml. Either crash when there are conflicting idc files, or ignore the \"device_name\" idc file during loading.\n\nTo me, it seems that your use case lines up more with the xml associations approach than the \"device_name\" idc.\n\nHappy to hear more here.",
      "parentUuid": "4904ce8c_9b145662",
      "revId": "01c78ccf094369db1fcc4623e23335dc6c955d7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47c37318_58e50064",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002669
      },
      "writtenOn": "2022-07-25T18:50:59Z",
      "side": 1,
      "message": "Thanks for the explanation. It feels like we have two separate use cases for the two input configuration files:\n\n\u003cdevice_location/name/product_vendor_version\u003e.idc\n1. Allows full configuration of the input device.\n  a. touch.deviceType\n  b. touch.displayId\n  c. touch.gestureMode\n  d. touch.orientation\n  e. touch.orientationAware\n  f. touch.size.calibration\n  g. touch.wake\n2. Uses stable identifiers for displayId association\n3. Searched for in multiple partitions (product, system_ext, odm, vendor, apex) to allow it to be overridden at different levels.\n4. Typically used by OEM/ODM to configure input devices to specific hardware being used.\n5. No use cases to override at runtime as they should not need to change unless the hardware changes.\n\ninput-port-assocations.xml\n1. Allows limited override of configuration\n  a. Overrides touch.displayId from idc file (but only allows physical display port to be used).\n2. Only searched for in vendor partition.\n3. Uses physical display port for configuration only (not a stable identifier)\n4. Originally added for android auto use case\n5. Could be made runtime overridable using an runtime resource overlay (sounds like there is a future use case where this would be desirable).\n\nIf that is a good summary of the two configuration files then I think it makes sense to keep the two configuration files separate and continue treating input-port-assocations.xml as a way for a vendor to only override which display an input device is associated with. This allows input-port-associations.xml to satisfy the android auto use case you mentioned, but not expand it to allow overriding additional configuration items. The documentation could be updated to clarify that input-port-associations.xml overrides touch.displayId in the idc file (this is the way it works today), and that it is only intended to override the input device to display mapping.",
      "parentUuid": "6a19b241_0ef6f4ce",
      "revId": "01c78ccf094369db1fcc4623e23335dc6c955d7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57dd5575_15aaa7b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002669
      },
      "writtenOn": "2022-08-19T15:42:18Z",
      "side": 1,
      "message": "Hello. I wanted to follow up on this one as we have not found any other way around supporting multiple touchpanels of the same type with different orientations.",
      "parentUuid": "47c37318_58e50064",
      "revId": "01c78ccf094369db1fcc4623e23335dc6c955d7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}