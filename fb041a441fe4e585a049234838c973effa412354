{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "535de992_1be0a629",
        "filename": "libs/binder/RpcState.cpp",
        "patchSetId": 9
      },
      "lineNbr": 498,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-06T20:23:53Z",
      "side": 1,
      "message": "these will always be nullptr/0 given uninitialized L497? (should there be a note here - I\u0027m guessing it is changed in the next CL?)",
      "range": {
        "startLine": 498,
        "startChar": 43,
        "endLine": 498,
        "endChar": 83
      },
      "revId": "fb041a441fe4e585a049234838c973effa412354",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d9296e8_cc22a196",
        "filename": "libs/binder/RpcState.cpp",
        "patchSetId": 9
      },
      "lineNbr": 498,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-08T23:06:41Z",
      "side": 1,
      "message": "yeah. added a note. i split this CL from the other one for easier reviewing and this was the somewhat arbitrary seam i picked to break it up",
      "parentUuid": "535de992_1be0a629",
      "range": {
        "startLine": 498,
        "startChar": 43,
        "endLine": 498,
        "endChar": 83
      },
      "revId": "fb041a441fe4e585a049234838c973effa412354",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2cf1ee4f_ad5fd3d4",
        "filename": "libs/binder/RpcState.cpp",
        "patchSetId": 9
      },
      "lineNbr": 586,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-06T20:23:53Z",
      "side": 1,
      "message": "is it possible to always use the same memory layout, regardless of the version used? For instance, always allocating the larger structure? It seems, the risk here, if the version gets out of sync, then memory will get corrupted. I agree the version shouldn\u0027t change, but it seems like it\u0027s a pretty risky thing that could change in the future.",
      "range": {
        "startLine": 581,
        "startChar": 0,
        "endLine": 586,
        "endChar": 45
      },
      "revId": "fb041a441fe4e585a049234838c973effa412354",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cfc7f5c_33e7f74b",
        "filename": "libs/binder/RpcState.cpp",
        "patchSetId": 9
      },
      "lineNbr": 586,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-06T22:23:13Z",
      "side": 1,
      "message": "i do agree this feels dangerous and also just generally more complex than i like\n\nusing one memory layout for the header seems doable if we stop using the \"struct hack\". at first glance, it seems like we could stack allocate the Reply header (using a separate iovec to decide how much of it to fill) and the CommmandData would only contain the parcel data (and object table). then, this code could just delete the `data` pointer without any pointer arithmetic\n\ni\u0027ll scout that out. did you happen to notice any perf issues with having more iovecs when you wrote this originally?",
      "parentUuid": "2cf1ee4f_ad5fd3d4",
      "range": {
        "startLine": 581,
        "startChar": 0,
        "endLine": 586,
        "endChar": 45
      },
      "revId": "fb041a441fe4e585a049234838c973effa412354",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6c814eb_30b64f86",
        "filename": "libs/binder/RpcState.cpp",
        "patchSetId": 9
      },
      "lineNbr": 586,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-07T23:48:06Z",
      "side": 1,
      "message": "yeah - that sounds great. Originally we didn\u0027t have iovecs",
      "parentUuid": "4cfc7f5c_33e7f74b",
      "range": {
        "startLine": 581,
        "startChar": 0,
        "endLine": 586,
        "endChar": 45
      },
      "revId": "fb041a441fe4e585a049234838c973effa412354",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4541121_30419101",
        "filename": "libs/binder/RpcState.cpp",
        "patchSetId": 9
      },
      "lineNbr": 586,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-08T23:06:41Z",
      "side": 1,
      "message": "Done\n\nI think new the code is overall better. Need to be careful about not using `sizeof(RpcWireReply)` though. Since there are just two spots using it, I think it is plenty safe.",
      "parentUuid": "c6c814eb_30b64f86",
      "range": {
        "startLine": 581,
        "startChar": 0,
        "endLine": 586,
        "endChar": 45
      },
      "revId": "fb041a441fe4e585a049234838c973effa412354",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bd228ba_db61c13b",
        "filename": "libs/binder/RpcState.cpp",
        "patchSetId": 9
      },
      "lineNbr": 615,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-06T20:23:53Z",
      "side": 1,
      "message": "nit: curious, would this code be simpler if:\n\nstruct RpcWireReplyV0 { int32_t a; int32_t b; };\nstruct RpcWireReplyV1 { RpcWireReplyV0 hdr; int32_t c; };\n\n...\n\nThis code seems to work, but all the logic/counting is changing (the common substructure between the two protocols is not encoded in the type system at the struct layer). This isn\u0027t inherently better, but I\u0027m wondering what alternatives you considered. C++23 style is also OK :)",
      "range": {
        "startLine": 614,
        "startChar": 37,
        "endLine": 615,
        "endChar": 59
      },
      "revId": "fb041a441fe4e585a049234838c973effa412354",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43e72bcf_03e8090e",
        "filename": "libs/binder/RpcState.cpp",
        "patchSetId": 9
      },
      "lineNbr": 615,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-08T23:06:41Z",
      "side": 1,
      "message": "Based on the other suggestion, there is just `RpcWireReply` now and a bit of logic to make sure we only read/write the correct number of bytes for the version.\n\nIf we want more type safety, then I\u0027m thinking of something like\n\n```\nstruct RpcWireReply {\n  int32_t a;\n  \n  struct V1Only {\n    int32 b;\n  };\n  V1Only v1Only;\n};\n```\n\nso that there is a visual indicator when you are accessing a field that may not be transmitted. However, I\u0027m thinking it isn\u0027t necessary since the code is well centralized.",
      "parentUuid": "1bd228ba_db61c13b",
      "range": {
        "startLine": 614,
        "startChar": 37,
        "endLine": 615,
        "endChar": 59
      },
      "revId": "fb041a441fe4e585a049234838c973effa412354",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ee52e71_e2edce4a",
        "filename": "libs/binder/RpcState.cpp",
        "patchSetId": 9
      },
      "lineNbr": 615,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-14T21:26:27Z",
      "side": 1,
      "message": "Resolving.",
      "parentUuid": "43e72bcf_03e8090e",
      "range": {
        "startLine": 614,
        "startChar": 37,
        "endLine": 615,
        "endChar": 59
      },
      "revId": "fb041a441fe4e585a049234838c973effa412354",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94d05382_a2ae95a4",
        "filename": "libs/binder/Utils.h",
        "patchSetId": 9
      },
      "lineNbr": 43,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-06T20:23:53Z",
      "side": 1,
      "message": "This class seems small and useful, but I\u0027m wondering, is there a reason std::span is no good?",
      "range": {
        "startLine": 43,
        "startChar": 32,
        "endLine": 43,
        "endChar": 53
      },
      "revId": "fb041a441fe4e585a049234838c973effa412354",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cfb7bb4_6884d25d",
        "filename": "libs/binder/Utils.h",
        "patchSetId": 9
      },
      "lineNbr": 43,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-06-06T20:49:29Z",
      "side": 1,
      "message": "Is Android on C++20 or still on 17? Afaik span was introduced in 20.",
      "parentUuid": "94d05382_a2ae95a4",
      "range": {
        "startLine": 43,
        "startChar": 32,
        "endLine": 43,
        "endChar": 53
      },
      "revId": "fb041a441fe4e585a049234838c973effa412354",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e3744de_39361874",
        "filename": "libs/binder/Utils.h",
        "patchSetId": 9
      },
      "lineNbr": 43,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-06T22:23:13Z",
      "side": 1,
      "message": "It is still on 17, but we can bump it to 20 for libbinder I think http://cs/android-internal/build/soong/cc/config/global.go;l\u003d281;rcl\u003d4236986f0a2db76902bb08b3c25b533df3ddb835 (it is still being referred to as 2a internally, which makes me a bit nervous)\n\nSince it is so simple, I figured I\u0027d just make a tiny local analogue and then we can move to it later. I\u0027m happy to give the version upgrade a try though",
      "parentUuid": "3cfb7bb4_6884d25d",
      "range": {
        "startLine": 43,
        "startChar": 32,
        "endLine": 43,
        "endChar": 53
      },
      "revId": "fb041a441fe4e585a049234838c973effa412354",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1f1b33a_7c5c6078",
        "filename": "libs/binder/Utils.h",
        "patchSetId": 9
      },
      "lineNbr": 43,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-07T00:49:50Z",
      "side": 1,
      "message": "I poked around some and found http://b/157601063. It looks like our libc++ version is old enough that it probably isn\u0027t a good idea.",
      "parentUuid": "1e3744de_39361874",
      "range": {
        "startLine": 43,
        "startChar": 32,
        "endLine": 43,
        "endChar": 53
      },
      "revId": "fb041a441fe4e585a049234838c973effa412354",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a98679bb_e6e112c4",
        "filename": "libs/binder/Utils.h",
        "patchSetId": 9
      },
      "lineNbr": 54,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-06T20:23:53Z",
      "side": 1,
      "message": "so cool!",
      "range": {
        "startLine": 53,
        "startChar": 1,
        "endLine": 54,
        "endChar": 17
      },
      "revId": "fb041a441fe4e585a049234838c973effa412354",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07231ed7_8d6e1060",
        "filename": "libs/binder/Utils.h",
        "patchSetId": 9
      },
      "lineNbr": 58,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-06T20:23:53Z",
      "side": 1,
      "message": "is this intentionally not an error?",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 58,
        "endChar": 9
      },
      "revId": "fb041a441fe4e585a049234838c973effa412354",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "214ec94e_ed459a0f",
        "filename": "libs/binder/Utils.h",
        "patchSetId": 9
      },
      "lineNbr": 58,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-06T22:23:13Z",
      "side": 1,
      "message": "i was using Haskell\u0027s [take](https://hackage.haskell.org/package/base-4.16.1.0/docs/Prelude.html#v:take) as inspiration, but maybe Rust\u0027s [split_at](https://doc.rust-lang.org/std/primitive.slice.html#method.split_at) is a better fit. i\u0027ll make it an error. i\u0027ll also steal that name",
      "parentUuid": "07231ed7_8d6e1060",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 58,
        "endChar": 9
      },
      "revId": "fb041a441fe4e585a049234838c973effa412354",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4c2ed4e_b6cc0364",
        "filename": "libs/binder/Utils.h",
        "patchSetId": 9
      },
      "lineNbr": 58,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-07T23:48:06Z",
      "side": 1,
      "message": "Thanks! (the error only means more explicit and complicated client code - though if we don\u0027t have a specific reason this simplifies code, prefer explicit!)",
      "parentUuid": "214ec94e_ed459a0f",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 58,
        "endChar": 9
      },
      "revId": "fb041a441fe4e585a049234838c973effa412354",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b5df1e8_01e6d274",
        "filename": "libs/binder/Utils.h",
        "patchSetId": 9
      },
      "lineNbr": 58,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-08T23:06:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b4c2ed4e_b6cc0364",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 58,
        "endChar": 9
      },
      "revId": "fb041a441fe4e585a049234838c973effa412354",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}