{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a29b98d9_64b46614",
        "filename": "libs/binder/trusty/IShellCallback.cpp",
        "patchSetId": 101
      },
      "lineNbr": 2,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-06T00:40:15Z",
      "side": 1,
      "message": "2022 (on new files)\n\ncan we avoid duplicating this?\n\nAlso, can we have the build rules setup for the Trusty variant as well. We want to be able to at least build (and ideally test) the Trusty variant in Android",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 21
      },
      "revId": "5d71932b46765ec3287406ee68c6bdc93e62fa33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7c82116_abc3a3de",
        "filename": "libs/binder/trusty/RpcTransportRaw.cpp",
        "patchSetId": 101
      },
      "lineNbr": 37,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-06T00:40:15Z",
      "side": 1,
      "message": "can we avoid a separate implementation of the same type w/ the same name? This means for instance, we could never test this transport type using Android\u0027s libbinder, right? Does this mean we don\u0027t have libbinder_trusty anymore?",
      "range": {
        "startLine": 37,
        "startChar": 6,
        "endLine": 37,
        "endChar": 21
      },
      "revId": "5d71932b46765ec3287406ee68c6bdc93e62fa33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e525e6f_00694a60",
        "filename": "libs/binder/trusty/RpcTransportRaw.cpp",
        "patchSetId": 101
      },
      "lineNbr": 37,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-05-11T02:00:49Z",
      "side": 1,
      "message": "There are a few different things going on here.\n\nFirst, that this is all the code for libbinder-on-Trusty, as opposed to libbinder_trusty which is the Android code that talks to Trusty (next CL). We need both, and each comes with its own transport (RpcTransportRaw here, RpcTransportTrusty for Android).\n\nThe other problem is that both RpcServer::make() and RpcSession::make() use RpcTransportRaw as the default transport when one isn\u0027t provided, and they\u0027re called like that from a few places in libbinder (most notably in establishConnection here https://cs.android.com/android/platform/superproject/+/master:frameworks/native/libs/binder/RpcServer.cpp;l\u003d391). Maybe I could add a way to specify the default transport instead?",
      "parentUuid": "d7c82116_abc3a3de",
      "range": {
        "startLine": 37,
        "startChar": 6,
        "endLine": 37,
        "endChar": 21
      },
      "revId": "5d71932b46765ec3287406ee68c6bdc93e62fa33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61257d9e_c6df4979",
        "filename": "libs/binder/trusty/include/android-base/logging.h",
        "patchSetId": 101
      },
      "lineNbr": 8,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-06T00:40:15Z",
      "side": 1,
      "message": "tabs",
      "range": {
        "startLine": 8,
        "startChar": 2,
        "endLine": 8,
        "endChar": 3
      },
      "revId": "5d71932b46765ec3287406ee68c6bdc93e62fa33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48caaa7a_a85efa29",
        "filename": "libs/binder/trusty/include/android-base/logging.h",
        "patchSetId": 101
      },
      "lineNbr": 20,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-06T00:40:15Z",
      "side": 1,
      "message": "can we avoid adding a header under \u0027android-base\u0027?\n\n(e.g. move every including of android-base/logging.h into another header which includes that or has this)?",
      "revId": "5d71932b46765ec3287406ee68c6bdc93e62fa33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60e8c1c3_6a2056e1",
        "filename": "libs/binder/trusty/include/android-base/logging.h",
        "patchSetId": 101
      },
      "lineNbr": 21,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-06T00:40:15Z",
      "side": 1,
      "message": "this will be hard to debug, is there another thing we can call?",
      "range": {
        "startLine": 21,
        "startChar": 41,
        "endLine": 21,
        "endChar": 51
      },
      "revId": "5d71932b46765ec3287406ee68c6bdc93e62fa33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "525d161b_73100222",
        "filename": "libs/binder/trusty/include/linux/android/binder.h",
        "patchSetId": 101
      },
      "lineNbr": 17,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-06T00:40:15Z",
      "side": 1,
      "message": "same with this, avoid adding a header in the other namespace",
      "revId": "5d71932b46765ec3287406ee68c6bdc93e62fa33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb9b20ff_4cb104bb",
        "filename": "libs/binder/trusty/include/linux/android/binder.h",
        "patchSetId": 101
      },
      "lineNbr": 17,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-05-11T02:14:30Z",
      "side": 1,
      "message": "This specific header is particularly problematic: it defines not only the types below, but also flat_binder_object, B_PACK_CHARS and a bunch of other things, but it\u0027s also really Linux-specific. I could just pull in the original header from external/kernel-headers, but that seems like a really bad idea (not just for Trusty but for any non-Linux OS in general). Thoughts?",
      "parentUuid": "525d161b_73100222",
      "revId": "5d71932b46765ec3287406ee68c6bdc93e62fa33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0b571da_f8a475c3",
        "filename": "libs/binder/trusty/include/log/log.h",
        "patchSetId": 101
      },
      "lineNbr": 1,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-06T00:40:15Z",
      "side": 1,
      "message": "+enh for if he has a better idea for how to handle logging here (we might want a generic trusty solution eventually)",
      "revId": "5d71932b46765ec3287406ee68c6bdc93e62fa33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96410fe6_c3e36a6b",
        "filename": "libs/binder/trusty/include/log/log.h",
        "patchSetId": 101
      },
      "lineNbr": 8,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-06T00:40:15Z",
      "side": 1,
      "message": "same",
      "revId": "5d71932b46765ec3287406ee68c6bdc93e62fa33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7074503c_bac76fed",
        "filename": "libs/binder/trusty/threads.cpp",
        "patchSetId": 101
      },
      "lineNbr": 23,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-06T00:40:27Z",
      "side": 1,
      "message": "and hopefully take out all of the NO_THREAD stuff, right? :D",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 66
      },
      "revId": "5d71932b46765ec3287406ee68c6bdc93e62fa33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}