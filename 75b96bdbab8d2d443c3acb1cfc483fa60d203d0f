{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "56fba255_60c3e5bd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1869395
      },
      "writtenOn": "2022-02-24T18:03:30Z",
      "side": 1,
      "message": "getting back to this now... I\u0027ve lowered the scope of this change to only log the extended errors as private for now. PTAL",
      "revId": "75b96bdbab8d2d443c3acb1cfc483fa60d203d0f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5399066_d3fedd70",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-03-02T10:01:00Z",
      "side": 1,
      "message": "Thanks! The API is great.",
      "parentUuid": "56fba255_60c3e5bd",
      "revId": "75b96bdbab8d2d443c3acb1cfc483fa60d203d0f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6c36bf9_d6421ed0",
        "filename": "libs/binder/IPCThreadState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 284,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-03-02T10:01:00Z",
      "side": 1,
      "message": "Could we store this information in ProcessState itself (and use the lock there?). There\u0027s two bytes available after mThreadPoolStarted. We have spent a lot of time removing global static memory here (where we can). Since libbinder is used in a lot of processes, if it bumps us to an extra page of private dirty memory, it adds up. If we can remove a few more, we save a lot.",
      "range": {
        "startLine": 284,
        "startChar": 4,
        "endLine": 284,
        "endChar": 10
      },
      "revId": "75b96bdbab8d2d443c3acb1cfc483fa60d203d0f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f534dc05_82a4b46b",
        "filename": "libs/binder/IPCThreadState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 284,
      "author": {
        "id": 1869395
      },
      "writtenOn": "2022-03-05T00:17:05Z",
      "side": 1,
      "message": "I suppose you are thinking of a 16-bit bitmap and have enums map to each bit? I think this is a good option and I remember looking into this first. However, we would also need a separate array to get the filenames for each feature adding to the global static memory anyway.\n\nIt seems to me this option would generate about the same cache misses as the current implementation?\n\nI don\u0027t know, perhaps it\u0027s not worth caching/locking on every process and instead we just want to read files every time. After all, it\u0027s simpler to read a file than to try and fail an unsupported ioctl()?",
      "parentUuid": "c6c36bf9_d6421ed0",
      "range": {
        "startLine": 284,
        "startChar": 4,
        "endLine": 284,
        "endChar": 10
      },
      "revId": "75b96bdbab8d2d443c3acb1cfc483fa60d203d0f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96a8dd38_af372952",
        "filename": "libs/binder/IPCThreadState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 287,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-03-02T10:01:00Z",
      "side": 1,
      "message": "string keys lose type safety. Consider enum and array?",
      "range": {
        "startLine": 283,
        "startChar": 34,
        "endLine": 287,
        "endChar": 6
      },
      "revId": "75b96bdbab8d2d443c3acb1cfc483fa60d203d0f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dac830e3_b5cad822",
        "filename": "libs/binder/IPCThreadState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 294,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-03-02T10:01:00Z",
      "side": 1,
      "message": "if we still have this path, this should probably be a hard error (or we should return two kinds of errors - it\u0027s always programmer now - but \u0027false\u0027 means both the driver feature is unknown and it is not enabled - prone to a typo causing us to think a feature is always disabled)",
      "range": {
        "startLine": 294,
        "startChar": 0,
        "endLine": 294,
        "endChar": 14
      },
      "revId": "75b96bdbab8d2d443c3acb1cfc483fa60d203d0f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3e64279_04400ca1",
        "filename": "libs/binder/IPCThreadState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 302,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-03-02T10:01:00Z",
      "side": 1,
      "message": "clang format on upload hook?",
      "range": {
        "startLine": 302,
        "startChar": 0,
        "endLine": 302,
        "endChar": 1
      },
      "revId": "75b96bdbab8d2d443c3acb1cfc483fa60d203d0f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb2866f9_f79e4074",
        "filename": "libs/binder/ProcessState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 450,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-03-02T10:01:00Z",
      "side": 1,
      "message": "could we save a log per-process by checking for the features here? is oneway spam detection added in this same kernel version?",
      "range": {
        "startLine": 446,
        "startChar": 0,
        "endLine": 450,
        "endChar": 5
      },
      "revId": "75b96bdbab8d2d443c3acb1cfc483fa60d203d0f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}