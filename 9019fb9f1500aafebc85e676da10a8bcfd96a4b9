{
  "comments": [
    {
      "key": {
        "uuid": "85ff1414_fbc976ff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-08-18T21:58:50Z",
      "side": 1,
      "message": "Thanks, I\u0027ll take care of these asap.",
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "602e116a_8b47a4f2",
        "filename": "libs/binder/rust/TEST_MAPPING",
        "patchSetId": 5
      },
      "lineNbr": 12,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-18T21:46:53Z",
      "side": 1,
      "message": "move these to libs/binder/TEST_MAPPING",
      "range": {
        "startLine": 4,
        "startChar": 1,
        "endLine": 12,
        "endChar": 3
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ca5d292_e180be31",
        "filename": "libs/binder/rust/tests/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-18T21:46:53Z",
      "side": 1,
      "message": "this should be changed to rust_libs in the build system for consistency? Matthew?",
      "range": {
        "startLine": 40,
        "startChar": 4,
        "endLine": 40,
        "endChar": 12
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9a98e37_e6a9fbe8",
        "filename": "libs/binder/rust/tests/serialization.cpp",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-18T21:46:53Z",
      "side": 1,
      "message": "use gtest instead (specifically because it will show the right value and runtime value)?",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 35,
        "endChar": 12
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "401d7348_16e1c1af",
        "filename": "libs/binder/rust/tests/serialization.cpp",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-18T21:46:53Z",
      "side": 1,
      "message": "nit: avoid this type of thing a la https://2014.jsconf.eu/speakers/sebastian-markbage-minimal-api-surface-area-learning-patterns-instead-of-frameworks.html",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 36,
        "endChar": 50
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e77b2ec_5ca35494",
        "filename": "libs/binder/rust/tests/serialization.cpp",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-18T21:46:53Z",
      "side": 1,
      "message": "make globals const, consider \u0027g\u0027 prefix, e.g. gI8s",
      "range": {
        "startLine": 38,
        "startChar": 15,
        "endLine": 38,
        "endChar": 18
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4036c6a0_c3fbc07d",
        "filename": "libs/binder/rust/tests/serialization.cpp",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-18T21:46:53Z",
      "side": 1,
      "message": "nit: you could write exter \"C\" on the function definition",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 63,
        "endChar": 1
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "750f396b_c8d4a039",
        "filename": "libs/binder/rust/tests/serialization.cpp",
        "patchSetId": 5
      },
      "lineNbr": 140,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-18T21:46:53Z",
      "side": 1,
      "message": "this type of test can be hard to debug, since many things are going on. Can we test each type in independent tests?",
      "range": {
        "startLine": 133,
        "startChar": 0,
        "endLine": 140,
        "endChar": 35
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "433c21a8_468734af",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-18T21:46:53Z",
      "side": 1,
      "message": "nit: is there an easy way to avoid duplicating the data in both langauges? We have some of these in HIDL tests, and it gets annoying to update them in multiple places.",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 39,
        "endChar": 0
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6f78f66_402faac8",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 5
      },
      "lineNbr": 221,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-18T21:46:53Z",
      "side": 1,
      "message": "nit: this type of test shouldn\u0027t need to add_service or use root. is there a way you can force it to wrap things in process? That should also make it possible, theoretically to run on host",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 221,
        "endChar": 43
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73e90a37_15502df2",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 5
      },
      "lineNbr": 221,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-08-18T21:58:50Z",
      "side": 1,
      "message": "I just noticed AIBinder_{to,from}PlatformBinder, which I think I can use instead to transfer the service object to C++ (or vice versa). I didn\u0027t see another way to perform a transaction across the language boundary so that we could read/write to a Parcel from Rust.",
      "parentUuid": "c6f78f66_402faac8",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 221,
        "endChar": 43
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}