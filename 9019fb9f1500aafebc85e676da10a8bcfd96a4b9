{
  "comments": [
    {
      "key": {
        "uuid": "85ff1414_fbc976ff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-08-18T21:58:50Z",
      "side": 1,
      "message": "Thanks, I\u0027ll take care of these asap.",
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "602e116a_8b47a4f2",
        "filename": "libs/binder/rust/TEST_MAPPING",
        "patchSetId": 5
      },
      "lineNbr": 12,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-18T21:46:53Z",
      "side": 1,
      "message": "move these to libs/binder/TEST_MAPPING",
      "range": {
        "startLine": 4,
        "startChar": 1,
        "endLine": 12,
        "endChar": 3
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "add89efc_56ed2621",
        "filename": "libs/binder/rust/TEST_MAPPING",
        "patchSetId": 5
      },
      "lineNbr": 12,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-08-19T01:27:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "602e116a_8b47a4f2",
      "range": {
        "startLine": 4,
        "startChar": 1,
        "endLine": 12,
        "endChar": 3
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ca5d292_e180be31",
        "filename": "libs/binder/rust/tests/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-18T21:46:53Z",
      "side": 1,
      "message": "this should be changed to rust_libs in the build system for consistency? Matthew?",
      "range": {
        "startLine": 40,
        "startChar": 4,
        "endLine": 40,
        "endChar": 12
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9a98e37_e6a9fbe8",
        "filename": "libs/binder/rust/tests/serialization.cpp",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-18T21:46:53Z",
      "side": 1,
      "message": "use gtest instead (specifically because it will show the right value and runtime value)?",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 35,
        "endChar": 12
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e405f94_438cfbd7",
        "filename": "libs/binder/rust/tests/serialization.cpp",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-08-19T01:27:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f9a98e37_e6a9fbe8",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 35,
        "endChar": 12
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57d30916_09713116",
        "filename": "libs/binder/rust/tests/serialization.cpp",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-08-19T19:41:45Z",
      "side": 1,
      "message": "If this needs to be a non-root test and not register a service, I would ideally like the Rust side of this test to be internal to the binder crate (to have access to the raw AIBinder pointer), which means Rust will have to drive the tests.\n\nIf Rust is driving the test, we can\u0027t really use the gtest driver framework. I was hoping that gtest would work nicely without using its test harness framework, but I\u0027m not seeing an easy way to do that. Without creating the test cases in via the TEST(), etc. macros in C++, I don\u0027t see a good way to use the gtest assertions.\n\nAlternatively I can rework this whole thing to drive the tests from normal gtest test cases in C++, but that will require exposing an unsafe function in the crate to convert AIBinder* into its safe Rust wrapper to allow Rust to call transactions on the C++ service.\n\nIf we drop the idea of non-root testing and allow the service to be registered, then we can fairly easily drive the tests from gtest and not require exposing anything extra from the Rust crate. The gtest case can just call into Rust, Rust gets the C++ service from the manager, and transacts with it. There\u0027s still issues about unwinding panic across the FFI boundary but I think I can handle that.",
      "parentUuid": "1e405f94_438cfbd7",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 35,
        "endChar": 12
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbc694f5_cb236f2f",
        "filename": "libs/binder/rust/tests/serialization.cpp",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-25T22:55:44Z",
      "side": 1,
      "message": "I guess, it would be nice to have some testing environment, or at least, have the behaviors we are testing be separated. If something goes wrong here, we have to figure out where in over 100 lines of parceling code. Ideally, one test \"case\" or function etc only tests one or a few behaviors.",
      "parentUuid": "57d30916_09713116",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 35,
        "endChar": 12
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25959e00_dec7ee5f",
        "filename": "libs/binder/rust/tests/serialization.cpp",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-08-25T22:57:58Z",
      "side": 1,
      "message": "I\u0027m in progress of rewriting this to use gtest as the driver with individual test and export the unsafe function needed to convert a Rust binder object into a raw pointer. I think this is the least bad solution that still lets this test be nice. Should have that up later today, need to take care of a few things first.",
      "parentUuid": "fbc694f5_cb236f2f",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 35,
        "endChar": 12
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04da73cc_c6e10408",
        "filename": "libs/binder/rust/tests/serialization.cpp",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-08-27T00:58:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "25959e00_dec7ee5f",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 35,
        "endChar": 12
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "401d7348_16e1c1af",
        "filename": "libs/binder/rust/tests/serialization.cpp",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-18T21:46:53Z",
      "side": 1,
      "message": "nit: avoid this type of thing a la https://2014.jsconf.eu/speakers/sebastian-markbage-minimal-api-surface-area-learning-patterns-instead-of-frameworks.html",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 36,
        "endChar": 50
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c43f9a9_3244f693",
        "filename": "libs/binder/rust/tests/serialization.cpp",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-08-19T01:27:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "401d7348_16e1c1af",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 36,
        "endChar": 50
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e77b2ec_5ca35494",
        "filename": "libs/binder/rust/tests/serialization.cpp",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-18T21:46:53Z",
      "side": 1,
      "message": "make globals const, consider \u0027g\u0027 prefix, e.g. gI8s",
      "range": {
        "startLine": 38,
        "startChar": 15,
        "endLine": 38,
        "endChar": 18
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29b5fa96_b5ebdb99",
        "filename": "libs/binder/rust/tests/serialization.cpp",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-08-27T00:58:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e77b2ec_5ca35494",
      "range": {
        "startLine": 38,
        "startChar": 15,
        "endLine": 38,
        "endChar": 18
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4036c6a0_c3fbc07d",
        "filename": "libs/binder/rust/tests/serialization.cpp",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-18T21:46:53Z",
      "side": 1,
      "message": "nit: you could write exter \"C\" on the function definition",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 63,
        "endChar": 1
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2a8dfcc_5f7cf5ab",
        "filename": "libs/binder/rust/tests/serialization.cpp",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-08-19T01:27:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4036c6a0_c3fbc07d",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 63,
        "endChar": 1
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "750f396b_c8d4a039",
        "filename": "libs/binder/rust/tests/serialization.cpp",
        "patchSetId": 5
      },
      "lineNbr": 140,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-18T21:46:53Z",
      "side": 1,
      "message": "this type of test can be hard to debug, since many things are going on. Can we test each type in independent tests?",
      "range": {
        "startLine": 133,
        "startChar": 0,
        "endLine": 140,
        "endChar": 35
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58fea075_ea359d99",
        "filename": "libs/binder/rust/tests/serialization.cpp",
        "patchSetId": 5
      },
      "lineNbr": 140,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-08-27T00:58:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "750f396b_c8d4a039",
      "range": {
        "startLine": 133,
        "startChar": 0,
        "endLine": 140,
        "endChar": 35
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "433c21a8_468734af",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-18T21:46:53Z",
      "side": 1,
      "message": "nit: is there an easy way to avoid duplicating the data in both langauges? We have some of these in HIDL tests, and it gets annoying to update them in multiple places.",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 39,
        "endChar": 0
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ce0c4be_c807a141",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-08-27T00:58:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "433c21a8_468734af",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 39,
        "endChar": 0
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6f78f66_402faac8",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 5
      },
      "lineNbr": 221,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-08-18T21:46:53Z",
      "side": 1,
      "message": "nit: this type of test shouldn\u0027t need to add_service or use root. is there a way you can force it to wrap things in process? That should also make it possible, theoretically to run on host",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 221,
        "endChar": 43
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73e90a37_15502df2",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 5
      },
      "lineNbr": 221,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-08-18T21:58:50Z",
      "side": 1,
      "message": "I just noticed AIBinder_{to,from}PlatformBinder, which I think I can use instead to transfer the service object to C++ (or vice versa). I didn\u0027t see another way to perform a transaction across the language boundary so that we could read/write to a Parcel from Rust.",
      "parentUuid": "c6f78f66_402faac8",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 221,
        "endChar": 43
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0f7c744_f887c17f",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 5
      },
      "lineNbr": 221,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-08-19T01:27:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "73e90a37_15502df2",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 221,
        "endChar": 43
      },
      "revId": "9019fb9f1500aafebc85e676da10a8bcfd96a4b9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}