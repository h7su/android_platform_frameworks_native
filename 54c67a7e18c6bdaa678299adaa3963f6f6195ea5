{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1464be35_b47de411",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 8,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-12-02T05:03:04Z",
      "side": 1,
      "message": "All the other CLs just use `libbinder:` as the prefix.",
      "revId": "54c67a7e18c6bdaa678299adaa3963f6f6195ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65eee944_ca212a9e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-12-02T05:02:11Z",
      "side": 1,
      "message": "This CL should also be have the `device-tree-prototype` hashtag.",
      "revId": "54c67a7e18c6bdaa678299adaa3963f6f6195ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2761f77_3e4c496e",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 8
      },
      "lineNbr": 42,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-12-02T06:55:19Z",
      "side": 1,
      "message": "Semicolon is not needed at the end.",
      "revId": "54c67a7e18c6bdaa678299adaa3963f6f6195ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "207d5bba_44f67879",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 8
      },
      "lineNbr": 45,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-12-02T06:50:30Z",
      "side": 1,
      "message": "Might be useful to at least log or assert on insertion error, although it\u0027s unlikely to happen.",
      "revId": "54c67a7e18c6bdaa678299adaa3963f6f6195ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a4b4315_51083420",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 8
      },
      "lineNbr": 49,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-12-02T06:50:30Z",
      "side": 1,
      "message": "As the code is written right now, will this ever get called?",
      "revId": "54c67a7e18c6bdaa678299adaa3963f6f6195ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db06f285_9b9fa44b",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 8
      },
      "lineNbr": 58,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-12-02T06:42:19Z",
      "side": 1,
      "message": "Return `const std::string\u0026`? References are usually constant.",
      "revId": "54c67a7e18c6bdaa678299adaa3963f6f6195ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc13a447_0cab92f2",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 8
      },
      "lineNbr": 157,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-12-02T06:50:30Z",
      "side": 1,
      "message": "This creates a reference cycle: `RpcServerTrusty -\u003e BstNode -\u003e RpcServerTrusty` so the destructor will never be called.",
      "revId": "54c67a7e18c6bdaa678299adaa3963f6f6195ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a91e7408_83a56ef9",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 8
      },
      "lineNbr": 157,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-12-02T21:30:10Z",
      "side": 1,
      "message": "Also, do we need to pass in `this` as `fromExisting(this)`? I need to double check, but it\u0027s possible that the current code makes a copy.",
      "parentUuid": "fc13a447_0cab92f2",
      "revId": "54c67a7e18c6bdaa678299adaa3963f6f6195ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f593cdb_b171aa84",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 8
      },
      "lineNbr": 157,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-12-02T21:32:52Z",
      "side": 1,
      "message": "Re using `fromExisting`: it\u0027s not required, the implicit constructor for `sp\u003c\u003e` also does a shallow copy with `incStrong`.",
      "parentUuid": "a91e7408_83a56ef9",
      "revId": "54c67a7e18c6bdaa678299adaa3963f6f6195ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}