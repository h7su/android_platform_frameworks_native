{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0904cba8_ce63e4b1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-26T23:13:25Z",
      "side": 1,
      "message": "what is this for?",
      "revId": "5b9cbbf92c953661b549cf62bb0f162ef4cde737",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8030863_fb79fc56",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2022-05-26T23:16:36Z",
      "side": 1,
      "message": "This enables libraries which depend on these libraries to be host_supported (facilitating host-side testing).",
      "parentUuid": "0904cba8_ce63e4b1",
      "revId": "5b9cbbf92c953661b549cf62bb0f162ef4cde737",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c664c879_e07f77af",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-26T23:25:15Z",
      "side": 1,
      "message": "Host will crash as soon as you call any of these APIs (because binder can\u0027t be used). The API cut is made here because we want to use part of libbinder and it\u0027s hard to extract, but are permissions API usages so hard to cut out? For instance, these libraries can\u0027t be used for dependency injection because we don\u0027t support something like setDefaultServiceManager for these. I think an equivalent change to this would be putting \u0027abort()\u0027 in checkPermission w/o taking on the deps here. WDYT?",
      "parentUuid": "c8030863_fb79fc56",
      "revId": "5b9cbbf92c953661b549cf62bb0f162ef4cde737",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bf0e560_dc57cf36",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2022-05-26T23:31:56Z",
      "side": 1,
      "message": "I am a bit confused what portions of libbinder are host available then. What functionality does the host version of libbinder validly expose? My understanding was that there existed a host implementation of binder that could be used by tests. Are we unable to get the AidlServiceManager on the host?",
      "parentUuid": "c664c879_e07f77af",
      "revId": "5b9cbbf92c953661b549cf62bb0f162ef4cde737",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "364ae1f7_77d55ee4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-26T23:39:22Z",
      "side": 1,
      "message": "Well, RPC binder works on host now, but the main reason libbinder is on host is essentially that many classes inherit from BBinder. Due to this inheritance requirement, unit testing these classes (without an additional abstraction layer) requires libbinder on host. ProcessState::self() will abort on host.",
      "parentUuid": "9bf0e560_dc57cf36",
      "revId": "5b9cbbf92c953661b549cf62bb0f162ef4cde737",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fb0c705_614e0a52",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2022-05-26T23:46:20Z",
      "side": 1,
      "message": "So if RPC binder works on host now, does that still mean that ProcessState will abort (i.e. published services are not mocked by the host implementation of binder).\n\nIn that case, I assume the recommendation is to mock over the services returned by service manager?",
      "parentUuid": "364ae1f7_77d55ee4",
      "revId": "5b9cbbf92c953661b549cf62bb0f162ef4cde737",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b82011c3_d9f7f34f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-26T23:51:33Z",
      "side": 1,
      "message": "\u003e So if RPC binder works on host now, does that still mean that ProcessState will abort\n\nYes. Kernel binder uses ProcessState/IPCThreadState. RPC Binder uses RpcServer/RpcSession.\n\n\u003e I assume the recommendation is to mock\n\nThe best place to do dependency injection would depend on the exact architecture. For fuzzing V1, I would recommend to return \u0027new BBinder()\u0027 or the Default class from the service manager. Then, follow-up with something more fleshed out to increase coverage. That is, recommend vertical integration before spending too much time trying to mock services (this can get arbitrarily difficult). Though, essentially, yes, mock the services.",
      "parentUuid": "3fb0c705_614e0a52",
      "revId": "5b9cbbf92c953661b549cf62bb0f162ef4cde737",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b90b6680_f8ac5d44",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2022-05-27T17:30:06Z",
      "side": 1,
      "message": "With all that in mind, what are your thoughts on this CL? It would make it easier to make certain libraries that depend on it host available (regardless of the fact that the calls would abort). I\u0027d rather defer the conditional logic up to the implementation of process state than ifdefing in the existing library.",
      "parentUuid": "b82011c3_d9f7f34f",
      "revId": "5b9cbbf92c953661b549cf62bb0f162ef4cde737",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5518d98_775d03a1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-27T17:41:46Z",
      "side": 1,
      "message": "This CL turns a build error (missing the API) into a runtime error. Is this related to your fuzzing work (commit message bug?)? I would ask you to finish getting that working locally and to the point you can run the fuzzer, then evaluate if this is needed.\n\n\u003e It would make it easier to make certain libraries that depend on it host available\n\nEasier to build, not run them.\n\n\u003e I\u0027d rather defer the conditional logic up to the implementation of process state than ifdefing in the existing library.\n\nNeither is fundamentally a better solution. For instance, a counter-point is that a build error means that it is obvious where the conditional logic is needed, but a runtime error means that all points where conditional logic is needed must be discovered. I don\u0027t see the point in arguing this case w/o an example user.",
      "parentUuid": "b90b6680_f8ac5d44",
      "revId": "5b9cbbf92c953661b549cf62bb0f162ef4cde737",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55a13f79_44fdb51c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1494236
      },
      "writtenOn": "2022-05-27T21:07:43Z",
      "side": 1,
      "message": "This isn\u0027t related directly to the fuzzing work (rather it is a dependency of a dependency of another project). \n\nAn example location is this class: https://source.corp.google.com/android/frameworks/av/media/utils/BatteryNotifier.cpp\nThere is also an existing fuzzer for this class (that is at this point non-host available).\n\nThe class already has conditional logic on receiving nullptr as the interface it is requesting, so from a logic perspective, I see no reason it should not be host available -- but it depends on libbatterystats_aidl which is the intent of this CL.\n\nSimilar issues in ISchedulingPolicyService.cpp and ProcessInfo.cpp in the same dir.\n\nIdeally, instead of abort, we would handle not receiving the service (i.e. getting a nullptr) as we do on android, with some graceful alternate handling case. In the interest of testing, we can test all the business logic apart from publishing back to a service.",
      "parentUuid": "a5518d98_775d03a1",
      "revId": "5b9cbbf92c953661b549cf62bb0f162ef4cde737",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17758181_b2d3e427",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-27T22:14:55Z",
      "side": 1,
      "message": "Can you share the CL or code that is using this on host?\n\n\u003e libbatterystats_aidl\n\nI don\u0027t have a problem with this part of the change, if you want to submit it independently.\n\n\u003e Ideally\n\nDo you mean I should take your statement as an ideal? Or do you have an ideological framework within which this is a derived value? Returning false or null or a value means that we are saying we know a priori what all clients might like to do here. This is a 3rd level (beyond forcing clients to answer this question statically OR abort forcing clients to answer this question dynamically). I would like to see a case established before we expose things here (and even in that case, adding these classes to host is not strictly needed). Otherwise, by default I am going for \"least exposed APIs\" + \"most explicit decision set for clients\". I\u0027m not saying you are definitely wrong. I\u0027m saying \"Prove it!\" 😊 Plus, if you are so sure, and since I know you are very good, I am sure I will be able to learn something 😊",
      "parentUuid": "55a13f79_44fdb51c",
      "revId": "5b9cbbf92c953661b549cf62bb0f162ef4cde737",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}