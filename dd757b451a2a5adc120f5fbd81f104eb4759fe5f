{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "40c061de_27ea67f0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-01T21:38:16Z",
      "side": 1,
      "message": "(just giving a surface level c++ review because i haven\u0027t read up much on this part of the codebase yet)",
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "435db065_4515bb11",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-01T21:38:16Z",
      "side": 1,
      "message": "static (or put in an anon namespace)",
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "361db499_f86451b9",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-02T20:31:56Z",
      "side": 1,
      "message": "fwiw - I the google3 standard votes for anon namespace (presumably because it works for anything, and \u0027static\u0027 only works for functions, but \u0027static\u0027 is much friendlier wrt merge conflicts, I always use it when I can)",
      "parentUuid": "435db065_4515bb11",
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f88cea3f_6c4dc5d0",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-08-03T21:05:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "435db065_4515bb11",
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c96f1df_bef3f463",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-02T20:31:56Z",
      "side": 1,
      "message": "avoid calling this method, because its log would be a problem in this case. By calling into the method, you can get the old object and try to promote it directly. Because find/attach are called separately, it introduces the need for the fatal log below.",
      "range": {
        "startLine": 113,
        "startChar": 23,
        "endLine": 113,
        "endChar": 29
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f97a856d_2f21cdbf",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-08-03T21:05:35Z",
      "side": 1,
      "message": "removed the find/attach calls.",
      "parentUuid": "8c96f1df_bef3f463",
      "range": {
        "startLine": 113,
        "startChar": 23,
        "endLine": 113,
        "endChar": 29
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "377cbb6a_28738ec6",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-01T21:38:16Z",
      "side": 1,
      "message": "is this case suppose to be impossible? if not, maybe we could fallback by deleting `newObj` and returning `oldObj`?",
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22ac2714_0f219532",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-02T20:31:56Z",
      "side": 1,
      "message": "It\u0027s impossible, because it\u0027s checked on L109 already.",
      "parentUuid": "377cbb6a_28738ec6",
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e68a6d69_235cc530",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-03T00:30:10Z",
      "side": 1,
      "message": "Ah, this is done in a mutex section, so it can\u0027t race, right?",
      "parentUuid": "22ac2714_0f219532",
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48cec21f_4fc0aa6e",
        "filename": "libs/binder/BpBinder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-08-03T21:05:35Z",
      "side": 1,
      "message": "I was assuming this should only be called when protected by the mutex so this could never happen.",
      "parentUuid": "377cbb6a_28738ec6",
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6eea26ca_bcfd2e09",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-02T20:31:56Z",
      "side": 1,
      "message": "nit: add this file in another CL on top of this",
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f608526_0fa259e4",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-01T21:38:16Z",
      "side": 1,
      "message": "i wonder if it is possible to use the [rvalue ctor that implicitly casts](http://cs/android-internal/system/core/libutils/include/utils/StrongPointer.h;l\u003d76;rcl\u003d2527a26799d7a57737e99e21de4c9ff237740f5c) instead of `sp\u003cIBinder\u003e::cast`. that would avoid some incr and decr overhead\n\nsame idea, further down, maybe can do `return sp\u003ctypename T::DefaultDelegator\u003e(std::move(delegate));`\n\n(sorry if these `sp` comments seem pedantic. i\u0027m not used to code bases making extensive use of shared pointers. every time i see one get copied, it is poking a pet peeve of mine)",
      "range": {
        "startLine": 25,
        "startChar": 11,
        "endLine": 25,
        "endChar": 28
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6dc7fa6c_8957179e",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-08-03T21:05:35Z",
      "side": 1,
      "message": "Looks like the first suggestion works well. Done.\n\nThe second suggestion still seems to need the cast.\n\nKeep the comments coming! I\u0027m far from an expert with these so they are really helpful.",
      "parentUuid": "8f608526_0fa259e4",
      "range": {
        "startLine": 25,
        "startChar": 11,
        "endLine": 25,
        "endChar": 28
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2419dd2f_e2100232",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-01T21:38:16Z",
      "side": 1,
      "message": "you have control of `args` here, so instead of `T*`, you could make it `sp\u003cT\u003e*`, then this simplifies slightly to\n\n```\n    return sp\u003cIBinder\u003e::cast(\n            sp\u003ctypename T::DefaultDelegator\u003e::make(*static_cast\u003csp\u003cT\u003e*\u003e(args)));\n```",
      "range": {
        "startLine": 26,
        "startChar": 51,
        "endLine": 26,
        "endChar": 93
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e82eac0d_ab28b573",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-08-03T21:05:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2419dd2f_e2100232",
      "range": {
        "startLine": 26,
        "startChar": 51,
        "endLine": 26,
        "endChar": 93
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0514a12e_067cc6b5",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-01T21:38:16Z",
      "side": 1,
      "message": "worth at least a one liner doc comment\n\nis this suppose to be part of the public API? if not, we do have a usual way to make that obvious?",
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d049ec29_7071970a",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-08-03T21:05:35Z",
      "side": 1,
      "message": "Added a description.\nThis can be a public API. I don\u0027t know how often it will be useful for someone, but I don\u0027t think there is a need to prevent use.",
      "parentUuid": "0514a12e_067cc6b5",
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5f01719_f14a2340",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-01T21:38:16Z",
      "side": 1,
      "message": "`found` isn\u0027t used, so maybe do `if (T::asBinder(binder)-\u003efindObject(isDelegatorId)) {`",
      "range": {
        "startLine": 32,
        "startChar": 8,
        "endLine": 32,
        "endChar": 22
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35d1f0a9_db149d9f",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-02T20:31:56Z",
      "side": 1,
      "message": "or also assert found \u003d\u003d 1 (value from L42)",
      "parentUuid": "b5f01719_f14a2340",
      "range": {
        "startLine": 32,
        "startChar": 8,
        "endLine": 32,
        "endChar": 22
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a2bb5ad_5f40188c",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-02T20:31:56Z",
      "side": 1,
      "message": "nit: if isDelegatorId and hasDelegatorId are both set on an object, we could also abort in this case (this might be an easy way to detect some of the error conditions we were talking about)",
      "range": {
        "startLine": 32,
        "startChar": 54,
        "endLine": 32,
        "endChar": 67
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d57adec_416f4c71",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-08-03T21:05:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a2bb5ad_5f40188c",
      "range": {
        "startLine": 32,
        "startChar": 54,
        "endLine": 32,
        "endChar": 67
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a260cc2_9d5d99ec",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-08-03T21:05:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b5f01719_f14a2340",
      "range": {
        "startLine": 32,
        "startChar": 8,
        "endLine": 32,
        "endChar": 22
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a783036d_24570062",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-01T21:38:16Z",
      "side": 1,
      "message": "maybe use a lambda so that less API is exposed. if the lambda has no capture list, then it can implicitly cast to a function pointer of the same signature",
      "range": {
        "startLine": 39,
        "startChar": 68,
        "endLine": 39,
        "endChar": 87
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db37ef18_7e4fbd0b",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-02T20:31:56Z",
      "side": 1,
      "message": "can the templated function be declared inside this function?",
      "parentUuid": "a783036d_24570062",
      "range": {
        "startLine": 39,
        "startChar": 68,
        "endLine": 39,
        "endChar": 87
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "546231cd_88c164ca",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-03T00:30:10Z",
      "side": 1,
      "message": "`delegate` is templated already. if you define lambda inside `delegate`, then it can use `T` like any other type, so no need templated lambdas",
      "parentUuid": "db37ef18_7e4fbd0b",
      "range": {
        "startLine": 39,
        "startChar": 68,
        "endLine": 39,
        "endChar": 87
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27ec1083_79266ba2",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-08-03T21:05:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a783036d_24570062",
      "range": {
        "startLine": 39,
        "startChar": 68,
        "endLine": 39,
        "endChar": 87
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2702b2d_809596f5",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-01T21:38:16Z",
      "side": 1,
      "message": "unique",
      "range": {
        "startLine": 41,
        "startChar": 67,
        "endLine": 41,
        "endChar": 74
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65cdbdef_2f5f1bdb",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-08-03T21:05:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c2702b2d_809596f5",
      "range": {
        "startLine": 41,
        "startChar": 67,
        "endLine": 41,
        "endChar": 74
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ba03490_3f978d9f",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-02T20:31:56Z",
      "side": 1,
      "message": "We should actually probably do this inside of the \u0027make\u0027 function so it is only done once, wdyt? Otherwise, it will emit extra logs",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 96
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40a278b3_8171f570",
        "filename": "libs/binder/include/binder/Delegate.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-08-03T21:05:35Z",
      "side": 1,
      "message": "The extra logs are pretty bad.\nI think I would have to use the `T::DefaultDelegator::_aidl_is_delegator_id` from inside the make `function`, and might as well get rid of the *Id arguements and use the _aidl_ ids everywhere. Does that sound ok?",
      "parentUuid": "5ba03490_3f978d9f",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 96
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1aee1963_8424e8bd",
        "filename": "libs/binder/tests/binderBinderUnitTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-02T20:31:56Z",
      "side": 1,
      "message": "tests with dropping this?",
      "range": {
        "startLine": 60,
        "startChar": 22,
        "endLine": 60,
        "endChar": 35
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20bbf25e_12914f46",
        "filename": "libs/binder/tests/binderBinderUnitTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-08-03T21:05:35Z",
      "side": 1,
      "message": "Good call! This actually hits a very similar issue to the cleanup function. Cleanup function is segfaulting when doing decWeak and this causes a segfault in incWeakRequireWeak from fromExisting. They are failing in the __atomic_base operations.\nDoes this mean that we need these to be OBJECT_LIFETIME_WEAK so they aren\u0027t destroyed? Or is there someway I can check for this?",
      "parentUuid": "1aee1963_8424e8bd",
      "range": {
        "startLine": 60,
        "startChar": 22,
        "endLine": 60,
        "endChar": 35
      },
      "revId": "dd757b451a2a5adc120f5fbd81f104eb4759fe5f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}