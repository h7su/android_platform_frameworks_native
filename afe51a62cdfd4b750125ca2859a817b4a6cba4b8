{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d6f54523_64e65b36",
        "filename": "libs/binder/FdTrigger.cpp",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-08T18:15:57Z",
      "side": 1,
      "message": "`fdState` as an argument name no longer makes sense\n\nalso, the arg name in the cc and h files are out of sync",
      "range": {
        "startLine": 56,
        "startChar": 56,
        "endLine": 56,
        "endChar": 63
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "049d1b7f_66fdea37",
        "filename": "libs/binder/FdTrigger.cpp",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-08T20:42:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d6f54523_64e65b36",
      "range": {
        "startLine": 56,
        "startChar": 56,
        "endLine": 56,
        "endChar": 63
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be2fe170_91a05ce3",
        "filename": "libs/binder/FdTrigger.cpp",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-10T03:04:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "049d1b7f_66fdea37",
      "range": {
        "startLine": 56,
        "startChar": 56,
        "endLine": 56,
        "endChar": 63
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "606fa217_fc8ffb14",
        "filename": "libs/binder/FdTrigger.cpp",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-08T18:14:26Z",
      "side": 1,
      "message": "did we run binderRpcBenchmark before and after this? FWIW - if you inc polling now, it should only ever be 1/2. I know Frederick suggested for forwards compat, but we could also consider aborting if the FD is also polling here and save the atomic set.\n\nDid you try aborting if it\u0027s set to 2 and see if the test ever crashes? I don\u0027t think it should now, because these are protected by the connection mutex in RpcSession.",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 72,
        "endChar": 25
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5d680bb_42593993",
        "filename": "libs/binder/FdTrigger.cpp",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-08T18:29:28Z",
      "side": 1,
      "message": "what do you mean by \"save the atomic set\"? are you thinking the overhead of the atomic incr/decr ops is too much?\n\ni think you want the atomic ops whether it is a bool or an int because the read is going to happen outside of the mutex. it will *probably* be fine without it, but, when it comes to sync, i think you should always do it right unless you have a really good reason and think hard about it. especially since the main motivation is deflaking a fuzzer\n\nfor bool vs int, i don\u0027t think there is a performance difference (assuming we pick an int with the same size)",
      "parentUuid": "606fa217_fc8ffb14",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 72,
        "endChar": 25
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6befecd_f3d8dfeb",
        "filename": "libs/binder/FdTrigger.cpp",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-12T17:34:39Z",
      "side": 1,
      "message": "You can run the benchmark on a phone with something like\n\n```\nm libbinder binderRpcBenchmark \u0026\u0026 adb sync \u0026\u0026 adb shell /data/benchmarktest64/binderRpcBenchmark/binderRpcBenchmark\n```",
      "parentUuid": "e5d680bb_42593993",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 72,
        "endChar": 25
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a302eec_689c0bfc",
        "filename": "libs/binder/FdTrigger.cpp",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-15T21:00:10Z",
      "side": 1,
      "message": "Here are benchmarking test results after and before rpcsocket changes. go/rpcsocket-benchmark",
      "parentUuid": "f6befecd_f3d8dfeb",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 72,
        "endChar": 25
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1966ed22_2a4eadfb",
        "filename": "libs/binder/FdTrigger.cpp",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-16T22:01:54Z",
      "side": 1,
      "message": "Please put it in a graph or spreadsheet or something to compare. It doesn\u0027t look like this is adding anything noticeable, but it\u0027s hard to tell in this format.",
      "parentUuid": "1a302eec_689c0bfc",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 72,
        "endChar": 25
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53ae9a94_c669be9a",
        "filename": "libs/binder/FdTrigger.cpp",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-16T23:32:05Z",
      "side": 1,
      "message": "I was hoping you were going to recommend a nice way to compare them. It seems like the android benchmark output has drifted from google3 and golang, so the usual tools like benchy and go/benchstat don\u0027t work. I ended up using a spreadsheet last time.\n\nIt looks like the diffs are all noise since it is hard to believe this made things faster. Can either conclude that there is no measurable diff or that we need a better benchmark setup to get reliable numbers.",
      "parentUuid": "1966ed22_2a4eadfb",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 72,
        "endChar": 25
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8043376d_0ae4ac53",
        "filename": "libs/binder/FdTrigger.cpp",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-17T21:43:53Z",
      "side": 1,
      "message": "Please find sheet for the same results : go/rpc-socket-benchmarking. I also confirmed that during binderRpcTest, pollingCount never hits 2.",
      "parentUuid": "53ae9a94_c669be9a",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 72,
        "endChar": 25
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef7b5a56_3a360bbb",
        "filename": "libs/binder/FdTrigger.cpp",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-23T23:21:43Z",
      "side": 1,
      "message": "We should switch the std::atomic to a boolean and abort if this method is ever called when the FD is already polling (indicates an error). Please make a note of this on the bug or file another bug on this. We can decouple it from landing this CL.",
      "parentUuid": "8043376d_0ae4ac53",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 72,
        "endChar": 25
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f08dfe41_1e576c43",
        "filename": "libs/binder/FdTrigger.cpp",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-26T15:44:43Z",
      "side": 1,
      "message": "Switched to boolean in current CL.",
      "parentUuid": "ef7b5a56_3a360bbb",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 72,
        "endChar": 25
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "046fd8c4_a718c5fc",
        "filename": "libs/binder/FdTrigger.cpp",
        "patchSetId": 5
      },
      "lineNbr": 76,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-08T18:15:57Z",
      "side": 1,
      "message": "need to decr in the error case",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 22
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5901b1e6_1a9cc40e",
        "filename": "libs/binder/FdTrigger.cpp",
        "patchSetId": 5
      },
      "lineNbr": 76,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-08T20:42:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "046fd8c4_a718c5fc",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 22
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4394293a_a7d57912",
        "filename": "libs/binder/FdTrigger.cpp",
        "patchSetId": 5
      },
      "lineNbr": 76,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-10T03:04:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5901b1e6_1a9cc40e",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 22
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0592fa89_5fd02dc2",
        "filename": "libs/binder/FdTrigger.h",
        "patchSetId": 5
      },
      "lineNbr": 58,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-08T18:14:26Z",
      "side": 1,
      "message": "nit: const + mutable field? or no? doesn\u0027t matter if it\u0027s all internal :)))",
      "range": {
        "startLine": 58,
        "startChar": 61,
        "endLine": 58,
        "endChar": 62
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0de45a2_30b820ba",
        "filename": "libs/binder/FdTrigger.h",
        "patchSetId": 5
      },
      "lineNbr": 58,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-10T03:04:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0592fa89_5fd02dc2",
      "range": {
        "startLine": 58,
        "startChar": 61,
        "endLine": 58,
        "endChar": 62
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb52fd13_c4827d78",
        "filename": "libs/binder/RpcSession.cpp",
        "patchSetId": 5
      },
      "lineNbr": 564,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-08T18:15:57Z",
      "side": 1,
      "message": "update variable name (`socket`?)",
      "range": {
        "startLine": 564,
        "startChar": 18,
        "endLine": 564,
        "endChar": 25
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcf8b987_229d0273",
        "filename": "libs/binder/RpcSession.cpp",
        "patchSetId": 5
      },
      "lineNbr": 564,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-08T20:42:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fb52fd13_c4827d78",
      "range": {
        "startLine": 564,
        "startChar": 18,
        "endLine": 564,
        "endChar": 25
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74de500e_9f03390b",
        "filename": "libs/binder/RpcSession.cpp",
        "patchSetId": 5
      },
      "lineNbr": 564,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-10T03:04:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fcf8b987_229d0273",
      "range": {
        "startLine": 564,
        "startChar": 18,
        "endLine": 564,
        "endChar": 25
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d8f6fb8_42aecf68",
        "filename": "libs/binder/include/binder/RpcThreads.h",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-08T18:15:57Z",
      "side": 1,
      "message": "did you confirm this is necessary? i\u0027m surprised if they don\u0027t have atomics since those are useful even in single threaded environments\n\nan alternative idea is to move the RpcSocket definition to this file, then not have a polling counter at all for the single threaded version. in the single threaded case, it won\u0027t be possible to check the counter value when something is polling, so it isn\u0027t worth tracking. OTOH, i don\u0027t think it is worth optimizing that much, only recommending this because it might be overall simpler than implementing a fake atomic counter",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24971fd2_e1581d8b",
        "filename": "libs/binder/include/binder/RpcThreads.h",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-08T18:19:09Z",
      "side": 1,
      "message": "(this is mostly just musing/curiosity, i think the solution is fine)",
      "parentUuid": "0d8f6fb8_42aecf68",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdabac14_b84971ff",
        "filename": "libs/binder/include/binder/RpcThreads.h",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-08T20:42:17Z",
      "side": 1,
      "message": "I checked with respect to Rpc* implementations and didn\u0027t find any usage of std::atomic. I had to use load() in constructors of RpcSocket and that\u0027s why it was necessary to define this new type. As of now, all synchronization primitives are defined w.r.t both single threaded and multithreaded differently, that\u0027s why I chose to keep it in the same way.",
      "parentUuid": "24971fd2_e1581d8b",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e82d781_2f560eba",
        "filename": "libs/binder/include/binder/RpcThreads.h",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-08T20:59:28Z",
      "side": 1,
      "message": "it is really just done as needed so that the code compiles on trusty, so if you don\u0027t run into a build error, you could probably omit this",
      "parentUuid": "cdabac14_b84971ff",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0bfc1ad2_dd892d92",
        "filename": "libs/binder/include/binder/RpcThreads.h",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-09T01:03:40Z",
      "side": 1,
      "message": "This would also be okay on trusty:\n\n    using RpcAtomicUnit \u003d size_t;",
      "parentUuid": "3e82d781_2f560eba",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13ce47b0_d5760f6d",
        "filename": "libs/binder/include/binder/RpcThreads.h",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-09T01:55:39Z",
      "side": 1,
      "message": "Copy constructor of atomic variables is deleted. So while moving RpcSocket objects, I have to use load() and then pass that value to atomic member. There is another way to do this -\u003e static cast the atomic member to basic type and then use  it. To avoid casting the atomic member to basic type, load has been used. \n\n using RpcAtomicUnit \u003d size_t; \n \n This will break on trusty with current implementation.",
      "parentUuid": "0bfc1ad2_dd892d92",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ef74beb_4fc5f710",
        "filename": "libs/binder/include/binder/RpcThreads.h",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-09T17:40:47Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "13ce47b0_d5760f6d",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b2f8b69_dbaaa5b6",
        "filename": "libs/binder/include/binder/RpcThreads.h",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-10T03:04:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "13ce47b0_d5760f6d",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a71f135b_7dca21b7",
        "filename": "libs/binder/include/binder/RpcThreads.h",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-10T22:46:36Z",
      "side": 1,
      "message": "I\u0027m going to push a little harder on this: We are already using `std::atomic` elsewhere in libbinder ([example](http://cs/android-internal/frameworks/native/libs/binder/include/binder/Binder.h;l\u003d159;rcl\u003d84daba06c975edc439603aac580558d8bf8398df)). The existing uses work fine in the single threaded config (and I assume in Trusty), so this must not be necessary. I highly recommend just using `std::atomic` directly instead of adding this new abstraction.",
      "parentUuid": "6b2f8b69_dbaaa5b6",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4854f933_d2f35b1b",
        "filename": "libs/binder/include/binder/RpcThreads.h",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-11T23:53:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a71f135b_7dca21b7",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "202ab623_130afb01",
        "filename": "libs/binder/include/binder/RpcThreads.h",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-16T22:01:54Z",
      "side": 1,
      "message": "That std::atomic is necessary because it is used on paths that are entered into by multiple threads at the same time, but this one is not. RpcSession ExclusiveConnection should always guard this, and if it doesn\u0027t, there is a bug.\n\nI hadn\u0027t thought about it when I initially looked at this, but please, follow this up:\n- remove std::atomic\n- use a boolean\n- abort if we need to set the boolean and it\u0027s already true\n\nThis would be racey of course, but some of the race cases will abort so we can detect the bug. It should never happen.",
      "parentUuid": "4854f933_d2f35b1b",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0172a3a1_87547cc5",
        "filename": "libs/binder/include/binder/RpcThreads.h",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-16T23:32:05Z",
      "side": 1,
      "message": "This comment thread was about whether we need an abstraction on top of std::atomic so it can be swapped out in the single threaded mode, I was only commenting on that, not whether to use atomic at all.\n\n\u003e RpcSession ExclusiveConnection should always guard this, and if it doesn\u0027t, there is a bug.\n\nThis isn\u0027t correct. The variable is going to be read from outside the mutex (in the fuzzer harness I assume). If nothing could read the variable from outside the mutex, then there would be no purpose to adding it.\n\nAfter thinking about it more, I agree an int is unnecessary because we ensure only one thread uses a socket at a time, so you couldn\u0027t end up with two threads polling. I\u0027d personally still use an int because it is basically equivalent and involves less coupling between the various parts of the code. Not a strong opinion.\n\nI\u0027m sure in practice a normal `bool` or `int` will be fine, so I\u0027ll retract my suggestion to use atomic since it is controversial.",
      "parentUuid": "202ab623_130afb01",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03786718_5a7f9f48",
        "filename": "libs/binder/include/binder/RpcThreads.h",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-17T21:43:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0172a3a1_87547cc5",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e8d3856_7801f07a",
        "filename": "libs/binder/include/binder/RpcThreads.h",
        "patchSetId": 5
      },
      "lineNbr": 149,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-08T18:15:57Z",
      "side": 1,
      "message": "should return `size_t` to match `std::atomic\u003csize_t\u003e` or return `void` if we don\u0027t care to actually use it",
      "range": {
        "startLine": 141,
        "startChar": 0,
        "endLine": 149,
        "endChar": 5
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0685eb12_fcc26f72",
        "filename": "libs/binder/include/binder/RpcThreads.h",
        "patchSetId": 5
      },
      "lineNbr": 149,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-08T20:42:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4e8d3856_7801f07a",
      "range": {
        "startLine": 141,
        "startChar": 0,
        "endLine": 149,
        "endChar": 5
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a961834_45bc3c31",
        "filename": "libs/binder/include/binder/RpcThreads.h",
        "patchSetId": 5
      },
      "lineNbr": 149,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-10T03:04:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0685eb12_fcc26f72",
      "range": {
        "startLine": 141,
        "startChar": 0,
        "endLine": 149,
        "endChar": 5
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51c2a06a_3e6a9bd5",
        "filename": "libs/binder/include/binder/RpcThreads.h",
        "patchSetId": 5
      },
      "lineNbr": 155,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-08T18:15:57Z",
      "side": 1,
      "message": "do we need these? i don\u0027t see them in `std::atomic`",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 155,
        "endChar": 63
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79670791_2825709c",
        "filename": "libs/binder/include/binder/RpcThreads.h",
        "patchSetId": 5
      },
      "lineNbr": 155,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-08T20:42:17Z",
      "side": 1,
      "message": "If we use this type without explicitly calling load and then comparing, we will need this.",
      "parentUuid": "51c2a06a_3e6a9bd5",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 155,
        "endChar": 63
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2201cda1_5b21be6e",
        "filename": "libs/binder/include/binder/RpcThreads.h",
        "patchSetId": 5
      },
      "lineNbr": 155,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-08T20:59:28Z",
      "side": 1,
      "message": "nevermind, I thought `std::atomic` required calling load before comparing. i\u0027d personally leave them out and call load explicitly since that is less code, but up to you",
      "parentUuid": "79670791_2825709c",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 155,
        "endChar": 63
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "503d6bc3_6fe8e994",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 5
      },
      "lineNbr": 86,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-08T18:15:57Z",
      "side": 1,
      "message": "document this, maybe\n\n// Whether any threads are blocked polling the transport (for reads or writes).\n\nif that is right, it seems to suggest an issue where, e.g., one thread is polling for a read, but another thread is actively writing. i think binder rpc is always single threaded w.r.t. a specific transport, so that shouldn\u0027t actually be an issue",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76519bd4_70d0cbe0",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 5
      },
      "lineNbr": 86,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-08T20:42:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "503d6bc3_6fe8e994",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1e3b7d0_efd95d34",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 5
      },
      "lineNbr": 86,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-10T03:04:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76519bd4_70d0cbe0",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82b07172_23c25b30",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 5
      },
      "lineNbr": 138,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-08T18:14:26Z",
      "side": 1,
      "message": "nit: (follow-up) add a reserved field or two here just in case?",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 138,
        "endChar": 31
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f6b889a_f0cf7818",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 5
      },
      "lineNbr": 138,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-08T20:42:17Z",
      "side": 1,
      "message": "I didn\u0027t get why I need to add this?",
      "parentUuid": "82b07172_23c25b30",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 138,
        "endChar": 31
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aca57271_7ba0e1bd",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 5
      },
      "lineNbr": 138,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-16T22:01:54Z",
      "side": 1,
      "message": "This is in the header, and if someone fixes the structure of this, it could cause a problem for us. If we can hide this to avoid letting other libraries use it, that would be ideal. Though, I\u0027m not sure how.",
      "parentUuid": "5f6b889a_f0cf7818",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 138,
        "endChar": 31
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff5a79bc_6be8aa9e",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 5
      },
      "lineNbr": 138,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-17T21:43:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "aca57271_7ba0e1bd",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 138,
        "endChar": 31
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b92eefe1_21baf3bb",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 5
      },
      "lineNbr": 140,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-08T18:15:57Z",
      "side": 1,
      "message": "do we need a default constructor? if so, you should be able to delegate to the `unique_fd` default constructor",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "125d0aba_14f8f8e8",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 5
      },
      "lineNbr": 140,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-08T20:42:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b92eefe1_21baf3bb",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51634b07_8a3c66d8",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 5
      },
      "lineNbr": 140,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-10T03:04:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "125d0aba_14f8f8e8",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5993a45b_6073c371",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 5
      },
      "lineNbr": 142,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-08T18:15:57Z",
      "side": 1,
      "message": "all the one argument ctors should be marked `explicit`\n\nmaybe better to omit the `int` version and force callers to convert to `unique_fd` first, but either way is probably OK as long as it is marked `explicit`",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e2c4d2b_bf272318",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 5
      },
      "lineNbr": 142,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-08T20:42:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5993a45b_6073c371",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95ce0efa_fa0e84c5",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 5
      },
      "lineNbr": 142,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-10T03:04:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4e2c4d2b_bf272318",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a879a5ec_b707b88c",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 5
      },
      "lineNbr": 142,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-12T17:34:39Z",
      "side": 1,
      "message": "Can you add `explicit` still?\n\n```\n    explicit RpcSocket(int _fd) : fd(_fd), pollingCount(0) {}\n\n    explicit RpcSocket(base::unique_fd \u0026\u0026_fd) : fd(std::move(_fd)), pollingCount(0) {}\n```",
      "parentUuid": "95ce0efa_fa0e84c5",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf1207bd_185d0ac2",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 5
      },
      "lineNbr": 142,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-15T21:00:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a879a5ec_b707b88c",
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b97ea4f_8686e4bc",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 5
      },
      "lineNbr": 146,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-08T18:15:57Z",
      "side": 1,
      "message": "i think you can omit the `noexcept`s, exceptions are globally disabled IIUC",
      "range": {
        "startLine": 146,
        "startChar": 36,
        "endLine": 146,
        "endChar": 44
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89f3fed9_0aec200a",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 5
      },
      "lineNbr": 146,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-08T20:42:17Z",
      "side": 1,
      "message": "This was added because for some of the configurations, its treated as error not having a move constructor with noexcept.",
      "parentUuid": "8b97ea4f_8686e4bc",
      "range": {
        "startLine": 146,
        "startChar": 36,
        "endLine": 146,
        "endChar": 44
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a85edad_9340faf1",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 5
      },
      "lineNbr": 146,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-08T20:59:28Z",
      "side": 1,
      "message": "Ah, never ran into that before. Nevermind then.",
      "parentUuid": "89f3fed9_0aec200a",
      "range": {
        "startLine": 146,
        "startChar": 36,
        "endLine": 146,
        "endChar": 44
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12a19b85_eae0a053",
        "filename": "libs/binder/tests/binderRpcTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1945,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-08T18:14:26Z",
      "side": 1,
      "message": "also add an \u0027isWaiting\u0027 here? (even if we only check the output is false)",
      "range": {
        "startLine": 1945,
        "startChar": 7,
        "endLine": 1945,
        "endChar": 23
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10b67449_eeeedf86",
        "filename": "libs/binder/tests/binderRpcTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1945,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-08T20:42:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "12a19b85_eae0a053",
      "range": {
        "startLine": 1945,
        "startChar": 7,
        "endLine": 1945,
        "endChar": 23
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1e30677_774979a0",
        "filename": "libs/binder/tests/binderRpcTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1945,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-11T23:53:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "10b67449_eeeedf86",
      "range": {
        "startLine": 1945,
        "startChar": 7,
        "endLine": 1945,
        "endChar": 23
      },
      "revId": "afe51a62cdfd4b750125ca2859a817b4a6cba4b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}