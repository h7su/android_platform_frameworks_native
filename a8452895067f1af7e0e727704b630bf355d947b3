{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "374e78c3_deaa3acb",
        "filename": "libs/binder/RpcServer.cpp",
        "patchSetId": 10
      },
      "lineNbr": 182,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-04-26T00:52:05Z",
      "side": 1,
      "message": "Can we avoid the extra allocations?\n\nConsider:\n\n    union RpcAddressStorage {\n        sockaddr_storage ...;\n        foo ...;\n        bar ...;\n    };",
      "range": {
        "startLine": 182,
        "startChar": 0,
        "endLine": 182,
        "endChar": 43
      },
      "revId": "a8452895067f1af7e0e727704b630bf355d947b3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1660d95c_c7c8fcd7",
        "filename": "libs/binder/RpcServer.cpp",
        "patchSetId": 10
      },
      "lineNbr": 182,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-04-26T01:14:38Z",
      "side": 1,
      "message": "The problem with that approach is it still puts an upper bound on the size of address, determined by the set of all known address kinds. That\u0027s not exactly generic (the problem wasn\u0027t Trusty anyway, its UUID addresses fit in the existing sockaddr_storage).\n\nThe other goal was to stop having to include \u003csys/socket.h\u003e (which is problematic on Trusty).",
      "parentUuid": "374e78c3_deaa3acb",
      "range": {
        "startLine": 182,
        "startChar": 0,
        "endLine": 182,
        "endChar": 43
      },
      "revId": "a8452895067f1af7e0e727704b630bf355d947b3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3af43e74_29ca1416",
        "filename": "libs/binder/RpcServer.cpp",
        "patchSetId": 10
      },
      "lineNbr": 182,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-04-26T21:33:54Z",
      "side": 1,
      "message": "One think we could do is pick a constant RPC_MAX_ADDRESS_SIZE here, e.g. 128, and use std::array\u003cuint8_t, RPC_MAX_ADDRESS_SIZE\u003e with a static_assert for every concrete address type (like sockaddr_storage).",
      "parentUuid": "1660d95c_c7c8fcd7",
      "range": {
        "startLine": 182,
        "startChar": 0,
        "endLine": 182,
        "endChar": 43
      },
      "revId": "a8452895067f1af7e0e727704b630bf355d947b3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d60d5105_e77eb665",
        "filename": "libs/binder/RpcServer.cpp",
        "patchSetId": 10
      },
      "lineNbr": 182,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-04-26T23:45:23Z",
      "side": 1,
      "message": "I picked 128 randomly but it turns out that\u0027s exactly the size of sockaddr_storage. We really could replace it with a `std::array\u003cuint8_t, 128\u003e`.",
      "parentUuid": "3af43e74_29ca1416",
      "range": {
        "startLine": 182,
        "startChar": 0,
        "endLine": 182,
        "endChar": 43
      },
      "revId": "a8452895067f1af7e0e727704b630bf355d947b3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d807f29_7d943f3e",
        "filename": "libs/binder/RpcServer.cpp",
        "patchSetId": 10
      },
      "lineNbr": 182,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-04-27T17:32:41Z",
      "side": 1,
      "message": "Missing CL upload?",
      "parentUuid": "d60d5105_e77eb665",
      "range": {
        "startLine": 182,
        "startChar": 0,
        "endLine": 182,
        "endChar": 43
      },
      "revId": "a8452895067f1af7e0e727704b630bf355d947b3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d049d11a_68974a77",
        "filename": "libs/binder/libbinder_rpc_unstable.cpp",
        "patchSetId": 10
      },
      "lineNbr": 44,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-04-26T00:52:05Z",
      "side": 1,
      "message": "these are now potential UAF\n\none qq - could we use std::any?",
      "range": {
        "startLine": 43,
        "startChar": 33,
        "endLine": 44,
        "endChar": 51
      },
      "revId": "a8452895067f1af7e0e727704b630bf355d947b3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81803107_3a0d5bfc",
        "filename": "libs/binder/libbinder_rpc_unstable.cpp",
        "patchSetId": 10
      },
      "lineNbr": 44,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-04-26T00:54:24Z",
      "side": 1,
      "message": "s/UAF/OOR/\n\nstd::any would also probably not work here, b/c heap",
      "parentUuid": "d049d11a_68974a77",
      "range": {
        "startLine": 43,
        "startChar": 33,
        "endLine": 44,
        "endChar": 51
      },
      "revId": "a8452895067f1af7e0e727704b630bf355d947b3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}