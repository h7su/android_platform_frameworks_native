{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8edaecc7_07ab1084",
        "filename": "libs/binder/OS_unix_base.cpp",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T01:36:01Z",
      "side": 1,
      "message": "std::string* out? keep the error strings?",
      "range": {
        "startLine": 32,
        "startChar": 32,
        "endLine": 36,
        "endChar": 45
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c02f079_bf5f744d",
        "filename": "libs/binder/OS_unix_base.cpp",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-03T19:16:30Z",
      "side": 1,
      "message": "Yeah, I felt bad writing this... How about alternative: since this is just implementation detail of libbinder, I\u0027ll just implement a very simple android::base::Result alternative local to Binder. Something like:\n```\nclass Result\u003cT\u003e {\n  std::variant\u003cT, std::string\u003e mValOrError;\n  ...\n};\n```",
      "parentUuid": "8edaecc7_07ab1084",
      "range": {
        "startLine": 32,
        "startChar": 32,
        "endLine": 36,
        "endChar": 45
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5075c155_5b25c9bc",
        "filename": "libs/binder/OS_unix_base.cpp",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T19:31:24Z",
      "side": 1,
      "message": "We could switch to std::expected and use that directly when C++23 comes around, but I think it\u0027s simpler to have a string output, rather than yet another Result type.\n\nCustom error handling for a library is okay, but it raises the barrier of entry for someone to understand the code. status_t/std::string will be obvious. std::expected later will be obvious, but this would be one more file someone would have to open to learn the intricacies of, and worse, they might read it and assume it\u0027s another Result\u003c\u003e",
      "parentUuid": "2c02f079_bf5f744d",
      "range": {
        "startLine": 32,
        "startChar": 32,
        "endLine": 36,
        "endChar": 45
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1dc2da6_29ec7626",
        "filename": "libs/binder/OS_unix_base.cpp",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-03T19:55:14Z",
      "side": 1,
      "message": "This actually sound nice - I just checked and `std::expected` is already available on some compilers. Moreover, `android::base::Result` is a typedef of `android::base::expected` which is a drop-in reimplementation of `std::expected`.\n\nHow about this:\n1. Implement local expected.h which would include expected implementations in order:\n   - `\u003cexpected\u003e`\n   - `\u003candroid-base/expected.h\u003e`\n   - local super simple implementation of expected if the two above are not present\n2. Once C++23 gets widely supported, drop local `expected.h` and move to `\u003cexpected\u003e`",
      "parentUuid": "5075c155_5b25c9bc",
      "range": {
        "startLine": 32,
        "startChar": 32,
        "endLine": 36,
        "endChar": 45
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b90e044e_97b1e79c",
        "filename": "libs/binder/OS_unix_base.cpp",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T19:57:00Z",
      "side": 1,
      "message": "Keep it simple? Don\u0027t add new abstraction layers? It\u0027s only a couple functions that need it. libbase Result is already based on a copy of expected ðŸ˜Š",
      "parentUuid": "d1dc2da6_29ec7626",
      "range": {
        "startLine": 32,
        "startChar": 32,
        "endLine": 36,
        "endChar": 45
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ebf2bc2_90700ef8",
        "filename": "libs/binder/OS_unix_base.cpp",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-03T19:59:28Z",
      "side": 1,
      "message": "That\u0027s what I mean. Just use `expected` directly and provide its implementation depending on what\u0027s available on a given platform.",
      "parentUuid": "b90e044e_97b1e79c",
      "range": {
        "startLine": 32,
        "startChar": 32,
        "endLine": 36,
        "endChar": 45
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dba56f1_d959de61",
        "filename": "libs/binder/OS_unix_base.cpp",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T20:05:07Z",
      "side": 1,
      "message": "Providing a support implementation of std::expected is the problem I\u0027m having :) Not to mention - it will increase the size of libbinder with static c++ which we still need to optimize.\n\nCan we do the thing that requires less code? We are really talking about a couple of functions here. Most of them should just log unconditionally (because they are only called once and the client would just log the string).",
      "parentUuid": "1ebf2bc2_90700ef8",
      "range": {
        "startLine": 32,
        "startChar": 32,
        "endLine": 36,
        "endChar": 45
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55b4a593_2b9dbe72",
        "filename": "libs/binder/OS_unix_base.cpp",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-03T20:16:43Z",
      "side": 1,
      "message": "But this would only affect Linux Binder on systems without full C++23. Android would still use current support implementation. And the last-resort implementation would be super simple (std::variant based).\n\nIf you really want not going std::expected way, I\u0027d need to log unconditionally in OS_unix_base.cpp ProcessState.cpp and figure out what to do with `android::execute` (log unconditionally there too?).",
      "parentUuid": "9dba56f1_d959de61",
      "range": {
        "startLine": 32,
        "startChar": 32,
        "endLine": 36,
        "endChar": 45
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a156916_41028c05",
        "filename": "libs/binder/OS_unix_base.cpp",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T20:20:18Z",
      "side": 1,
      "message": "With static libc++ and --gc-sections, the number of classes from libc++ used will impact the size of libbinder for embedded systems, so it is also preferable to use less things total.\n\nCan you log unconditionally where the callers of the function would just log, otherwise return the error information for the caller to handle, e.g. with std::string* out? \u0027std::string* out\u0027 or similar? Or, make one CL to log unconditionally wherever we can do that, and we can look at the output case separately, if you\u0027d prefer that?",
      "parentUuid": "55b4a593_2b9dbe72",
      "range": {
        "startLine": 32,
        "startChar": 32,
        "endLine": 36,
        "endChar": 45
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf96af50_6f077fe1",
        "filename": "libs/binder/OS_unix_base.cpp",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-03T20:22:29Z",
      "side": 1,
      "message": "OK, let me try.",
      "parentUuid": "2a156916_41028c05",
      "range": {
        "startLine": 32,
        "startChar": 32,
        "endLine": 36,
        "endChar": 45
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac215187_852be338",
        "filename": "libs/binder/OS_unix_base.cpp",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-03T22:26:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf96af50_6f077fe1",
      "range": {
        "startLine": 32,
        "startChar": 32,
        "endLine": 36,
        "endChar": 45
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "764a5cd5_1c0eba10",
        "filename": "libs/binder/ProcessState.cpp",
        "patchSetId": 1
      },
      "lineNbr": 517,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T01:36:01Z",
      "side": 1,
      "message": "All these cases should log, I think, because it\u0027s only caused once, and we don\u0027t want to lose the error information here.",
      "range": {
        "startLine": 517,
        "startChar": 31,
        "endLine": 517,
        "endChar": 44
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "608ce0e2_73f66b0f",
        "filename": "libs/binder/ProcessState.cpp",
        "patchSetId": 1
      },
      "lineNbr": 517,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-03T22:26:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "764a5cd5_1c0eba10",
      "range": {
        "startLine": 517,
        "startChar": 31,
        "endLine": 517,
        "endChar": 44
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddfc165d_871c675c",
        "filename": "libs/binder/ProcessState.cpp",
        "patchSetId": 1
      },
      "lineNbr": 567,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T01:36:01Z",
      "side": 1,
      "message": "please avoid auto for this",
      "range": {
        "startLine": 567,
        "startChar": 4,
        "endLine": 567,
        "endChar": 8
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fca70120_81359f9c",
        "filename": "libs/binder/ProcessState.cpp",
        "patchSetId": 1
      },
      "lineNbr": 567,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-03T22:26:16Z",
      "side": 1,
      "message": "Done. But why?",
      "parentUuid": "ddfc165d_871c675c",
      "range": {
        "startLine": 567,
        "startChar": 4,
        "endLine": 567,
        "endChar": 8
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "574d6133_6bce7b80",
        "filename": "libs/binder/RpcServer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T01:36:01Z",
      "side": 1,
      "message": "nit: status_t, since we\u0027re touching this.",
      "range": {
        "startLine": 233,
        "startChar": 8,
        "endLine": 233,
        "endChar": 12
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db92b557_b9faf75e",
        "filename": "libs/binder/RpcServer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-03T22:26:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "574d6133_6bce7b80",
      "range": {
        "startLine": 233,
        "startChar": 8,
        "endLine": 233,
        "endChar": 12
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b635706_6b8e7df4",
        "filename": "libs/binder/RpcServer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 234,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T01:36:01Z",
      "side": 1,
      "message": "consider: statusToString(my_status_t).c_str()",
      "range": {
        "startLine": 234,
        "startChar": 43,
        "endLine": 234,
        "endChar": 57
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b03e681_84928d7c",
        "filename": "libs/binder/RpcServer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 234,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-03T22:26:16Z",
      "side": 1,
      "message": "Logging in setNonBlocking instead.",
      "parentUuid": "6b635706_6b8e7df4",
      "range": {
        "startLine": 234,
        "startChar": 43,
        "endLine": 234,
        "endChar": 57
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b9ab507_84c82f9b",
        "filename": "libs/binder/RpcSession.cpp",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T01:36:01Z",
      "side": 1,
      "message": "same",
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "938cc189_b5dc79ff",
        "filename": "libs/binder/RpcSession.cpp",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-11-03T22:26:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2b9ab507_84c82f9b",
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9368ce3e_1b10c473",
        "filename": "libs/binder/UtilsHost.cpp",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-03T01:36:01Z",
      "side": 1,
      "message": "same, keep errors, or log if appropriate",
      "range": {
        "startLine": 84,
        "startChar": 23,
        "endLine": 95,
        "endChar": 21
      },
      "revId": "233284589dba0a3b8cbb8746c1582414a059a80c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}