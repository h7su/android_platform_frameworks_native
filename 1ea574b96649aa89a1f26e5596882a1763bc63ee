{
  "comments": [
    {
      "key": {
        "uuid": "951a7b24_4e8624a4",
        "filename": "cmds/dumpstate/DumpstateService.cpp",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2019-02-18T18:43:21Z",
      "side": 1,
      "message": "doesn\u0027t the compiler warn about this ? I\u0027d also add a comment here that explains why this method has a seemingly odd signature.",
      "range": {
        "startLine": 53,
        "startChar": 4,
        "endLine": 53,
        "endChar": 19
      },
      "revId": "1ea574b96649aa89a1f26e5596882a1763bc63ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b956a32_286b248b",
        "filename": "cmds/dumpstate/DumpstateService.cpp",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2019-02-18T20:23:49Z",
      "side": 1,
      "message": "I didn\u0027t get the part about the odd signature..",
      "parentUuid": "951a7b24_4e8624a4",
      "range": {
        "startLine": 53,
        "startChar": 4,
        "endLine": 53,
        "endChar": 19
      },
      "revId": "1ea574b96649aa89a1f26e5596882a1763bc63ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbb7d751_5e37931b",
        "filename": "cmds/dumpstate/DumpstateService.cpp",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2019-02-19T12:45:06Z",
      "side": 1,
      "message": "If i was to read this method in isolation (with only the method level comment of \"Takes ownership of data\" i\u0027d question why it needs to return \"void *\" if it\u0027s going to unconditionally  exit(0) and return nothing.",
      "parentUuid": "6b956a32_286b248b",
      "range": {
        "startLine": 53,
        "startChar": 4,
        "endLine": 53,
        "endChar": 19
      },
      "revId": "1ea574b96649aa89a1f26e5596882a1763bc63ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3459eadb_e3ba17e9",
        "filename": "cmds/dumpstate/DumpstateService.cpp",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2019-02-19T13:16:16Z",
      "side": 1,
      "message": "I\u0027m not sure if this is the place to document the signature. Isn\u0027t it explained by pthread_create? \n\nBut I can document the behavior \u0026 rename it. Does this help?",
      "parentUuid": "cbb7d751_5e37931b",
      "range": {
        "startLine": 53,
        "startChar": 4,
        "endLine": 53,
        "endChar": 19
      },
      "revId": "1ea574b96649aa89a1f26e5596882a1763bc63ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dbc6145d_2d80919e",
        "filename": "cmds/dumpstate/DumpstateService.cpp",
        "patchSetId": 7
      },
      "lineNbr": 57,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2019-02-18T18:43:21Z",
      "side": 1,
      "message": "+maco: is this call synchronous ? i worry that it will go nowhere if it\u0027s handled on a different thread and races with exit(0). \n\nAlso, wouldn\u0027t we exit with a non-zero error code if this is an error condition ?\n\nAlso, I\u0027d suggest marking this as \"[[noreturn]]\".",
      "range": {
        "startLine": 57,
        "startChar": 4,
        "endLine": 57,
        "endChar": 34
      },
      "revId": "1ea574b96649aa89a1f26e5596882a1763bc63ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69800fc2_689cbaee",
        "filename": "cmds/dumpstate/DumpstateService.cpp",
        "patchSetId": 7
      },
      "lineNbr": 57,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2019-02-18T20:23:49Z",
      "side": 1,
      "message": "It\u0027s an async/oneway callback but I figured the part where it hands it over the call to binder is synchronous (excuse my made up terms). If that\u0027s not the case what\u0027s different about this compared to say\n\nlistener-\u003eonError()\nreturn;\n\nlike in 132?",
      "parentUuid": "dbc6145d_2d80919e",
      "range": {
        "startLine": 57,
        "startChar": 4,
        "endLine": 57,
        "endChar": 34
      },
      "revId": "1ea574b96649aa89a1f26e5596882a1763bc63ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c37b334_58e39044",
        "filename": "cmds/dumpstate/DumpstateService.cpp",
        "patchSetId": 7
      },
      "lineNbr": 57,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2019-02-19T08:12:59Z",
      "side": 1,
      "message": "This is a good point. The call would indeed be handed off synchronously to the kernel (even if the call itself is async); what happens from there is still dependent on the scheduler, though - both the async call and the process death notification will be queued to a process workqueue, and while there is a guarantee that the async call will be queued on a binder thread first (and that it will be delivered), there\u0027s not really a guarantee that that binder thread gets to run first (though in most cases, it likely will). So I think you\u0027re guaranteed to receive the async call, but you may see the death notification first.\n\nIf this makes the handling code in system_server complex, an alternative would be to not exit here, and instead have system_server wait for a listener return value, and use init to stop the service from system_server instead.",
      "parentUuid": "69800fc2_689cbaee",
      "range": {
        "startLine": 57,
        "startChar": 4,
        "endLine": 57,
        "endChar": 34
      },
      "revId": "1ea574b96649aa89a1f26e5596882a1763bc63ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ba44990_4413100b",
        "filename": "cmds/dumpstate/DumpstateService.cpp",
        "patchSetId": 7
      },
      "lineNbr": 57,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2019-02-19T10:52:34Z",
      "side": 1,
      "message": "System server currently does not register a death recipient. The callbacks are sufficient to pick up \"finished bugreport\" event, so death recipient is necessary only to relay dumpstate crashes to the user, which I plan to do at some point.\n\nSince we know that the onError() callback is guaranteed here, system server can figure out the race between async call vs death notification like Martijn suggested. I would rather not have system server tell init to stop the service because it makes the lifecycle management super spread out and hard to understand.\n\nThe other option is to make the callback synchronous. I think this is the best option (simplest for system server). Will do when I add a death recipient to system server.\n\nAlso re \"why is exit code 0\": because it\u0027s a binary that starts, waits for a request and processes it, then exits. To me, it is more meaningful to ascribe exit code to the success of \"binary starts\" part, since it may receive multiple requests and only one of them may succeed, so which success criteria should we use? WDYT?",
      "parentUuid": "8c37b334_58e39044",
      "range": {
        "startLine": 57,
        "startChar": 4,
        "endLine": 57,
        "endChar": 34
      },
      "revId": "1ea574b96649aa89a1f26e5596882a1763bc63ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "314a5a40_7b9bbd29",
        "filename": "cmds/dumpstate/DumpstateService.cpp",
        "patchSetId": 7
      },
      "lineNbr": 57,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2019-02-19T12:45:06Z",
      "side": 1,
      "message": "If it\u0027s a documented guarantee that the call will be handled over to the kernel synchronously, then i\u0027m OK with this. It still seems liable to break if the implementation changes, though.\n\nRe: How is it different from 132: by returning an error your\u0027re continuing to execute whichever binder thread the method is called on so the binder code can continue with whatever book-keeping it needs to do.",
      "parentUuid": "3ba44990_4413100b",
      "range": {
        "startLine": 57,
        "startChar": 4,
        "endLine": 57,
        "endChar": 34
      },
      "revId": "1ea574b96649aa89a1f26e5596882a1763bc63ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22b5a415_9464561a",
        "filename": "cmds/dumpstate/tests/dumpstate_smoke_test.cpp",
        "patchSetId": 7
      },
      "lineNbr": 52,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2019-02-18T18:43:21Z",
      "side": 1,
      "message": "what is this for ?",
      "range": {
        "startLine": 52,
        "startChar": 11,
        "endLine": 52,
        "endChar": 21
      },
      "revId": "1ea574b96649aa89a1f26e5596882a1763bc63ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "210ea91a_6a60ed5b",
        "filename": "cmds/dumpstate/tests/dumpstate_smoke_test.cpp",
        "patchSetId": 7
      },
      "lineNbr": 52,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2019-02-18T20:23:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22b5a415_9464561a",
      "range": {
        "startLine": 52,
        "startChar": 11,
        "endLine": 52,
        "endChar": 21
      },
      "revId": "1ea574b96649aa89a1f26e5596882a1763bc63ee",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}