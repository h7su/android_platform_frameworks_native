{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "eb15d2f3_de55c8c8",
        "filename": "libs/binder/RpcTransportRaw.cpp",
        "patchSetId": 6
      },
      "lineNbr": 94,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-12-13T18:44:39Z",
      "side": 1,
      "message": "nice! also note b/202878542 + b/203002492. The kernel will handle most of this complex logic for us, if you want. Though, super happy to get this in now instead!",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 94,
        "endChar": 51
      },
      "revId": "91a06a671e540cc2013e29633164f47fa05d45d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4dddd75_f08e6e31",
        "filename": "libs/binder/RpcTransportRaw.cpp",
        "patchSetId": 6
      },
      "lineNbr": 94,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2021-12-13T22:09:35Z",
      "side": 1,
      "message": "How would pwritev2() work here? The offset argument is the file offset, not the iovecs. How does that work with a socket? Wouldn\u0027t we need to advance the iovecs even with pwritev2?\n\nAnother question: is \"flags\" in pwritev2 the same as \"flags\" in sendmsg? It doesn\u0027t seem that way to me, from reading the pwritev2 man page.",
      "parentUuid": "eb15d2f3_de55c8c8",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 94,
        "endChar": 51
      },
      "revId": "91a06a671e540cc2013e29633164f47fa05d45d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81fc8b0a_27684536",
        "filename": "libs/binder/RpcTransportRaw.cpp",
        "patchSetId": 6
      },
      "lineNbr": 102,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-12-13T18:44:39Z",
      "side": 1,
      "message": "assert if processSize !\u003d 0 here?",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 102,
        "endChar": 47
      },
      "revId": "91a06a671e540cc2013e29633164f47fa05d45d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c07022c0_8af167fb",
        "filename": "libs/binder/RpcTransportRaw.cpp",
        "patchSetId": 6
      },
      "lineNbr": 102,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2021-12-13T22:09:35Z",
      "side": 1,
      "message": "From one of the other comments: should it be an assert() or LOG_ALWAYS_FATAL_IF()?",
      "parentUuid": "81fc8b0a_27684536",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 102,
        "endChar": 47
      },
      "revId": "91a06a671e540cc2013e29633164f47fa05d45d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7dfc11a5_65a2d583",
        "filename": "libs/binder/RpcTransportRaw.cpp",
        "patchSetId": 6
      },
      "lineNbr": 122,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-12-13T18:44:39Z",
      "side": 1,
      "message": "is it possible to refactor that with this or combine them?",
      "range": {
        "startLine": 122,
        "startChar": 13,
        "endLine": 122,
        "endChar": 37
      },
      "revId": "91a06a671e540cc2013e29633164f47fa05d45d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9faaacb2_685fca0d",
        "filename": "libs/binder/RpcTransportRaw.cpp",
        "patchSetId": 6
      },
      "lineNbr": 122,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2021-12-13T22:09:35Z",
      "side": 1,
      "message": "It should be (it looks like your CL did that), I didn\u0027t want to touch the receive code path in this CL but I could.",
      "parentUuid": "7dfc11a5_65a2d583",
      "range": {
        "startLine": 122,
        "startChar": 13,
        "endLine": 122,
        "endChar": 37
      },
      "revId": "91a06a671e540cc2013e29633164f47fa05d45d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed441ff2_a558e75c",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 6
      },
      "lineNbr": 61,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-12-13T18:44:39Z",
      "side": 1,
      "message": "even if we don\u0027t use it, we might as well make the APIs at parity now (if we only support reading or only support writing, aborting is okay",
      "range": {
        "startLine": 61,
        "startChar": 34,
        "endLine": 61,
        "endChar": 57
      },
      "revId": "91a06a671e540cc2013e29633164f47fa05d45d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f8cba10_0b633c40",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 6
      },
      "lineNbr": 70,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-12-13T18:44:39Z",
      "side": 1,
      "message": "nit: we can update the clients everywhere and avoid this extra layer. Explicitly construcing the iovecs there will make it more clear what is happening (especially as code is refactored).",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 70,
        "endChar": 0
      },
      "revId": "91a06a671e540cc2013e29633164f47fa05d45d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "184f62eb_5bb114b2",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 6
      },
      "lineNbr": 70,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-12-13T22:31:41Z",
      "side": 1,
      "message": "I suggested this to avoid updating the clients. Though, I suggested it also to avoid creating the std::vector, but it seems that in this patchset, the std::vector is still created any way.",
      "parentUuid": "5f8cba10_0b633c40",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 70,
        "endChar": 0
      },
      "revId": "91a06a671e540cc2013e29633164f47fa05d45d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}