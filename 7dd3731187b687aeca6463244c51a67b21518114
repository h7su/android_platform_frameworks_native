{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "09e557a9_0ea71dcf",
        "filename": "libs/binder/RpcSession.cpp",
        "patchSetId": 2
      },
      "lineNbr": 971,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-27T00:42:08Z",
      "side": 1,
      "message": "for outgoing connections, you might need to check that it is being used (otherwise it won\u0027t ever be polling IIUC)",
      "range": {
        "startLine": 971,
        "startChar": 48,
        "endLine": 971,
        "endChar": 70
      },
      "revId": "7dd3731187b687aeca6463244c51a67b21518114",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cd9d16e_0f0b2e78",
        "filename": "libs/binder/RpcSession.cpp",
        "patchSetId": 2
      },
      "lineNbr": 972,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-27T00:14:34Z",
      "side": 1,
      "message": "maybe should check `mWaitingThreads \u003d\u003d 0` as well",
      "revId": "7dd3731187b687aeca6463244c51a67b21518114",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7948cd64_66a48dbd",
        "filename": "libs/binder/RpcSession.cpp",
        "patchSetId": 2
      },
      "lineNbr": 972,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-29T18:42:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0cd9d16e_0f0b2e78",
      "revId": "7dd3731187b687aeca6463244c51a67b21518114",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a42a00b9_4c650627",
        "filename": "libs/binder/include/binder/RpcServer.h",
        "patchSetId": 2
      },
      "lineNbr": 194,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-27T00:14:34Z",
      "side": 1,
      "message": "maybe this should have a less technical definition and name, something like\n\n```\n// Whether any requests are currently being processed.\nbool hasActiveRequests();\n```\n\nsame for RpcSession, they can probably have the same name and comment\n\nwhether or not polling is enough to decide the fuzzer can stop might change in the future (there might not even be any polling)",
      "revId": "7dd3731187b687aeca6463244c51a67b21518114",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f979db2c_f41d2399",
        "filename": "libs/binder/include/binder/RpcServer.h",
        "patchSetId": 2
      },
      "lineNbr": 194,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-29T18:42:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a42a00b9_4c650627",
      "revId": "7dd3731187b687aeca6463244c51a67b21518114",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23440f0d_3bafe08e",
        "filename": "libs/binder/tests/rpc_fuzzer/main.cpp",
        "patchSetId": 2
      },
      "lineNbr": 168,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-27T00:14:34Z",
      "side": 1,
      "message": "is it possible for this to go into an infinite loop?\n\ni\u0027m imagining that\n\n1. client sends request\n2. server\u0027s `incoming[0]` handles it and then uses `outgoing[0]` to send a nested request back to the client\n3. client doesn\u0027t respond and doesn\u0027t hang up\n4. we hit this loop\n5. that thread on the server is blocked polling on `outgoing[0]`, but is not polling on `incoming[0]`",
      "revId": "7dd3731187b687aeca6463244c51a67b21518114",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "312d7077_ae93a148",
        "filename": "libs/binder/tests/rpc_fuzzer/main.cpp",
        "patchSetId": 2
      },
      "lineNbr": 168,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-27T00:42:08Z",
      "side": 1,
      "message": "actually in that case, it should reuse `incoming[0]` so there wouldn\u0027t be an issue. maybe it could happen if the server spawns a thread that makes a request back to the client and then joins that thread",
      "parentUuid": "23440f0d_3bafe08e",
      "revId": "7dd3731187b687aeca6463244c51a67b21518114",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fbf7928_ff61561e",
        "filename": "libs/binder/tests/rpc_fuzzer/main.cpp",
        "patchSetId": 2
      },
      "lineNbr": 168,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-27T01:00:49Z",
      "side": 1,
      "message": "Some more thoughts: The server can to arbitrary things. I\u0027m not expecting we\u0027ll necessarily handle all of them. Maybe we should put in a max wait time and possibly consider hitting the max to be a test failure then tackle cases as they arise.",
      "parentUuid": "312d7077_ae93a148",
      "revId": "7dd3731187b687aeca6463244c51a67b21518114",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b22d5d7_0214f8a9",
        "filename": "libs/binder/tests/rpc_fuzzer/main.cpp",
        "patchSetId": 2
      },
      "lineNbr": 168,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2022-08-29T18:42:30Z",
      "side": 1,
      "message": "IIUC, Libfuzzer monitors time for each input and dumps input if timeout occurs. I can add a condition variable which will wait for timeout or polling condition to occur, But I think putting up explicit timeout will be same as the problem that we are trying to solve here (Giving random time to server to finish processing). I can use the inputs generated by infrastructure to fix infinite wait issues.",
      "parentUuid": "0fbf7928_ff61561e",
      "revId": "7dd3731187b687aeca6463244c51a67b21518114",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}