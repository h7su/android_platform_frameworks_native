{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "18555b22_ce7010aa",
        "filename": "libs/binder/rust/src/parcel.rs",
        "patchSetId": 3
      },
      "lineNbr": 219,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-09-13T21:47:51Z",
      "side": 1,
      "message": "this will always succeed \u0027new AParcel\u0027 in Android will throw an exception on failure, and since exceptions are disabled, this will be a crash",
      "range": {
        "startLine": 219,
        "startChar": 29,
        "endLine": 219,
        "endChar": 43
      },
      "revId": "308a98481a034a72660f773422ca551e551048d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13a91303_30dcb851",
        "filename": "libs/binder/rust/src/parcel.rs",
        "patchSetId": 3
      },
      "lineNbr": 219,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2021-09-13T22:18:05Z",
      "side": 1,
      "message": "I changed the comment.",
      "parentUuid": "18555b22_ce7010aa",
      "range": {
        "startLine": 219,
        "startChar": 29,
        "endLine": 219,
        "endChar": 43
      },
      "revId": "308a98481a034a72660f773422ca551e551048d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e499bcb_e4b96478",
        "filename": "libs/binder/rust/src/parcel.rs",
        "patchSetId": 3
      },
      "lineNbr": 219,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2021-09-13T22:42:43Z",
      "side": 1,
      "message": "\u003e this will always succeed \u0027new AParcel\u0027 in Android will throw an exception on failure, and since exceptions are disabled, this will be a crash\n\nIsn\u0027t libbinder(_rs) supporting \"host\"(non-Android)?",
      "parentUuid": "13a91303_30dcb851",
      "range": {
        "startLine": 219,
        "startChar": 29,
        "endLine": 219,
        "endChar": 43
      },
      "revId": "308a98481a034a72660f773422ca551e551048d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "914fda6a_37ae63d6",
        "filename": "libs/binder/rust/src/parcel.rs",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2021-09-13T12:08:38Z",
      "side": 1,
      "message": "I think this belongs to AParcel_appendFrom. https://cs.android.com/android/platform/superproject/+/master:frameworks/native/libs/binder/ndk/parcel.cpp;l\u003d667-669\n\nSteven, wdyt?",
      "range": {
        "startLine": 228,
        "startChar": 0,
        "endLine": 233,
        "endChar": 9
      },
      "revId": "308a98481a034a72660f773422ca551e551048d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc7cfd31_4971c1f3",
        "filename": "libs/binder/rust/src/parcel.rs",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2021-09-13T12:11:55Z",
      "side": 1,
      "message": "On a second thought, C++ Parcel::appendFrom will catch this, right? Extra checking in AParcel_appendFrom() won\u0027t hurt though.",
      "parentUuid": "914fda6a_37ae63d6",
      "range": {
        "startLine": 228,
        "startChar": 0,
        "endLine": 233,
        "endChar": 9
      },
      "revId": "308a98481a034a72660f773422ca551e551048d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd593313_08dd5c92",
        "filename": "libs/binder/rust/src/parcel.rs",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2021-09-13T21:44:21Z",
      "side": 1,
      "message": "Just checked both functions, AParcel_appendFrom is\n```\nbinder_status_t AParcel_appendFrom(const AParcel* from, AParcel* to, int32_t start, int32_t size) {\n    status_t status \u003d to-\u003eget()-\u003eappendFrom(from-\u003eget(), start, size);\n    return PruneStatusT(status);\n}\n```\nand the relevant parts of Parcel::appendFrom are\n```\nstatus_t Parcel::appendFrom(const Parcel *parcel, size_t offset, size_t len) {\n...\n    // range checks against the source parcel size\n    if ((offset \u003e parcel-\u003emDataSize)\n            || (len \u003e parcel-\u003emDataSize)\n            || (offset + len \u003e parcel-\u003emDataSize)) {\n        return BAD_VALUE;\n    }\n```\n\nFor a negative start/size passed to AParcel_appendFrom as a negative int32_t, the value gets implicitly converted to a really large unsigned size_t when passed to Parcel::appendFrom. This large size_t will fail one of the range checks unless parcel-\u003emDataSize is also a big value (on a 64-bit machine it would have to be at least 0x8000000000000000, so unlikely to happen). Do we want to rely on this behavior, or add explicit checks to AParcel_appendFrom?",
      "parentUuid": "fc7cfd31_4971c1f3",
      "range": {
        "startLine": 228,
        "startChar": 0,
        "endLine": 233,
        "endChar": 9
      },
      "revId": "308a98481a034a72660f773422ca551e551048d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b0fbe6b_0af7ead4",
        "filename": "libs/binder/rust/src/parcel.rs",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2021-09-13T22:40:11Z",
      "side": 1,
      "message": "Yeah, that\u0027s what I saw. Adding explicit checks in AParcel_appendFrom or not, we don\u0027t need extra check here, right?",
      "parentUuid": "fd593313_08dd5c92",
      "range": {
        "startLine": 228,
        "startChar": 0,
        "endLine": 233,
        "endChar": 9
      },
      "revId": "308a98481a034a72660f773422ca551e551048d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8e3ae3c_d1919eb2",
        "filename": "libs/binder/rust/src/parcel.rs",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2021-09-14T00:44:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b0fbe6b_0af7ead4",
      "range": {
        "startLine": 228,
        "startChar": 0,
        "endLine": 233,
        "endChar": 9
      },
      "revId": "308a98481a034a72660f773422ca551e551048d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35f58105_f9a4bd1d",
        "filename": "libs/binder/rust/src/parcel.rs",
        "patchSetId": 3
      },
      "lineNbr": 688,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2021-09-13T12:08:38Z",
      "side": 1,
      "message": "We\u0027re missing valid case of append_from where (start \u003e 0).\nHow about calling parcel3.append_from(\u0026parcel1, 2, 2) after this line and check if read::\u003ci32\u003e works fine.",
      "range": {
        "startLine": 688,
        "startChar": 0,
        "endLine": 688,
        "endChar": 60
      },
      "revId": "308a98481a034a72660f773422ca551e551048d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e01e266_d8ca9ece",
        "filename": "libs/binder/rust/src/parcel.rs",
        "patchSetId": 3
      },
      "lineNbr": 688,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2021-09-13T22:18:05Z",
      "side": 1,
      "message": "I added a separate check for this, and left the old test in too (wanted to have a check for NOT_ENOUGH_DATA).",
      "parentUuid": "35f58105_f9a4bd1d",
      "range": {
        "startLine": 688,
        "startChar": 0,
        "endLine": 688,
        "endChar": 60
      },
      "revId": "308a98481a034a72660f773422ca551e551048d3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}