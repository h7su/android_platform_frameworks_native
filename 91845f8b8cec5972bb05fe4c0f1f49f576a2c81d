{
  "comments": [
    {
      "key": {
        "uuid": "5f34c006_2423dc44",
        "filename": "include/input/InputTransport.h",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-05-27T12:51:58Z",
      "side": 1,
      "message": "Doesn\u0027t this line guarantee that Key, Motion \u0026 Finished are 8 byte aligned ? Also, this method of aligning structs is different from the __attribute__ we are adding below.\n\nI\u0027d prefer to use __attribute__((aligned(8)) throughout and remove \"padding\" here.\n\n(The use of padding here was incorrect anyway, since it doesn\u0027t really force 8 byte alignment unless InputMessage itself was 8 byte aligned...)",
      "revId": "91845f8b8cec5972bb05fe4c0f1f49f576a2c81d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f34c006_8418e809",
        "filename": "include/input/InputTransport.h",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-05-27T12:51:58Z",
      "side": 1,
      "message": "Is it possible to move this to the union declaration (so that all variants of the union are 8 bytes aligned ?) or is that not allowed ?\n\nAlso, IIRC - the fact that eventTime is aligned(8) implies that the compiler will apply that alignment to Key as well.\n\nIt\u0027s probably better to leave this as is for clarity.",
      "revId": "91845f8b8cec5972bb05fe4c0f1f49f576a2c81d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fa47888_09c62d27",
        "filename": "include/input/InputTransport.h",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-05-27T12:51:58Z",
      "side": 1,
      "message": "please revert this change",
      "revId": "91845f8b8cec5972bb05fe4c0f1f49f576a2c81d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}