{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7647a2e7_da7bcd1c",
        "filename": "libs/binder/include/binder/LazyServiceRegistrar.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-05-14T01:41:58Z",
      "side": 1,
      "message": "Hmm, but this means that the caller has to explicitly start the service before calling getService, which is annoying and also easy to forget. What is the benefit of using ctl.start compared to registering it as a lazy service?",
      "range": {
        "startLine": 58,
        "startChar": 8,
        "endLine": 58,
        "endChar": 70
      },
      "revId": "cbdfad5265989bbf155acc603fe4a91d7fee4fcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b0d7640_06151ee1",
        "filename": "libs/binder/include/binder/LazyServiceRegistrar.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-05-14T02:05:19Z",
      "side": 1,
      "message": "Please see \"PSA: lazy services should be short lived - we need to avoid only doing late start\". Essentially, using lazy services for services which don\u0027t shut down mean that services will be started late (e.g. when an app uses a certain use case) and will essentially leak. We want services to be started at boot OR have temporary lifetimes.",
      "parentUuid": "7647a2e7_da7bcd1c",
      "range": {
        "startLine": 58,
        "startChar": 8,
        "endLine": 58,
        "endChar": 70
      },
      "revId": "cbdfad5265989bbf155acc603fe4a91d7fee4fcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7dc2af2_7401f168",
        "filename": "libs/binder/include/binder/LazyServiceRegistrar.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-05-14T02:14:42Z",
      "side": 1,
      "message": "Yeah, I saw the PSA, but I seem to agree with what Greg said.\n\nPerhaps we might want to remove this function, and instead add a new function like `keepAliveFor(duration t)` (which should definitely have a maximum allowed duration).\n\nThat\u0027s out of scope of this CL.",
      "parentUuid": "9b0d7640_06151ee1",
      "range": {
        "startLine": 58,
        "startChar": 8,
        "endLine": 58,
        "endChar": 70
      },
      "revId": "cbdfad5265989bbf155acc603fe4a91d7fee4fcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf1b904a_dd055006",
        "filename": "libs/binder/include/binder/LazyServiceRegistrar.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-05-14T02:18:12Z",
      "side": 1,
      "message": "I mean - me too. By \u0027short lived\u0027 I meant temporary, even if it\u0027s for a long amount of time. This is reflected in the documentation here.\n\nerr - but also errorprone. apexd for instance needs to be up until certain tasks are completed. This isn\u0027t just for availability is it?",
      "parentUuid": "b7dc2af2_7401f168",
      "range": {
        "startLine": 58,
        "startChar": 8,
        "endLine": 58,
        "endChar": 70
      },
      "revId": "cbdfad5265989bbf155acc603fe4a91d7fee4fcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e721ed11_79452758",
        "filename": "libs/binder/include/binder/LazyServiceRegistrar.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-05-14T02:32:33Z",
      "side": 1,
      "message": "My point was that calling `forcePersist(false)` is not guaranteed; people don\u0027t read documents.\n\nIf a certain task didn\u0027t finish within the duration of time that was initially estimated, the service could extend the duration by calling the function again. We could perhaps add a callback interface which is called just before the service is about to be killed. Then the service implementer can do something like extending the duration in the callback function. This will make having a truly persistent (but lazily starting) service much harder to implement, which I think is a good thing.",
      "parentUuid": "cf1b904a_dd055006",
      "range": {
        "startLine": 58,
        "startChar": 8,
        "endLine": 58,
        "endChar": 70
      },
      "revId": "cbdfad5265989bbf155acc603fe4a91d7fee4fcd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}