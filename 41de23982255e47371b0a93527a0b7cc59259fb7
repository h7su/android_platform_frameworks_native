{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e44ba259_dfeb9851",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 6
      },
      "lineNbr": 678,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2021-01-13T00:18:04Z",
      "side": 1,
      "message": "why is global ordering trying to be established and what does that mean instead of just an equality check?\n\nIf global ordering is for some reason desired, this should be a cmp equivalent. lt is inherently not useful.",
      "range": {
        "startLine": 678,
        "startChar": 0,
        "endLine": 678,
        "endChar": 59
      },
      "revId": "41de23982255e47371b0a93527a0b7cc59259fb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "484d0575_fe3f30b9",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 6
      },
      "lineNbr": 678,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2021-01-13T00:31:35Z",
      "side": 1,
      "message": "or more specifically, isn\u0027t equality more useful than ordering? why can i sort this but not see if it\u0027s the same?",
      "parentUuid": "e44ba259_dfeb9851",
      "range": {
        "startLine": 678,
        "startChar": 0,
        "endLine": 678,
        "endChar": 59
      },
      "revId": "41de23982255e47371b0a93527a0b7cc59259fb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbc92a35_1bb6ab4e",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 6
      },
      "lineNbr": 678,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-01-13T02:31:18Z",
      "side": 1,
      "message": "The fun answer is: why does std::map require operator\u003c to be implemented (or more generally its key_compare is a binary operation), but it supports looking up specific elements, and people consider it to be useful?\n\nPerhaps this deserves more examples, but the C++ standards committee used this terminology first: https://en.cppreference.com/w/cpp/concepts/totally_ordered\n\nSpecifically, since I say \u0027total ordering\u0027, this implies that if !AIBinder_lt(a, b) \u0026\u0026 !AIBinder_lt(b, a)), then a and b are the same binder object.",
      "parentUuid": "484d0575_fe3f30b9",
      "range": {
        "startLine": 678,
        "startChar": 0,
        "endLine": 678,
        "endChar": 59
      },
      "revId": "41de23982255e47371b0a93527a0b7cc59259fb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fac9aa98_0604253e",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 6
      },
      "lineNbr": 681,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-01-12T02:48:11Z",
      "side": 1,
      "message": "AIBinder_weak?",
      "range": {
        "startLine": 681,
        "startChar": 12,
        "endLine": 681,
        "endChar": 20
      },
      "revId": "41de23982255e47371b0a93527a0b7cc59259fb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91ce1037_fe7f2d08",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 6
      },
      "lineNbr": 681,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-01-12T18:06:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fac9aa98_0604253e",
      "range": {
        "startLine": 681,
        "startChar": 12,
        "endLine": 681,
        "endChar": 20
      },
      "revId": "41de23982255e47371b0a93527a0b7cc59259fb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}