{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "05bde5f1_69a65151",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1810984
      },
      "writtenOn": "2021-01-09T12:53:53Z",
      "side": 1,
      "message": "Should we replace it with \"snapshot the trace into a fixed path (/data/misc/perfetto-traces/bugreport/systrace.pftrace).\"?",
      "range": {
        "startLine": 12,
        "startChar": 5,
        "endLine": 13,
        "endChar": 47
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee1b4c36_c22d715b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1810984
      },
      "writtenOn": "2021-01-10T05:02:25Z",
      "side": 1,
      "message": "Reference:\nhttps://screenshot.googleplex.com/BB8xtjiNZW4Xzo7",
      "parentUuid": "05bde5f1_69a65151",
      "range": {
        "startLine": 12,
        "startChar": 5,
        "endLine": 13,
        "endChar": 47
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd92bb69_9f8f4c35",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-11T14:59:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ee1b4c36_c22d715b",
      "range": {
        "startLine": 12,
        "startChar": 5,
        "endLine": 13,
        "endChar": 47
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d66daf9_b9c2e0ab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-07T17:24:45Z",
      "side": 1,
      "message": "+nandana PTAL",
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d957232_b193859d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-07T20:00:49Z",
      "side": 1,
      "message": "+Colin FYI",
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ada099f2_b173c76d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-08T15:59:13Z",
      "side": 1,
      "message": "Thanks for the review. replies inline",
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c922aac3_64c82d4d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2021-01-08T17:59:13Z",
      "side": 1,
      "message": "+rhedjao for a look",
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5097627_5723bdc2",
        "filename": "cmds/dumpstate/DumpstateUtil.cpp",
        "patchSetId": 4
      },
      "lineNbr": 329,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2021-01-08T18:32:04Z",
      "side": 1,
      "message": "can we rename to ShouldCloseAllFileDescriptorsOnExec or something like that, parallel to O_CLOEXEC?",
      "range": {
        "startLine": 329,
        "startChar": 20,
        "endLine": 329,
        "endChar": 49
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "391d5a46_56a7eddf",
        "filename": "cmds/dumpstate/DumpstateUtil.cpp",
        "patchSetId": 4
      },
      "lineNbr": 329,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-11T14:59:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f5097627_5723bdc2",
      "range": {
        "startLine": 329,
        "startChar": 20,
        "endLine": 329,
        "endChar": 49
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e9e759c_7f7f425c",
        "filename": "cmds/dumpstate/DumpstateUtil.cpp",
        "patchSetId": 4
      },
      "lineNbr": 345,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2021-01-08T15:46:26Z",
      "side": 1,
      "message": "I\u0027m a little lost here..\n\nI understand wanting to handle O_CLOEXEC here, but how do we know we are done with the fds? \n\nAlso possibly a more naive question, what if dumpstate had not opened these fds?",
      "range": {
        "startLine": 330,
        "startChar": 11,
        "endLine": 345,
        "endChar": 25
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f4a3103_b9e06737",
        "filename": "cmds/dumpstate/DumpstateUtil.cpp",
        "patchSetId": 4
      },
      "lineNbr": 345,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-08T15:59:13Z",
      "side": 1,
      "message": "There are two parts here:\n\u003e  but how do we know we are done with the fds? \n\nWe don\u0027t really, we just assume that it\u0027s unlinkely dumpstate (or anything else) will open more than 1000 fds. 1000 is quite arbitrary here but I need to pick a number.\n\n\u003eAlso possibly a more naive question, what if dumpstate had not opened these fds?\n\nclose() will vail with EBADF, signalling that FD number was never open. effectively is a no-op. As I wrote in the comment, there is a cleaner way to do this by iterating through the /proc/self/fd, but not in a fork()-ed context, because that way allocates.\nThis is what many other projects do in a similar context, e.g.:\nhttps://cs.android.com/search?q\u003dfork%5C(%20%5Cbfor%5Cs*%5C(.*%5Cn%5Cs*close%5C(%20%20pcre:yes%20case:yes",
      "parentUuid": "3e9e759c_7f7f425c",
      "range": {
        "startLine": 330,
        "startChar": 11,
        "endLine": 345,
        "endChar": 25
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a36abf9_65d0bcba",
        "filename": "cmds/dumpstate/DumpstateUtil.cpp",
        "patchSetId": 4
      },
      "lineNbr": 345,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2021-01-08T17:59:13Z",
      "side": 1,
      "message": "\u003e We don\u0027t really, we just assume that it\u0027s unlinkely dumpstate (or anything else) will open more than 1000 fds. 1000 is quite arbitrary here but I need to pick a number.\n\nI meant that how do we know dumpstate is not finished with these fds that are being closed? We have a lot of parallel tasks working here, so is it not possible this could close fds still in use?",
      "parentUuid": "6f4a3103_b9e06737",
      "range": {
        "startLine": 330,
        "startChar": 11,
        "endLine": 345,
        "endChar": 25
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc45c3cd_0e2cd56d",
        "filename": "cmds/dumpstate/DumpstateUtil.cpp",
        "patchSetId": 4
      },
      "lineNbr": 345,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-08T18:03:11Z",
      "side": 1,
      "message": "oh but here we are not in dumpstate anymore, we are in the forked child process (in the pid\u003d\u003d0 part of the branch). At this point this is a copy of dumpstate, where the FD table has been snapshotted, which is about to transition into a new process image with the exec() below.\nThere are no threads here and anything else that dumpstate does concurrently is irrelevant reached the fork() point.",
      "parentUuid": "2a36abf9_65d0bcba",
      "range": {
        "startLine": 330,
        "startChar": 11,
        "endLine": 345,
        "endChar": 25
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e41750e7_2e87e873",
        "filename": "cmds/dumpstate/DumpstateUtil.cpp",
        "patchSetId": 4
      },
      "lineNbr": 345,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2021-01-08T18:32:04Z",
      "side": 1,
      "message": "got it, thanks for the explanation.\n\nApparently there is a clang-tidy linter that can catch fd leaks over forking - we should look into enabling it. +Gavin",
      "parentUuid": "cc45c3cd_0e2cd56d",
      "range": {
        "startLine": 330,
        "startChar": 11,
        "endLine": 345,
        "endChar": 25
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94a0de3e_a81f4d4f",
        "filename": "cmds/dumpstate/DumpstateUtil.cpp",
        "patchSetId": 4
      },
      "lineNbr": 345,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-11T14:59:56Z",
      "side": 1,
      "message": "FYI we use clang-tidy in perfetto (a member of my team seem to like it). My experience is lukewarm: IMHO the signal/noise is a bit low (finds a lot of irrelevant stuff together with useful bits). For the case of FD leaks, I don\u0027t think it can catch all of them systematically. There are too many subtle issues where this can happen (e.g. inheriting a FD via binder or simply through some other library call) and clang-tidy can\u0027t possibly know them all.\n\nThe issue with leaking FD is not the leak itself (At the end, that would not be the end of the world). The problem is that when executing something that has different selinux domain and a auto-trans-on-exec rule, that causes a failure in the exec (because the leaked FD violates SElinux ACLs).\nSo I don\u0027t know a better way than being conservative and closing all (like we do somewhere else in our codebase)",
      "parentUuid": "e41750e7_2e87e873",
      "range": {
        "startLine": 330,
        "startChar": 11,
        "endLine": 345,
        "endChar": 25
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "006f0ffa_3a05e5e4",
        "filename": "cmds/dumpstate/DumpstateUtil.h",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2021-01-08T15:46:26Z",
      "side": 1,
      "message": "won\u0027t this affect the currently in progress stdio redirections?",
      "range": {
        "startLine": 116,
        "startChar": 75,
        "endLine": 117,
        "endChar": 69
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ab7d2f2_867c237b",
        "filename": "cmds/dumpstate/DumpstateUtil.h",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-08T15:59:13Z",
      "side": 1,
      "message": "Yes this effectively overrides any redirection. It doesn\u0027t make sense to Redirect() and CloseAllFileDescriptors()",
      "parentUuid": "006f0ffa_3a05e5e4",
      "range": {
        "startLine": 116,
        "startChar": 75,
        "endLine": 117,
        "endChar": 69
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "761b3934_76c8759d",
        "filename": "cmds/dumpstate/DumpstateUtil.h",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-11T14:59:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9ab7d2f2_867c237b",
      "range": {
        "startLine": 116,
        "startChar": 75,
        "endLine": 117,
        "endChar": 69
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "179a91f3_f7eb3489",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1065,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2021-01-08T15:46:26Z",
      "side": 1,
      "message": "does trace file have timestamp inside the content? just in case we are picking up an older trace file - will the reader of the bugreport be able to tell it\u0027s old?",
      "range": {
        "startLine": 1065,
        "startChar": 13,
        "endLine": 1065,
        "endChar": 30
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6905ff36_8f58ab91",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1065,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-08T15:59:13Z",
      "side": 1,
      "message": "dumpstate unlinks the trace at the end, so this should be unlikely.\neven if somehow we end up picking up a stale file (e.g. some previous dumpstate crashed), traces are all timestamped and will become obvious to who opens the file that the times don\u0027t match (also betterbug on its own checks the file timestamp of the trace, yes)",
      "parentUuid": "179a91f3_f7eb3489",
      "range": {
        "startLine": 1065,
        "startChar": 13,
        "endLine": 1065,
        "endChar": 30
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32a0b000_a52973d2",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1069,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2021-01-08T15:46:26Z",
      "side": 1,
      "message": "does it remove the tmp trace file too?",
      "range": {
        "startLine": 1069,
        "startChar": 7,
        "endLine": 1069,
        "endChar": 43
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8dcedfd_ec20a2bd",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1069,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-08T15:59:13Z",
      "side": 1,
      "message": "Yes (See definition in the same file, does an unlink at the end)",
      "parentUuid": "32a0b000_a52973d2",
      "range": {
        "startLine": 1069,
        "startChar": 7,
        "endLine": 1069,
        "endChar": 43
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d7dea08_4e1a52c2",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1070,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2021-01-08T15:46:26Z",
      "side": 1,
      "message": "nit: 8 spaces",
      "range": {
        "startLine": 1070,
        "startChar": 4,
        "endLine": 1070,
        "endChar": 8
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b590cf7_6c013c0e",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1070,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-08T15:59:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5d7dea08_4e1a52c2",
      "range": {
        "startLine": 1070,
        "startChar": 4,
        "endLine": 1070,
        "endChar": 8
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ef1778c_087b4b84",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1597,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2021-01-08T15:46:26Z",
      "side": 1,
      "message": "I don\u0027t think this is a particularly long running task - it is just copying a file that already exists into a zip file right? If so we don\u0027t need to use the pool necessarily. How big are the trace files typically?",
      "range": {
        "startLine": 1597,
        "startChar": 0,
        "endLine": 1597,
        "endChar": 77
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f39039d9_fe01867b",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1597,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-08T15:59:13Z",
      "side": 1,
      "message": "Yeah correct. FIle is around some MB, I don\u0027t think deferring it is a major deal. I mainly did it to stay consistent with the other things that call EnqueueAddZipEntryAndCleanupIfNeeded, but can put it inline here if you are fine.",
      "parentUuid": "1ef1778c_087b4b84",
      "range": {
        "startLine": 1597,
        "startChar": 0,
        "endLine": 1597,
        "endChar": 77
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dd1b130_1dfb17f3",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1597,
      "author": {
        "id": 1336554
      },
      "writtenOn": "2021-01-08T17:59:13Z",
      "side": 1,
      "message": "I think you can follow the example in AddAnrTraceDir()",
      "parentUuid": "f39039d9_fe01867b",
      "range": {
        "startLine": 1597,
        "startChar": 0,
        "endLine": 1597,
        "endChar": 77
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4a4b7a7_e3f014f8",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1597,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-08T18:03:11Z",
      "side": 1,
      "message": "kk will do in the next PS",
      "parentUuid": "2dd1b130_1dfb17f3",
      "range": {
        "startLine": 1597,
        "startChar": 0,
        "endLine": 1597,
        "endChar": 77
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8f843c0_b3369bc8",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1597,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-11T14:59:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d4a4b7a7_e3f014f8",
      "range": {
        "startLine": 1597,
        "startChar": 0,
        "endLine": 1597,
        "endChar": 77
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a685dca7_6dc0459c",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2888,
      "author": {
        "id": 1371409
      },
      "writtenOn": "2021-01-11T06:04:40Z",
      "side": 1,
      "message": "Could we move this call into the #DumpstateDefaultAfterCritical or #dumpstate()? IIUC, it may trigger the system trace serialization which is not necessary for cases of telephony, wifionly and limited_only modes.",
      "range": {
        "startLine": 2888,
        "startChar": 4,
        "endLine": 2888,
        "endChar": 28
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfadd726_80063a48",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2888,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-11T07:59:36Z",
      "side": 1,
      "message": "I\u0027ll leave to you and changpa@ to agree on a place here. changpa is the one who explicitly asked to do this before onUiIntensiveBugreportDumpsFinished for some betterbug-related reason.\nFrom my viewpoint any place which is early enough works, so the trace buffer doesn\u0027t get clobbered with too much dumpstate activity.",
      "parentUuid": "a685dca7_6dc0459c",
      "range": {
        "startLine": 2888,
        "startChar": 4,
        "endLine": 2888,
        "endChar": 28
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff3c2d84_759a60b8",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2888,
      "author": {
        "id": 1810984
      },
      "writtenOn": "2021-01-11T09:27:29Z",
      "side": 1,
      "message": "Hi Rhed:\n\u003e Could we move this call into the #DumpstateDefaultAfterCritical or #dumpstate()? \nNo, I think we need to add this call(MaybeSnapshotSystemTrace) before onUiIntensiveBugreportDumpsFinished,\nbecause in current design(go/BB-Tracing-S), \ncaller(Better Bug client) checks if there is available trace in bugreport.zip by the system trace snapshot\u0027s mtime\nwhen caller(Better Bug client) receives the INTENT_UI_INTENSIVE_BUGREPORT_DUMPS_FINISHED intent via dumpstate#onUiIntensiveBugreportDumpsFinished.\n// Detail is in below link\nhttps://screenshot.googleplex.com/tpmaaeesfxGJysB\n\n\u003e IIUC, it may trigger the system trace serialization which is not necessary for cases of telephony, wifionly and limited_only modes.\nIs it possible for resolving your concern by adding if statement for MaybeSnapshotSystemTrace like:\nif (!is_dumpstate_restricted) {\n   MaybeSnapshotSystemTrace();\n}\n？",
      "parentUuid": "dfadd726_80063a48",
      "range": {
        "startLine": 2888,
        "startChar": 4,
        "endLine": 2888,
        "endChar": 28
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddd9ed4a_f2d85f67",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2888,
      "author": {
        "id": 1371409
      },
      "writtenOn": "2021-01-11T10:46:31Z",
      "side": 1,
      "message": "+ 1 for adding an `if` statement.",
      "parentUuid": "ff3c2d84_759a60b8",
      "range": {
        "startLine": 2888,
        "startChar": 4,
        "endLine": 2888,
        "endChar": 28
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "358c6047_518dca8c",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2888,
      "author": {
        "id": 1810984
      },
      "writtenOn": "2021-01-11T12:14:59Z",
      "side": 1,
      "message": "\u003e + 1 for adding an `if` statement.\nHi Primiano:\nCould you help to add if statement for MaybeSnapshotSystemTrace like:\nif (!is_dumpstate_restricted) {\n   MaybeSnapshotSystemTrace();\n}",
      "parentUuid": "ddd9ed4a_f2d85f67",
      "range": {
        "startLine": 2888,
        "startChar": 4,
        "endLine": 2888,
        "endChar": 28
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5f837a0_3862a1a5",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2888,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-11T14:59:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "358c6047_518dca8c",
      "range": {
        "startLine": 2888,
        "startChar": 4,
        "endLine": 2888,
        "endChar": 28
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "634f3989_f9b5b1d3",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2888,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2021-01-11T14:59:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "358c6047_518dca8c",
      "range": {
        "startLine": 2888,
        "startChar": 4,
        "endLine": 2888,
        "endChar": 28
      },
      "revId": "051a991045555bd78a132916c5c963eba79aef27",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}