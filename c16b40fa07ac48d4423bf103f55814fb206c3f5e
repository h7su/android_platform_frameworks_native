{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ce134f5a_7515892f",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 1
      },
      "lineNbr": 237,
      "author": {
        "id": 1638873
      },
      "writtenOn": "2020-12-19T02:18:11Z",
      "side": 1,
      "message": "Send? Maybe add a derive for all the usual traits (Eq, PartialEq, Ord, PartialOrd, Hash) too.",
      "revId": "c16b40fa07ac48d4423bf103f55814fb206c3f5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c650849_6701c49c",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 1
      },
      "lineNbr": 237,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-12-31T01:15:07Z",
      "side": 1,
      "message": "I\u0027m thinking we can add Send as a requirement on Interface and FromIBinder and get it for free here? It\u0027s an auto trait so we don\u0027t need to derive it.\n\nAs far as the other traits, FromIBinder (i.e. Interface) does not require them, so we can\u0027t derive them here. I guess we could impl Eq at least using SpIBinder.",
      "parentUuid": "ce134f5a_7515892f",
      "revId": "c16b40fa07ac48d4423bf103f55814fb206c3f5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5a4d929_cd5a22f4",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 1
      },
      "lineNbr": 246,
      "author": {
        "id": 1638873
      },
      "writtenOn": "2020-12-19T11:09:17Z",
      "side": 1,
      "message": "If this is the only function you need, you could get rid of Strong and just do this:\n```\nimpl\u003cT: FromIBinder + ?Sized\u003e Box\u003cBinder\u003cT\u003e\u003e {\n    pub fn downgrade(this: \u0026Self) -\u003e Weak\u003cT\u003e {\n        Weak::new(this)\n    }\n}\n```\nor add downgrade() to either FromIBinder (it could just call Weak::new(self)) or Binder\u003cT\u003e.",
      "revId": "c16b40fa07ac48d4423bf103f55814fb206c3f5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6214aba_52b8948b",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 1
      },
      "lineNbr": 246,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-12-31T01:15:07Z",
      "side": 1,
      "message": "It\u0027s not necessarily a Binder\u003cT\u003e (that should be Box\u003cT\u003e in your example). I wanted to make the newtype to make it clear that you\u0027re dealing with a strong binder pointer here, as it\u0027s symmetric with Weak\u003cI\u003e.\n\nBesides, we can\u0027t override Clone on Box\u003cI\u003e, which we want to do here.",
      "parentUuid": "a5a4d929_cd5a22f4",
      "revId": "c16b40fa07ac48d4423bf103f55814fb206c3f5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3482f2d8_9cc3f5fa",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 1638873
      },
      "writtenOn": "2020-12-19T02:32:36Z",
      "side": 1,
      "message": "AsRef is just as useful, you should implement that too. I was also going to suggest BorrowMut and AsMut but I\u0027m not sure if we ever expose a mutable T.",
      "revId": "c16b40fa07ac48d4423bf103f55814fb206c3f5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6390ec3_4d765bad",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-12-31T01:15:07Z",
      "side": 1,
      "message": "We shouldn\u0027t be exposing mutable interfaces (they need to have interior, locked mutability).\n\nSure I\u0027ll impl AsRef.",
      "parentUuid": "3482f2d8_9cc3f5fa",
      "revId": "c16b40fa07ac48d4423bf103f55814fb206c3f5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb173459_06ef7644",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 1
      },
      "lineNbr": 282,
      "author": {
        "id": 1638873
      },
      "writtenOn": "2020-12-19T02:18:11Z",
      "side": 1,
      "message": "Same as above: Debug, Send, other traits.",
      "revId": "c16b40fa07ac48d4423bf103f55814fb206c3f5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c37b16a_1c79e4ea",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 1
      },
      "lineNbr": 282,
      "author": {
        "id": 1638873
      },
      "writtenOn": "2020-12-19T02:32:36Z",
      "side": 1,
      "message": "A manual implementation of Clone could be useful too.",
      "parentUuid": "bb173459_06ef7644",
      "revId": "c16b40fa07ac48d4423bf103f55814fb206c3f5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dfbaa57_eca9400d",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 1
      },
      "lineNbr": 282,
      "author": {
        "id": 1638873
      },
      "writtenOn": "2020-12-19T11:20:29Z",
      "side": 1,
      "message": "Actually, if WpIBinder implements Clone, then Weak can #derive it.",
      "parentUuid": "6c37b16a_1c79e4ea",
      "revId": "c16b40fa07ac48d4423bf103f55814fb206c3f5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6592b1c_2cc1ce07",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 1
      },
      "lineNbr": 282,
      "author": {
        "id": 1638873
      },
      "writtenOn": "2020-12-21T23:17:28Z",
      "side": 1,
      "message": "Just noticed that WpIBinder already has Debug, Send and Drop on master. Clone is the only one missing.",
      "parentUuid": "2dfbaa57_eca9400d",
      "revId": "c16b40fa07ac48d4423bf103f55814fb206c3f5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b47e7a2f_6488d7ec",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 1
      },
      "lineNbr": 282,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-12-31T01:15:07Z",
      "side": 1,
      "message": "We can\u0027t clone directly (i.e. without promoting and demoting) without a new API from the NDK.",
      "parentUuid": "e6592b1c_2cc1ce07",
      "revId": "c16b40fa07ac48d4423bf103f55814fb206c3f5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4fabed0e_059cce8d",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 1
      },
      "lineNbr": 282,
      "author": {
        "id": 1638873
      },
      "writtenOn": "2021-01-11T23:32:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b47e7a2f_6488d7ec",
      "revId": "c16b40fa07ac48d4423bf103f55814fb206c3f5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95cb8f32_047e27b9",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 1
      },
      "lineNbr": 668,
      "author": {
        "id": 1638873
      },
      "writtenOn": "2020-12-19T11:09:17Z",
      "side": 1,
      "message": "This might be shorter with .map()s.",
      "revId": "c16b40fa07ac48d4423bf103f55814fb206c3f5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9e3edf1_953dcb9a",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 1
      },
      "lineNbr": 668,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-12-31T01:15:07Z",
      "side": 1,
      "message": "I tried using maps, and the compiler won\u0027t recognize that $proxy is a dyn $interface then...",
      "parentUuid": "95cb8f32_047e27b9",
      "revId": "c16b40fa07ac48d4423bf103f55814fb206c3f5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}