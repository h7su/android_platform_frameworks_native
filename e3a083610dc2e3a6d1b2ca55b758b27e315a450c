{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "19c23e1d_dd422d42",
        "filename": "libs/binder/include_tls/binder/RpcAuth.h",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-09-20T21:44:04Z",
      "side": 1,
      "message": "qq - I would generally be adding lambdas these days, instead of adding more classes. For instance, sizeof(RpcAuth) will be frozen as soon as there are some users. Also, I wonder if classes are heavier (they certainly are in terms of number of files/lines of code you need to read to understand things). WDYT?",
      "revId": "e3a083610dc2e3a6d1b2ca55b758b27e315a450c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9e3e466_adebb0a3",
        "filename": "libs/binder/include_tls/binder/RpcAuth.h",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-09-20T21:52:39Z",
      "side": 1,
      "message": "I like lambdas too, but I also think it makes the ownership complicated for this:\n\nhttps://android-review.googlesource.com/c/platform/frameworks/native/+/1830832/4/libs/binder/tests/RpcAuthTesting.h#38\n\nSame for RpcCertVerifier. How would you make a lambda own a unique_ptr?",
      "parentUuid": "19c23e1d_dd422d42",
      "revId": "e3a083610dc2e3a6d1b2ca55b758b27e315a450c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcaf8fef_99bb0fff",
        "filename": "libs/binder/include_tls/binder/RpcAuth.h",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-09-20T21:53:53Z",
      "side": 1,
      "message": "(For RpcCertVerifier, the naive implementation is: https://android-review.googlesource.com/c/platform/frameworks/native/+/1830321/3/libs/binder/tests/RpcCertificateVerifierSimple.h )",
      "parentUuid": "b9e3e466_adebb0a3",
      "revId": "e3a083610dc2e3a6d1b2ca55b758b27e315a450c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60b3f7a4_6486d4c1",
        "filename": "libs/binder/include_tls/binder/RpcAuth.h",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-09-20T22:07:43Z",
      "side": 1,
      "message": "Also see:\nhttps://en.cppreference.com/w/cpp/utility/functional/function\n\n\u003e Class template std::function is a general-purpose polymorphic function wrapper. Instances of std::function can store, copy, and invoke any CopyConstructible Callable target\n\nIn our cases, the RpcCertificateVerifierSimple and RpcAuthPreSigned are all non-copy-constructible [1], so I can\u0027t see a good way to use std::function in the API.\n\n[1] That being said, they could technically be made copy-constructible by incrementing the ref-count of the internal objects, e.g. X509_up_ref() I just feel that\u0027s too complicated. But let me know if you think it is worth it.\n\nhttps://www.openssl.org/docs/man1.1.0/man3/X509_up_ref.html",
      "parentUuid": "dcaf8fef_99bb0fff",
      "revId": "e3a083610dc2e3a6d1b2ca55b758b27e315a450c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}