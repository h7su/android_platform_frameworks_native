{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f8dd3faf_b5efdce2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2023-08-16T22:07:18Z",
      "side": 1,
      "message": "I think this fuzzer should always crash no matter how it is used. Providing incorrect args to this fuzzer will be catched by fuzz_service_test as it always looks for the crash type which is mentioned and we have other crash types than plain now.",
      "revId": "af1a4cb96259d7fc1f4e1941b0fb1706560fb896",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b5d40ad_08168bf5",
        "filename": "libs/binder/tests/parcel_fuzzer/test_fuzzer/TestServiceFuzzer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2023-08-16T22:08:26Z",
      "side": 1,
      "message": "This can be another crash type as well.",
      "range": {
        "startLine": 117,
        "startChar": 32,
        "endLine": 117,
        "endChar": 40
      },
      "revId": "af1a4cb96259d7fc1f4e1941b0fb1706560fb896",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2492d421_6c600ab3",
        "filename": "libs/binder/tests/parcel_fuzzer/test_fuzzer/TestServiceFuzzer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-08-17T00:01:52Z",
      "side": 1,
      "message": "The script and test should always add an argument when calling this script. Why do we need to have some default behavior here?",
      "parentUuid": "1b5d40ad_08168bf5",
      "range": {
        "startLine": 117,
        "startChar": 32,
        "endLine": 117,
        "endChar": 40
      },
      "revId": "af1a4cb96259d7fc1f4e1941b0fb1706560fb896",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fdd4122_230a49a9",
        "filename": "libs/binder/tests/parcel_fuzzer/test_fuzzer/TestServiceFuzzer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1956258
      },
      "writtenOn": "2023-08-17T00:04:22Z",
      "side": 1,
      "message": "This is the same fuzzer which is used to check buganizer pipeline : https://android-review.git.corp.google.com/c/platform/frameworks/native/+/2706119. \nWhile running on infra, exit 0 is not being catched as crash.",
      "parentUuid": "2492d421_6c600ab3",
      "range": {
        "startLine": 117,
        "startChar": 32,
        "endLine": 117,
        "endChar": 40
      },
      "revId": "af1a4cb96259d7fc1f4e1941b0fb1706560fb896",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3531bcc_39a69e32",
        "filename": "libs/binder/tests/parcel_fuzzer/test_fuzzer/TestServiceFuzzer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-08-17T00:09:26Z",
      "side": 1,
      "message": "aha!\n\nOne nit then, add crash type \"ALWAYS\" and and in \u0027LLVMFuzzerTestOneInput\u0027, if always crashing, LOG_ALWAYS_FATAL directly.\n\nThe reason I suggest this is that currently, we are re-using \u0027PLAIN\u0027 here, but \u0027PLAIN\u0027 still means that transactions are successfully executed. We should avoid re-using this, in case there is an issue in the fuzzer driver, we don\u0027t want to be confused that there is an issue with the fuzzing infrastructure.",
      "parentUuid": "1fdd4122_230a49a9",
      "range": {
        "startLine": 117,
        "startChar": 32,
        "endLine": 117,
        "endChar": 40
      },
      "revId": "af1a4cb96259d7fc1f4e1941b0fb1706560fb896",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}