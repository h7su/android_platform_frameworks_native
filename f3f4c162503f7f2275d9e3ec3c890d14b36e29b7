{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c1cd8e1e_dae8b9e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2022-01-08T08:40:12Z",
      "side": 1,
      "message": "Code looks fine, but the comments about untag before closing are weird.\nWhat happens if one closes without untagging the socket?",
      "revId": "f3f4c162503f7f2275d9e3ec3c890d14b36e29b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2f1e2ca_ee35f1cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1010050
      },
      "writtenOn": "2022-01-10T03:58:27Z",
      "side": 1,
      "message": "The existing methods seem to have a mix of error reporting behavior, which is unfortunate. Some return negative error codes, others return -1 and set errno.\n\nI\u0027d personally prefer the former, since the latter requires checking two variables, so why not just return the error code directly instead of just -1? And I don\u0027t recall other NDK methods using errno anywhere, though I may just not know about it.\n",
      "revId": "f3f4c162503f7f2275d9e3ec3c890d14b36e29b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c01249b9_f97ce855",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1349877
      },
      "writtenOn": "2022-01-10T13:25:59Z",
      "side": 1,
      "message": "Yes, we do have mixed bug reporting behavior. But they are already public and there are apps like Facebook using them. We probably have no way to unify existing functions. For three newly added functions, they do return the errno directly.",
      "parentUuid": "b2f1e2ca_ee35f1cf",
      "revId": "f3f4c162503f7f2275d9e3ec3c890d14b36e29b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29f703ad_39c2b641",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1349877
      },
      "writtenOn": "2022-01-10T13:25:59Z",
      "side": 1,
      "message": "The statistic will be deleted when a socket is closed, no matter the socket is untagged or not. Users can call android_untag_socket to remove stats at any time if they are no longer interested.",
      "parentUuid": "c1cd8e1e_dae8b9e9",
      "revId": "f3f4c162503f7f2275d9e3ec3c890d14b36e29b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ead8e2f0_e2a58be3",
        "filename": "include/android/multinetwork.h",
        "patchSetId": 5
      },
      "lineNbr": 238,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2022-01-11T04:32:30Z",
      "side": 1,
      "message": "AFAICT this doc is bad - all this does is call into:\n\nhttp://cs/aosp-master/system/netd/server/TrafficController.cpp?l\u003d393\u0026rcl\u003d5851b0354406e28993ee18ff37364b70ec474a84\n\nso \u0027before closing\u0027 is spurious - indeed we can\u0027t rely on userspace correctly calling this before close(), because a process terminating closes all sockets (in the kernel) without calling this.\n\nAdditionally, it doesn\u0027t remove any statistics parameters.  It just breaks the link between the socket and any existent uid/tag.\n\nuntag(fd) is basically nearly equivalent to tag(fd, 0, -1), since I think that\u0027s the default behaviour for an untagged socket (ie. tag 0, and use socket owner\u0027s uid) - at least for unpriv processes (ie. ignoring special cases like dns/clat)",
      "range": {
        "startLine": 238,
        "startChar": 0,
        "endLine": 238,
        "endChar": 99
      },
      "revId": "f3f4c162503f7f2275d9e3ec3c890d14b36e29b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}