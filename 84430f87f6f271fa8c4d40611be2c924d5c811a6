{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "90f504a2_1f74abd9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-08-17T04:22:26Z",
      "side": 1,
      "message": "The change itself looks good (thus +1), but I am not sure if such a discrimination of APIs is what we do in binder. I wish everything is directly accessible via `binder::*`. I\u0027ve left an inline comment below. PTAL.",
      "revId": "84430f87f6f271fa8c4d40611be2c924d5c811a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d64b192_e02586ef",
        "filename": "libs/binder/rust/src/lib.rs",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-08-17T04:22:26Z",
      "side": 1,
      "message": "In libbinder and libbinder_ndk, these are public APIs and people can use them regardless of whether they use AIDL or not. Actually, I have thought that binder shouldn\u0027t assume that it is used only via the AIDL-generated code. i.e. we don\u0027t categories binder APIs into (1) those that are accessible to the AIDL clients, and (2) those that are visible only to the AIDL-generated code.\n\nI however don\u0027t know if we want to keep the same principle for the rust backend. I believe Steven has an authoritative answer here.",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 126,
        "endChar": 46
      },
      "revId": "84430f87f6f271fa8c4d40611be2c924d5c811a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d49b355b_5c562333",
        "filename": "libs/binder/rust/src/lib.rs",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-26T20:00:09Z",
      "side": 1,
      "message": "There are some things in SystemApi/NDK that are commented or namespaced as internal/not recommended to use, such as Stability. Generally though, I\u0027d say, the assumption that AIDL will be the only users of these APIs is wrong. Once there are enough users, using the internal APIs will become de facto practice, and that\u0027s gross.",
      "parentUuid": "5d64b192_e02586ef",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 126,
        "endChar": 46
      },
      "revId": "84430f87f6f271fa8c4d40611be2c924d5c811a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "121cdf9f_ccd05241",
        "filename": "libs/binder/rust/src/lib.rs",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-08-26T22:46:56Z",
      "side": 1,
      "message": "If this is something we want to change, that\u0027s a reasonable discussion, but I think the only bearing it would have on this CL is the name of the internal module (e.g. maybe it should just be `internal_api` not `aidl_interal_api`)? It sounds like you\u0027re suggesting that we should stabilize everything required to build the AIDL implementation, which is possible, but this change is just about switching namespacing.",
      "parentUuid": "d49b355b_5c562333",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 126,
        "endChar": 46
      },
      "revId": "84430f87f6f271fa8c4d40611be2c924d5c811a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "645e99f6_010d5cbd",
        "filename": "libs/binder/rust/src/lib.rs",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-08-27T01:18:24Z",
      "side": 1,
      "message": "Well, I think my actual question was if these can be out of the \u0027aidl_internal_api\u0027 namespace.",
      "parentUuid": "121cdf9f_ccd05241",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 126,
        "endChar": 46
      },
      "revId": "84430f87f6f271fa8c4d40611be2c924d5c811a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fa438ab_6fe0269e",
        "filename": "libs/binder/rust/src/lib.rs",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-08-27T01:27:28Z",
      "side": 1,
      "message": "The question is really whether we want users to use anything other than the AIDL interface. I was under the impression that we definitely did not.",
      "parentUuid": "645e99f6_010d5cbd",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 126,
        "endChar": 46
      },
      "revId": "84430f87f6f271fa8c4d40611be2c924d5c811a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "223a6cf9_de9f6862",
        "filename": "libs/binder/rust/src/lib.rs",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-08-27T01:40:12Z",
      "side": 1,
      "message": "We have made it possible for users to use binder without AIDL by manually writing the proxy and stub code by themselves, or even by using a tool other than the AIDL compiler (e.g. grpc). I think we don\u0027t want to change the expectation exceptionally for rust clients.",
      "parentUuid": "2fa438ab_6fe0269e",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 126,
        "endChar": 46
      },
      "revId": "84430f87f6f271fa8c4d40611be2c924d5c811a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05a36956_d4cfabfc",
        "filename": "libs/binder/rust/src/lib.rs",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-08-27T21:58:26Z",
      "side": 1,
      "message": "If we really want to expose all of this, ok, but we have an opportunity to do things differently for Rust. I don\u0027t think we should just do what has been done for historical reasons in C++ and Java without considering alternatives.",
      "parentUuid": "223a6cf9_de9f6862",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 126,
        "endChar": 46
      },
      "revId": "84430f87f6f271fa8c4d40611be2c924d5c811a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bd51b79_daac134f",
        "filename": "libs/binder/rust/src/lib.rs",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-08-30T00:53:59Z",
      "side": 1,
      "message": "Ok, then the question goes down to \"Do we want to discourage (though we can never prohibit for compat reasons) people using binder directly without AIDL?\" If so, it might be better to hide these APIs at least for Rust.\n\nSteven, what do you think?",
      "parentUuid": "05a36956_d4cfabfc",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 126,
        "endChar": 46
      },
      "revId": "84430f87f6f271fa8c4d40611be2c924d5c811a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb6c9ffb_8afcdd19",
        "filename": "libs/binder/rust/src/lib.rs",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-08-30T18:43:52Z",
      "side": 1,
      "message": "No. There are and will be non-AIDL users of binder.\n\nLonger explanation/argument: https://android-review.googlesource.com/c/platform/system/tools/aidl/+/1797532/1/tests/golden_output/aidl-test-interface-rust-source/gen/android/aidl/tests/IDeprecated.rs#35",
      "parentUuid": "8bd51b79_daac134f",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 126,
        "endChar": 46
      },
      "revId": "84430f87f6f271fa8c4d40611be2c924d5c811a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}