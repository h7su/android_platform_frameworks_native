{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "663f496a_180d5081",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1149384
      },
      "writtenOn": "2022-12-05T13:54:57Z",
      "side": 1,
      "message": "I\u0027m not convinced that the solution here is to add a new flag rather than figure out how to multiplex the gesture processing on the client side.\n\nThis flag will carry a new permanent maintenance cost by adding a new behaviour. Any future refactor that we will do would now have to account for this. How would this flag work, exactly?\n\n1) What if you have 2 windows, window A is regular and window B is spy. Window A sets DO_NOT_PILFER and the user touches window A. If the spy like a home gesture monitor tries to pilfer, now there will be potentially 2 visual actions on the screen. So we should probably limit this flag to spy windows only.\n\n2) We should make sure that regular (non-privileged apps) cannot set this flag, and we would need to have appropriate tests for this, since it would be a security issue to have it.\n\n3) We would need to figure out the logging. Today, we have logs for pilfering and for cancels, `input_interaction` and `input_cancel`. We need to make sure it\u0027s clear that the touch is not getting pilfered because a window has this special flag.\n\nAs previously stated, in the proposed use case this will add a permanent runtime cost because there will now be 2 dispatch targets instead of 1.\n\nDo we have any other use cases for this flag besides the one where \"2 processes are handling similar gesture\"?",
      "revId": "b991140e2d566e6aac22fcf990f15bd5e3f51ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6805a1b_b05f3eeb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1407716
      },
      "writtenOn": "2022-12-05T17:10:23Z",
      "side": 1,
      "message": "I agree with Siarhei here that this should probably be solved on the client side, and I should not have suggested adding such a flag without understanding the issue first. Sorry for that. \n\nThe underlying issue seems to be that there are multiple entities trying to act as gesture detectors, and because of the asynchronous nature of input dispatching, they will always be competing. I see two options to solve this:\n\n1) Designate one client (e.g. SystemUI) to act as the \"three-finger touch gesture detector\" for the system, and have other clients communicate with it to get gesture information, as suggested by Siarhei.\n\n2) Add multi-finger gesture recognition to inputflinger that can be configured per-device, so that we don\u0027t send those to apps in the first place. This is the design we have for touchpads, and could be extended to touchscreens as well. In this design, inputflinger is the gesture detector.\n\nIn the long run, I think having inputflinger be the gesture detector makes sense for consistency with touchpads. However, since Android historically has left touch gesture detection on the client side, option 1 would be simpler to implement and more historically consistent.",
      "parentUuid": "663f496a_180d5081",
      "revId": "b991140e2d566e6aac22fcf990f15bd5e3f51ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "392931ea_b369ccfc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1149384
      },
      "writtenOn": "2022-12-05T17:29:42Z",
      "side": 1,
      "message": "Thanks Prabir, that\u0027s actually a very good point on the competition between spy windows. That\u0027s an example I originally wanted to add, but forgot about:\n\nAgain let\u0027s say we have two windows, A and B. Both windows are spy. Window A is \"do not pilfer\".\n\n1. User touches B. Both A and B get the touch.\n2. Window B calls pilfer. BOth A and B continue to get the touch, because A is \"do not pilfer\". Now window B thinks that it has the touch, because it pilfered.\n3. Now window A calls pilfer. Window B gets cancel. Window A continues to receive the touch.\n\nThat would be unexpected for the window A, and would probably lead to a bunch of spy windows using \"do not pilfer\" flag by default. It would be a confusing developer experience.",
      "parentUuid": "a6805a1b_b05f3eeb",
      "revId": "b991140e2d566e6aac22fcf990f15bd5e3f51ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}