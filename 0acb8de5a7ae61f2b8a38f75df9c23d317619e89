{
  "comments": [
    {
      "key": {
        "uuid": "4e929d9e_d72ecd64",
        "filename": "libs/input/tests/fuzzers/InputTransportKeyEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1100093
      },
      "writtenOn": "2020-07-28T00:36:34Z",
      "side": 1,
      "message": "500 is pretty big, on avg you are wasting 250 bytes of entropy on this channel name, is the name used for something scary?",
      "range": {
        "startLine": 29,
        "startChar": 60,
        "endLine": 29,
        "endChar": 63
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56211645_bc0499d2",
        "filename": "libs/input/tests/fuzzers/InputTransportKeyEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T18:55:42Z",
      "side": 1,
      "message": "(i merged this code and MotionEvent_Fuzzer in InputTransport_fuzzer in patchset 5)\nNo, reduced to 75.There was no max-length defined so i took 500 or i can simply do ConsumeRandomLenghtString()",
      "parentUuid": "4e929d9e_d72ecd64",
      "range": {
        "startLine": 29,
        "startChar": 60,
        "endLine": 29,
        "endChar": 63
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cdbc71e6_f24dea21",
        "filename": "libs/input/tests/fuzzers/InputTransportKeyEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T19:00:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "56211645_bc0499d2",
      "range": {
        "startLine": 29,
        "startChar": 60,
        "endLine": 29,
        "endChar": 63
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f169a125_7c888fda",
        "filename": "libs/input/tests/fuzzers/InputTransportMotionEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1100093
      },
      "writtenOn": "2020-07-28T00:36:34Z",
      "side": 1,
      "message": "same comment",
      "range": {
        "startLine": 28,
        "startChar": 60,
        "endLine": 28,
        "endChar": 63
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee5caf81_e58a3674",
        "filename": "libs/input/tests/fuzzers/InputTransportMotionEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T18:55:42Z",
      "side": 1,
      "message": "\u003e same comment",
      "parentUuid": "f169a125_7c888fda",
      "range": {
        "startLine": 28,
        "startChar": 60,
        "endLine": 28,
        "endChar": 63
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28c20419_e7500024",
        "filename": "libs/input/tests/fuzzers/InputTransportMotionEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T19:00:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ee5caf81_e58a3674",
      "range": {
        "startLine": 28,
        "startChar": 60,
        "endLine": 28,
        "endChar": 63
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d00f1087_af0d8163",
        "filename": "libs/input/tests/fuzzers/InputTransportMotionEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1100093
      },
      "writtenOn": "2020-07-28T00:36:34Z",
      "side": 1,
      "message": "why -1 if you have a range?",
      "range": {
        "startLine": 42,
        "startChar": 23,
        "endLine": 42,
        "endChar": 70
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3fcf4e0_f7d7b9e9",
        "filename": "libs/input/tests/fuzzers/InputTransportMotionEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T18:55:42Z",
      "side": 1,
      "message": "My Mistake, i forgot it can produce negatives. i thought it starts from 0. But still I removed InRange. As this fuzzer creates an InputMessage from parameters provided and then publishes and consumes it.",
      "parentUuid": "d00f1087_af0d8163",
      "range": {
        "startLine": 42,
        "startChar": 23,
        "endLine": 42,
        "endChar": 70
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a4c9e03_45b0c883",
        "filename": "libs/input/tests/fuzzers/InputTransportMotionEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T19:00:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c3fcf4e0_f7d7b9e9",
      "range": {
        "startLine": 42,
        "startChar": 23,
        "endLine": 42,
        "endChar": 70
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b116abd_cab70298",
        "filename": "libs/input/tests/fuzzers/InputTransportMotionEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1100093
      },
      "writtenOn": "2020-07-28T00:36:34Z",
      "side": 1,
      "message": "where does 10 come from?",
      "range": {
        "startLine": 46,
        "startChar": 63,
        "endLine": 46,
        "endChar": 66
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d4981fa_d8620558",
        "filename": "libs/input/tests/fuzzers/InputTransportMotionEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T18:55:42Z",
      "side": 1,
      "message": "same reason as above. So removed",
      "parentUuid": "2b116abd_cab70298",
      "range": {
        "startLine": 46,
        "startChar": 63,
        "endLine": 46,
        "endChar": 66
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d030684b_bf5c39a7",
        "filename": "libs/input/tests/fuzzers/InputTransportMotionEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T19:00:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9d4981fa_d8620558",
      "range": {
        "startLine": 46,
        "startChar": 63,
        "endLine": 46,
        "endChar": 66
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f54a532_344750a5",
        "filename": "libs/input/tests/fuzzers/InputTransportMotionEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1100093
      },
      "writtenOn": "2020-07-28T00:36:34Z",
      "side": 1,
      "message": "Should we limit this the 2 times here to reasonable times? I assume they\u0027re not controlled?  Though mayvbe system clock could be",
      "range": {
        "startLine": 56,
        "startChar": 12,
        "endLine": 56,
        "endChar": 21
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "804d14a0_379b12a3",
        "filename": "libs/input/tests/fuzzers/InputTransportMotionEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T18:55:42Z",
      "side": 1,
      "message": "We can limit this time. But in practical scenarios this times are nanoseconds from boot. But we don\u0027t know for how long the phone hasn\u0027t been booted. However, that are no calculation for this. So its good to have them uncontrolled.",
      "parentUuid": "2f54a532_344750a5",
      "range": {
        "startLine": 56,
        "startChar": 12,
        "endLine": 56,
        "endChar": 21
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a31f14c_14822ae9",
        "filename": "libs/input/tests/fuzzers/InputTransportMotionEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T19:00:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "804d14a0_379b12a3",
      "range": {
        "startLine": 56,
        "startChar": 12,
        "endLine": 56,
        "endChar": 21
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f3bcb5e_1a4720a7",
        "filename": "libs/input/tests/fuzzers/InputTransportMotionEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1100093
      },
      "writtenOn": "2020-07-28T00:36:34Z",
      "side": 1,
      "message": "where do these limits come from?",
      "range": {
        "startLine": 65,
        "startChar": 73,
        "endLine": 65,
        "endChar": 82
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c47dcb41_90ebdb02",
        "filename": "libs/input/tests/fuzzers/InputTransportMotionEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T18:55:42Z",
      "side": 1,
      "message": "removed InRange. reason : same as above. Won\u0027t matter whether i provide it or not.",
      "parentUuid": "2f3bcb5e_1a4720a7",
      "range": {
        "startLine": 65,
        "startChar": 73,
        "endLine": 65,
        "endChar": 82
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3209378_eabc2288",
        "filename": "libs/input/tests/fuzzers/InputTransportMotionEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T19:00:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c47dcb41_90ebdb02",
      "range": {
        "startLine": 65,
        "startChar": 73,
        "endLine": 65,
        "endChar": 82
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08f8875c_a46da0a7",
        "filename": "libs/input/tests/fuzzers/InputTransportMotionEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1100093
      },
      "writtenOn": "2020-07-28T00:36:34Z",
      "side": 1,
      "message": "Where does 48 come from?",
      "range": {
        "startLine": 68,
        "startChar": 71,
        "endLine": 68,
        "endChar": 73
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78962613_0dac3bac",
        "filename": "libs/input/tests/fuzzers/InputTransportMotionEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T18:55:42Z",
      "side": 1,
      "message": "There are 48 different axisType possible in setAxisValue(axisType, axisValue). It\u0027s an enum. Change : #define AXIS_TYPE_MAX_LENGTH 48 at top and used this",
      "parentUuid": "08f8875c_a46da0a7",
      "range": {
        "startLine": 68,
        "startChar": 71,
        "endLine": 68,
        "endChar": 73
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78846f83_cb2d0f1e",
        "filename": "libs/input/tests/fuzzers/InputTransportMotionEvent_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T19:00:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "78962613_0dac3bac",
      "range": {
        "startLine": 68,
        "startChar": 71,
        "endLine": 68,
        "endChar": 73
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39269443_69270e9a",
        "filename": "libs/input/tests/fuzzers/KeyCharacterMap_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1100093
      },
      "writtenOn": "2020-07-28T00:36:34Z",
      "side": 1,
      "message": "Is this enum? In genreal if its an enum, include the enum here and use maxes and stuff.  This way if the enum adds a new format we can auto fuzz it in the futuer",
      "range": {
        "startLine": 28,
        "startChar": 87,
        "endLine": 28,
        "endChar": 89
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10a680c3_0ae0d59d",
        "filename": "libs/input/tests/fuzzers/KeyCharacterMap_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T19:00:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "39269443_69270e9a",
      "range": {
        "startLine": 28,
        "startChar": 87,
        "endLine": 28,
        "endChar": 89
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f05d19f1_b86377eb",
        "filename": "libs/input/tests/fuzzers/KeyCharacterMap_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1100093
      },
      "writtenOn": "2020-07-28T00:36:34Z",
      "side": 1,
      "message": "Can you go 1 layer deeper and avoid writing to the file system?  What is the exec/s here?",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 57
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "731bd108_e8d4d575",
        "filename": "libs/input/tests/fuzzers/KeyCharacterMap_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T18:55:42Z",
      "side": 1,
      "message": "yeah i remember,you taught me that. But i was getting around ~7000 to 8000 exec/s \nSo i did this (forgot to mention it to you, sorry!)",
      "parentUuid": "f05d19f1_b86377eb",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 57
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c88f6b1_1ac5c322",
        "filename": "libs/input/tests/fuzzers/KeyCharacterMap_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1149384
      },
      "writtenOn": "2020-07-29T00:44:46Z",
      "side": 1,
      "message": "I was wondering if it\u0027s possible to use \"std::tmpfile\" here instead? would rather avoid memcpy and mkstemp if possible\n\nanother question, why do we need a random file rather than hardcoding some predefined temp file name? Is it mainly to check the cases where filename itself can cause bugs?\n\nalternatively, per Max\u0027s suggestion, we can add new api to KeyCharacterMap to load from string instead of from file to facilitate testing",
      "parentUuid": "731bd108_e8d4d575",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 57
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1134c127_1afd25f9",
        "filename": "libs/input/tests/fuzzers/KeyCharacterMap_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-29T01:09:37Z",
      "side": 1,
      "message": "I think tmpfile and mkstemp are same in performance. memcpy is used just to copy char[](not the file data). Would it a problem?  \n\nNo, it was just to avoid any kind of name conflict in that directory (local/tmp) and mkstemp gives that guarantee.\n\nYes we can consider that. But exec/s were very good. So thought not to do it.",
      "parentUuid": "9c88f6b1_1ac5c322",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 57
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92f92a3f_19c08832",
        "filename": "libs/input/tests/fuzzers/VelocityTracker_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1100093
      },
      "writtenOn": "2020-07-28T00:36:34Z",
      "side": 1,
      "message": "How hard is it to get these via includes so if they change we can get them or are these strings in the includes and we #defined them here because you can\u0027t include them?",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 39,
        "endChar": 32
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "343373c0_f63d0e50",
        "filename": "libs/input/tests/fuzzers/VelocityTracker_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T18:55:42Z",
      "side": 1,
      "message": "Yeah these are hard-coded strings, that why I defined them here.",
      "parentUuid": "92f92a3f_19c08832",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 39,
        "endChar": 32
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cf68c81_fcd0a780",
        "filename": "libs/input/tests/fuzzers/VelocityTracker_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T19:00:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "343373c0_f63d0e50",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 39,
        "endChar": 32
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a373d276_ad9edfa5",
        "filename": "libs/input/tests/fuzzers/VelocityTracker_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1100093
      },
      "writtenOn": "2020-07-28T00:36:34Z",
      "side": 1,
      "message": "What happens if you don\u0027t set this id but use another one, is there any code path that doesn\u0027t get hit in the test mode?",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 87
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3c79677_7c43e227",
        "filename": "libs/input/tests/fuzzers/VelocityTracker_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T18:55:42Z",
      "side": 1,
      "message": "no, remains the same",
      "parentUuid": "a373d276_ad9edfa5",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 87
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1ebfa1f_4c470228",
        "filename": "libs/input/tests/fuzzers/VelocityTracker_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T19:00:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3c79677_7c43e227",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 87
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb04570f_1d3fcc53",
        "filename": "libs/input/tests/fuzzers/VelocityTracker_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 119,
      "author": {
        "id": 1100093
      },
      "writtenOn": "2020-07-28T00:36:34Z",
      "side": 1,
      "message": "Comment why this (I think I know but why?)",
      "range": {
        "startLine": 110,
        "startChar": 0,
        "endLine": 119,
        "endChar": 9
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2dd068ba_a324ba09",
        "filename": "libs/input/tests/fuzzers/VelocityTracker_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 119,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T18:55:42Z",
      "side": 1,
      "message": "it is used to resolve what should be the action for MotionEvent. MotionEvent has one parameter called action. And based on the postion of Events, it identifies whether that action was upwards,downwards,etc movements",
      "parentUuid": "eb04570f_1d3fcc53",
      "range": {
        "startLine": 110,
        "startChar": 0,
        "endLine": 119,
        "endChar": 9
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e310ee6_c64e7da0",
        "filename": "libs/input/tests/fuzzers/VelocityTracker_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 119,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T19:00:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2dd068ba_a324ba09",
      "range": {
        "startLine": 110,
        "startChar": 0,
        "endLine": 119,
        "endChar": 9
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a5d2e34_efac6225",
        "filename": "libs/input/tests/fuzzers/VelocityTracker_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 207,
      "author": {
        "id": 1100093
      },
      "writtenOn": "2020-07-28T00:36:34Z",
      "side": 1,
      "message": "Do events have to happen in coronological order?",
      "range": {
        "startLine": 205,
        "startChar": 0,
        "endLine": 207,
        "endChar": 42
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a3d803b_cd7b0141",
        "filename": "libs/input/tests/fuzzers/VelocityTracker_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 207,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T18:55:42Z",
      "side": 1,
      "message": "yes they have to be in order, because it will not make any sense for velocity if later event\u0027s eventTime is less than current event\u0027s eventTime.",
      "parentUuid": "5a5d2e34_efac6225",
      "range": {
        "startLine": 205,
        "startChar": 0,
        "endLine": 207,
        "endChar": 42
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88ac82db_d6b0b68d",
        "filename": "libs/input/tests/fuzzers/VelocityTracker_fuzzer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 207,
      "author": {
        "id": 1727075
      },
      "writtenOn": "2020-07-28T19:00:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a3d803b_cd7b0141",
      "range": {
        "startLine": 205,
        "startChar": 0,
        "endLine": 207,
        "endChar": 42
      },
      "revId": "0acb8de5a7ae61f2b8a38f75df9c23d317619e89",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}