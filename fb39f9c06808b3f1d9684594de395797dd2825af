{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0046ecc1_dbfd33f0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2021-09-16T00:22:09Z",
      "side": 1,
      "message": "Sorry for late bumping into this. Leaving a couple of QQs and a nit.",
      "revId": "fb39f9c06808b3f1d9684594de395797dd2825af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "731fa226_ab7be98b",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 8
      },
      "lineNbr": 1177,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-09-15T00:24:17Z",
      "side": 1,
      "message": "you missed the \"Available since API level 33\" documentation comments on these two new APIs (see all the others for examples).\n\nyou did get the __INTRODUCED_IN(33) though, so at least confused coders will get a clear compiler error. but the docs will be confusing...",
      "revId": "fb39f9c06808b3f1d9684594de395797dd2825af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "281c1940_477c8f1c",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 8
      },
      "lineNbr": 1177,
      "author": {
        "id": 1219061
      },
      "writtenOn": "2021-09-15T00:41:06Z",
      "side": 1,
      "message": "Sorry, see aocr/1826579",
      "parentUuid": "731fa226_ab7be98b",
      "revId": "fb39f9c06808b3f1d9684594de395797dd2825af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "866445bb_b19560b3",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 8
      },
      "lineNbr": 1177,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-09-15T16:07:30Z",
      "side": 1,
      "message": "thanks!",
      "parentUuid": "281c1940_477c8f1c",
      "revId": "fb39f9c06808b3f1d9684594de395797dd2825af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52db4069_b3da02d9",
        "filename": "libs/binder/ndk/parcel.cpp",
        "patchSetId": 8
      },
      "lineNbr": 677,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2021-09-16T00:22:09Z",
      "side": 1,
      "message": "nit: I\u0027m curious if check on the narrower range [start, start+len) would suffice?",
      "range": {
        "startLine": 677,
        "startChar": 3,
        "endLine": 677,
        "endChar": 40
      },
      "revId": "fb39f9c06808b3f1d9684594de395797dd2825af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83c27314_d94896b5",
        "filename": "libs/binder/ndk/parcel.cpp",
        "patchSetId": 8
      },
      "lineNbr": 677,
      "author": {
        "id": 1219061
      },
      "writtenOn": "2021-09-16T00:36:19Z",
      "side": 1,
      "message": "objectsCount is a global property, I am unsure how to check a specific range for objects?",
      "parentUuid": "52db4069_b3da02d9",
      "range": {
        "startLine": 677,
        "startChar": 3,
        "endLine": 677,
        "endChar": 40
      },
      "revId": "fb39f9c06808b3f1d9684594de395797dd2825af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ed73085_5184966f",
        "filename": "libs/binder/ndk/parcel.cpp",
        "patchSetId": 8
      },
      "lineNbr": 690,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2021-09-16T00:22:09Z",
      "side": 1,
      "message": "qq: Why does unmarshal() overwrite at position\u003d0 while marshal() accepts `start` as an offset? What if `parcel` has some objects in it already? Does \"setDataSize(len) + setDataPosition(0) + writeInPlace(len)\" properly discard the old objects?",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 690,
        "endChar": 54
      },
      "revId": "fb39f9c06808b3f1d9684594de395797dd2825af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e875ab5a_aaf3a931",
        "filename": "libs/binder/ndk/parcel.cpp",
        "patchSetId": 8
      },
      "lineNbr": 690,
      "author": {
        "id": 1219061
      },
      "writtenOn": "2021-09-16T00:36:19Z",
      "side": 1,
      "message": "Because in unmarshal, buffer is caller provided which explicitly indicates a start, otherwise, you could pass (buffer + start) as buffer. I think it overwrites all older objects, this is the same behavior as the native implementation.",
      "parentUuid": "1ed73085_5184966f",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 690,
        "endChar": 54
      },
      "revId": "fb39f9c06808b3f1d9684594de395797dd2825af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b27ac262_22287373",
        "filename": "libs/binder/ndk/parcel.cpp",
        "patchSetId": 8
      },
      "lineNbr": 700,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2021-09-16T00:22:09Z",
      "side": 1,
      "message": "nit: `Parcel::write(const void* data, size_t len)`?",
      "range": {
        "startLine": 696,
        "startChar": 0,
        "endLine": 700,
        "endChar": 29
      },
      "revId": "fb39f9c06808b3f1d9684594de395797dd2825af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00140f68_4582e3a6",
        "filename": "libs/binder/ndk/parcel.cpp",
        "patchSetId": 8
      },
      "lineNbr": 700,
      "author": {
        "id": 1219061
      },
      "writtenOn": "2021-09-16T00:36:19Z",
      "side": 1,
      "message": "I am copying this from Java API native implementation. This should be equal to write, but I am being consistent here.",
      "parentUuid": "b27ac262_22287373",
      "range": {
        "startLine": 696,
        "startChar": 0,
        "endLine": 700,
        "endChar": 29
      },
      "revId": "fb39f9c06808b3f1d9684594de395797dd2825af",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}