{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "302c6681_f9fdeebd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-10T20:49:16Z",
      "side": 1,
      "message": "can you share more details about this? There is also possible globals problems introduced here if an existing client uses shared libs, and some symbols get copied and absorbed into this library.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 9
      },
      "revId": "11f6458eefedc1f57e45e421f2656cbd507f4d2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bee3de81_445fdbd7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-10T22:51:49Z",
      "side": 1,
      "message": "We are developing a system server service in the ART module (art/{libartservice,artd}) and we\u0027d like to use host libbinder_ndk to unit test the native part (artd).\n\nThe ART module is developed with a thin manifest (master-art) that contains a small subset of the master manifest. In particular it doesn\u0027t contain frameworks/{base,native}. Instead we have prebuilts of the platform dependencies we need (prebuilts/runtime/mainline/platform). They include libbinder_ndk (currently as stubs for device). We need to keep that thin manifest working, which means, at the very least, these tests need to build without errors (or else we won\u0027t be able to have host unit tests for it).\n\nWith a prebuilt for libbinder_ndk, the thing we\u0027d build against would look something like this: https://r.android.com/c/platform/prebuilts/runtime/+/2120154/1/mainline/platform/sdk/Android.bp#190\n\n\u003e There is also possible globals problems introduced here if an existing client uses shared libs, and some symbols get copied and absorbed into this library.\n\nHow would such problems surface? If host unit tests are only using this to test AIDL and other binder interfaces, without actually calling into libbinder_ndk, I reckon problems with that should be rare. But it\u0027s not clear to me how functional Binder is in this case. Does it actually work to some extent? That tests may use?",
      "parentUuid": "302c6681_f9fdeebd",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 9
      },
      "revId": "11f6458eefedc1f57e45e421f2656cbd507f4d2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ff44be2_caa1f6ed",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-11T00:26:31Z",
      "side": 1,
      "message": "(RPC) binder works on host now. The support is quite extensive. Such problems would surface as undefined behavior.\n\nHere is one consideration:\n\n    cc_library_host {\n        name: \"art-host-native-deps\",\n        whole_static_libs: [\n            \"libbinder_ndk\", \"libbinder\", ...\n        ],\n    }\n\n\u0027shared_libs\u0027 here will be dropped by (whole_)?static_libs, so you can make this decision for Art code without imposing requirements on other host users. Could this work?",
      "parentUuid": "bee3de81_445fdbd7",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 9
      },
      "revId": "11f6458eefedc1f57e45e421f2656cbd507f4d2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5822e464_6f64ca70",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-13T21:56:34Z",
      "side": 1,
      "message": "\u003e (RPC) binder works on host now. The support is quite extensive.\n\nOh, that\u0027s cool.\n\n\u003e Such problems would surface as undefined behavior.\n\nTo be more precise, your worry is ODR violations, and/or something else?\n\n\u003e Here is one consideration: /.../\n\nFor that to work we\u0027d need prebuilts of all the dependencies. That\u0027s possible, but then we can just as well continue to use `shared_libs`. The problem is that we\u0027d have to duplicate the whole set of libbinder_ndk dependencies in the prebuilt definition and for our tests(*). That\u0027s a libbinder_ndk implementation detail, which means the tests get brittle.\n\nOtoh, if the worry is ODR issues then our tests would be just as susceptible as \nanyone else\u0027s, if we start to use binder more in them. As long as we don\u0027t, we would be fine with a .so without implementation code and DT_NEEDED entries, i.e. basically the stub library. Would that even theoretically work, or can we get calls into it even when we don\u0027t actively use it? Note we also use aidl_interface with the ndk backend.\n\n*) This uses the Soong SDK snapshot functionality to autogenerate the Android.bp files, and it currently doesn\u0027t handle internal shared lib dependencies within the SDK.",
      "parentUuid": "7ff44be2_caa1f6ed",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 9
      },
      "revId": "11f6458eefedc1f57e45e421f2656cbd507f4d2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a85eee93_f818b240",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-13T22:26:48Z",
      "side": 1,
      "message": "\u003e To be more precise, your worry is ODR violations, and/or something else?\n\nMhmmm.\n\n\u003e For that to work we\u0027d need prebuilts of all the dependencies.\n\nwhole_static_libs collapses everything into one library.\n\n\u003e The problem is that we\u0027d have to duplicate the whole set of libbinder_ndk dependencies in the prebuilt definition and for our tests(*).\n\nCould cc_defaults help with this? We could maintain it here. See defaults with name.*_user.\n\n\u003e Otoh, if the worry is ODR issues then our tests would be just as susceptible as \nanyone else\u0027s\n\nYou are making this change specifically to enable a linking configuration that avoids ODR problems for these tests. If you still used shared_libs, then sure, it would be susceptable, but it\u0027s not a specific issue.\n\n\u003e As long as we don\u0027t, we would be fine with a .so without implementation code and DT_NEEDED entries, i.e. basically the stub library. Would that even theoretically work, or can we get calls into it even when we don\u0027t actively use it?\n\nThere will be many codepaths required in libbinder to do things like initializing libraries that aren\u0027t directly related to using binder, but are incidental to it. So, I don\u0027t think a raw stub library would work.\n\n\u003e Note we also use aidl_interface with the ndk backend.\n\nThis is a wrapper over libbinder only.\n\n\u003e it currently doesn\u0027t handle internal shared lib dependencies within the SDK.\n\nCould you share more information about this (a bug or specific link)? I\u0027m not familiar with this problem.",
      "parentUuid": "5822e464_6f64ca70",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 9
      },
      "revId": "11f6458eefedc1f57e45e421f2656cbd507f4d2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eefceeff_f50766a2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-13T23:49:23Z",
      "side": 1,
      "message": "\u003e Mhmmm.\n\nHuh. I\u0027m going to assume it is only the ODR issue then.\n\n\u003e whole_static_libs collapses everything into one library.\n\nOh, you meant that we\u0027d put this ad-hoc art-host-native-deps module here and create a prebuilt out of it? That didn\u0027t occur to me.\n\nWith that approach we wouldn\u0027t risk ODR problems as long as we don\u0027t create any other prebuilts of any of the dependencies, at least. We already have liblog, so that\u0027d need to be left out. It\u0027d mean a more hidden sort of implementation dependency.\n\n\u003e Could cc_defaults help with this? We could maintain it here.\n\nThis git project isn\u0027t in the thin manifest, so such things would need to go into another place that is, e.g. frameworks/libs/modules-utils.\n\n\u003e If you still used shared_libs, then sure, it would be susceptable, but it\u0027s not a specific issue.\n\nI don\u0027t follow. Using separate prebuilts of the individual shared libs and depending on them using shared_libs would be the safe way to avoid ODR issues. It\u0027s having a compound library built with whole_static_libs that opens up the risk of ODR problems, isn\u0027t it?\n\n\u003e So, I don\u0027t think a raw stub library would work.\n\nNo need to consider that then. Good, didn\u0027t particularly like that approach anyway.\n\n\u003e Could you share more information about this (a bug or specific link)?\n\nI don\u0027t think there\u0027s a ticket for it in its general form. After all, the original intent was to support SDKs, which aren\u0027t supposed to include implementations. Then reality came along and we ended up with both test-exports and host-exports that have that. FWIW there\u0027s b/178691801 that touches on the problem specifically for dynamically linked host binaries.",
      "parentUuid": "a85eee93_f818b240",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 9
      },
      "revId": "11f6458eefedc1f57e45e421f2656cbd507f4d2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0640f92_250c3c54",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-10T13:03:27Z",
      "side": 1,
      "message": "This is in http://r.android.com/q/topic:art-libbinder-ndk-test.",
      "range": {
        "startLine": 16,
        "startChar": 18,
        "endLine": 16,
        "endChar": 62
      },
      "revId": "11f6458eefedc1f57e45e421f2656cbd507f4d2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be35490f_12171986",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-10T20:49:16Z",
      "side": 1,
      "message": "Why is this needed?",
      "revId": "11f6458eefedc1f57e45e421f2656cbd507f4d2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c195d1ab_a3e3191d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2022-06-10T22:51:49Z",
      "side": 1,
      "message": "Discussed in the other thread.",
      "parentUuid": "be35490f_12171986",
      "revId": "11f6458eefedc1f57e45e421f2656cbd507f4d2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca879581_9f7af44f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-06-11T00:27:01Z",
      "side": 1,
      "message": "haha, yeah, sorry - this was a visceral response - forgot to delete it...",
      "parentUuid": "c195d1ab_a3e3191d",
      "revId": "11f6458eefedc1f57e45e421f2656cbd507f4d2c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}