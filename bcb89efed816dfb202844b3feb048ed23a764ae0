{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cdf286e1_36155871",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-02-01T22:34:42Z",
      "side": 0,
      "message": "wow! There must be some reason for doing things this way, though I can only presume they are historical. Stephen, do you know?",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 87,
        "endChar": 5
      },
      "revId": "bcb89efed816dfb202844b3feb048ed23a764ae0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62f2326d_3762f0fa",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-02-01T22:37:04Z",
      "side": 0,
      "message": "also - is there anything left in b/179067202 after this?",
      "parentUuid": "cdf286e1_36155871",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 87,
        "endChar": 5
      },
      "revId": "bcb89efed816dfb202844b3feb048ed23a764ae0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f59b9a8_847dc93e",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-02-01T22:59:45Z",
      "side": 0,
      "message": "There is - actual `assert!` or `assert_eq!` which may occur in the generated AIDL or in some of the binder code will trigger a `panic!`. This will not currently be propagated as an error code, as the server process will be taken down. This code would have converted asserts triggered in the binder server into error codes. Unfortunately, this would also have been true of asserts in *user* code, which likely should have been taking the process down before too.\n\nThat bug is intended to track the replacement of those functions in the binder code or AIDL code with ones which return early with an error rather than panicking.",
      "parentUuid": "62f2326d_3762f0fa",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 87,
        "endChar": 5
      },
      "revId": "bcb89efed816dfb202844b3feb048ed23a764ae0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56b2aa8d_dca88db4",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-02-01T23:32:10Z",
      "side": 0,
      "message": "We never generate asserts in AIDL. This has nothing to do with user code. These are just the asserts in this test case that are being caught and turned into a failure. The basic issue is that we have two different test frameworks, gtest and rust. When I switched the driver to gtest instead of rust, I didn\u0027t want to replace all the existing asserts in the test on the rust side so I caught the unwinds instead.\n\nI\u0027ll replace the assert macros in this test with a macro that prints the locations and returns failure instead.",
      "parentUuid": "2f59b9a8_847dc93e",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 87,
        "endChar": 5
      },
      "revId": "bcb89efed816dfb202844b3feb048ed23a764ae0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}