{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3182329d_bfd8bd0b",
        "filename": "libs/binder/RpcServer.cpp",
        "patchSetId": 7
      },
      "lineNbr": 603,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-09-23T16:27:37Z",
      "side": 1,
      "message": "This API is only used a couple of times in this git project. Do we need to have an internal and external version of it?\n\nI believe the custom \u0027accept4\u0027 function would also simplify +ahomescu\u0027s life. Maybe we export the accept function API, only have one?",
      "range": {
        "startLine": 600,
        "startChar": 0,
        "endLine": 603,
        "endChar": 0
      },
      "revId": "c478c2828c9b7083dbacc6dc1e68a84061fcd07c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "feae41cc_caecc062",
        "filename": "libs/binder/RpcServer.cpp",
        "patchSetId": 7
      },
      "lineNbr": 603,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-09-23T21:55:50Z",
      "side": 1,
      "message": "\u003e I believe the custom \u0027accept4\u0027 function would also simplify +ahomescu\u0027s life.\n\nI thought so too, but Trusty services have their own separate event loop. RpcServer::join is not used at all in Trusty.\n\nWe might want to use it later when Trusty gets threads, but that will take a while.",
      "parentUuid": "3182329d_bfd8bd0b",
      "range": {
        "startLine": 600,
        "startChar": 0,
        "endLine": 603,
        "endChar": 0
      },
      "revId": "c478c2828c9b7083dbacc6dc1e68a84061fcd07c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f278e0a_631e0f47",
        "filename": "libs/binder/RpcServer.cpp",
        "patchSetId": 7
      },
      "lineNbr": 603,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2022-10-03T11:14:23Z",
      "side": 1,
      "message": "Ok, leaving this as is for now.",
      "parentUuid": "feae41cc_caecc062",
      "range": {
        "startLine": 600,
        "startChar": 0,
        "endLine": 603,
        "endChar": 0
      },
      "revId": "c478c2828c9b7083dbacc6dc1e68a84061fcd07c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f896c12_1df7fb62",
        "filename": "libs/binder/RpcTransportUtils.h",
        "patchSetId": 7
      },
      "lineNbr": 110,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-09-23T16:27:37Z",
      "side": 1,
      "message": "fmayle@ recently added this code in frameworks/native/libs/binder/RpcTransportRaw.cpp - would it make sense to reuse that? Anyway - he is more familiar with this",
      "range": {
        "startLine": 110,
        "startChar": 23,
        "endLine": 110,
        "endChar": 43
      },
      "revId": "c478c2828c9b7083dbacc6dc1e68a84061fcd07c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8f706c7_913d9e1c",
        "filename": "libs/binder/RpcTransportUtils.h",
        "patchSetId": 7
      },
      "lineNbr": 110,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-09-27T01:23:15Z",
      "side": 1,
      "message": "yeah, i wonder if we can wrap `transportFd` in `RpcTransportRaw` to dedup the code\n\nit probably looks like overkill, but actually i think we\u0027d want some features from it, e.g. this currently doesn\u0027t handle `RpcServer::shutdown` correctly IIUC. it should be easier to respect the shutdown trigger if you read via `RpcTransportRaw`",
      "parentUuid": "7f896c12_1df7fb62",
      "range": {
        "startLine": 110,
        "startChar": 23,
        "endLine": 110,
        "endChar": 43
      },
      "revId": "c478c2828c9b7083dbacc6dc1e68a84061fcd07c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a966828d_a0db54c0",
        "filename": "libs/binder/RpcTransportUtils.h",
        "patchSetId": 7
      },
      "lineNbr": 110,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2022-10-03T11:14:23Z",
      "side": 1,
      "message": "I\u0027ve had a crack at this but I\u0027m not sure I fully understand the properties that this needs to have, so please excuse my naivete and let me know if I\u0027ve done it wrong.\n\nI\u0027ve extracted the code from `RpcTransportRaw` into this header, and I wrapped the sending (RpcSession) in `RpcTransport`, which in this UDS/noTLS case is `RpcTransportRaw`.\n\nI did not do it for the receiver (RpcServer) because that code does not seem to have the same `RpcServer::shutdown` handling. Please correct me if that\u0027s wrong.\n\nThe `RpcTransport` is created from the local `mCtx`. That does not work for UDS/TLS because the transport does not support passing FDs. Creating `RpcTransportRaw` directly from `RpcSession` makes the Trusty libraries unhappy. If you have ideas on how to do this cleanly, I\u0027m happy to hear it. But I\u0027m okay with the current solution, even though it\u0027s a bit of an arbitrary limitation.",
      "parentUuid": "d8f706c7_913d9e1c",
      "range": {
        "startLine": 110,
        "startChar": 23,
        "endLine": 110,
        "endChar": 43
      },
      "revId": "c478c2828c9b7083dbacc6dc1e68a84061fcd07c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39da04ef_f726bccc",
        "filename": "libs/binder/include/binder/RpcServer.h",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2022-09-23T14:41:25Z",
      "side": 1,
      "message": "nameless Unix domain socket pair -\u003e Unix domain socket\n(Since you don\u0027t actually require the other things?)\n\nOr should it be a set of UDS socket pairs?",
      "range": {
        "startLine": 53,
        "startChar": 36,
        "endLine": 53,
        "endChar": 68
      },
      "revId": "c478c2828c9b7083dbacc6dc1e68a84061fcd07c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2195590b_b69dc559",
        "filename": "libs/binder/include/binder/RpcServer.h",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2022-09-23T14:47:57Z",
      "side": 1,
      "message": "The connectFd can be any preconnected UDS, true. I can update the comment but also welcome naming suggestions. Need to differentiate it from the existing UDS functions somehow.",
      "parentUuid": "39da04ef_f726bccc",
      "range": {
        "startLine": 53,
        "startChar": 36,
        "endLine": 53,
        "endChar": 68
      },
      "revId": "c478c2828c9b7083dbacc6dc1e68a84061fcd07c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3da88d52_f42909f3",
        "filename": "libs/binder/include/binder/RpcServer.h",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2022-09-23T15:00:49Z",
      "side": 1,
      "message": "socketFactorySocket ? Maybe that\u0027s too Java.\n\n\"... creating socket pairs on demand for connections between client and server, using a pre-connected Unix domain socket to pass their FDs.\"\n\nOr something?",
      "parentUuid": "2195590b_b69dc559",
      "range": {
        "startLine": 53,
        "startChar": 36,
        "endLine": 53,
        "endChar": 68
      },
      "revId": "c478c2828c9b7083dbacc6dc1e68a84061fcd07c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4639044_b54a6bb8",
        "filename": "libs/binder/include/binder/RpcServer.h",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-09-27T01:23:15Z",
      "side": 1,
      "message": "maybe\n\n```\n    /**\n     * Creates an RPC server that bootstraps sessions using an existing\n     * Unix domain socket pair.\n     *\n     * Callers should create a pair of SOCK_STREAM Unix domain sockets, pass\n     * one to RpcServer::setupUnixDomainSocketBootstrapServer and the other\n     * to RpcSession::setupUnixDomainSocketBootstrapClient. Multiple client\n     * session can be created from the client end of the pair.\n     */\n    [[nodiscard]] status_t setupUnixDomainSocketBootstrapServer(base::unique_fd serverFd);\n```\n\nand put the implementation notes in the cpp file \n\n\ndo we want to support multiple clients? i think the current implementation technically supports it (haven\u0027t review super closely yet though). if one day we support multiplexing over a single connection, then we could use the original socket pair directly as the session\u0027s connection to simplify, but only if we disallow multiple clients",
      "parentUuid": "3da88d52_f42909f3",
      "range": {
        "startLine": 53,
        "startChar": 36,
        "endLine": 53,
        "endChar": 68
      },
      "revId": "c478c2828c9b7083dbacc6dc1e68a84061fcd07c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05def815_49c6c116",
        "filename": "libs/binder/include/binder/RpcServer.h",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2022-10-03T11:14:23Z",
      "side": 1,
      "message": "Done. \nRe multiple clients: that\u0027s supported, yes. ClientA can pass their bootstrap FD to ClientB, and ClientB can use that to start new sessions. I think that\u0027s a nice property and worth preserving. We might even have a use case for it in U.",
      "parentUuid": "c4639044_b54a6bb8",
      "range": {
        "startLine": 53,
        "startChar": 36,
        "endLine": 53,
        "endChar": 68
      },
      "revId": "c478c2828c9b7083dbacc6dc1e68a84061fcd07c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b85543ea_e353e844",
        "filename": "libs/binder/tests/BinderRpcTestServerConfig.aidl",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-09-23T16:27:37Z",
      "side": 1,
      "message": "int fd in parcelable? It can\u0027t be passed over processes like this. Does this rely on fork, or should it be owned as ParcelFileDescriptor here?",
      "range": {
        "startLine": 24,
        "startChar": 4,
        "endLine": 24,
        "endChar": 7
      },
      "revId": "c478c2828c9b7083dbacc6dc1e68a84061fcd07c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fb0248b_e4984dd8",
        "filename": "libs/binder/tests/BinderRpcTestServerConfig.aidl",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-09-24T00:12:22Z",
      "side": 1,
      "message": "Afaict, this relies on the FD making it past fork+exec and into the test service. It should be fine as long as `unixPairConnectFd` was not created with `SOCK_CLOEXEC` (or equivalent).\n\nI don\u0027t think `ParcelFileDescriptor` works here because `writeToFd` writes this parcelable to a temporary `Parcel` then sends that over the wire using `parcel.data()` and `parcel.dataSize()`. That doesn\u0027t touch the objects array, so any file descriptors embedded in the `Parcel` wouldn\u0027t get transmitted.",
      "parentUuid": "b85543ea_e353e844",
      "range": {
        "startLine": 24,
        "startChar": 4,
        "endLine": 24,
        "endChar": 7
      },
      "revId": "c478c2828c9b7083dbacc6dc1e68a84061fcd07c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6cfbd78_f1ab55cb",
        "filename": "libs/binder/tests/BinderRpcTestServerConfig.aidl",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2022-09-26T08:39:36Z",
      "side": 1,
      "message": "Or we could clear the CLOEXEC? http://cs/android-internal/external/minijail/libminijail.c?rcl\u003d9c0d84ba5bfe78ec1ea0e2c38658fe63e78a2616\u0026l\u003d2972\n\n(Although a bunch of nasty race conditions lurk if other fork() calls might be happening.)",
      "parentUuid": "5fb0248b_e4984dd8",
      "range": {
        "startLine": 24,
        "startChar": 4,
        "endLine": 24,
        "endChar": 7
      },
      "revId": "c478c2828c9b7083dbacc6dc1e68a84061fcd07c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc515e6f_20eb0822",
        "filename": "libs/binder/tests/BinderRpcTestServerConfig.aidl",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2022-10-03T11:14:23Z",
      "side": 1,
      "message": "Right, yeah, doesn\u0027t work because the Parcel is sent to the child over a pipe. Suggestions welcome on how to make this better. Didn\u0027t want to go into too much trouble in test code.",
      "parentUuid": "d6cfbd78_f1ab55cb",
      "range": {
        "startLine": 24,
        "startChar": 4,
        "endLine": 24,
        "endChar": 7
      },
      "revId": "c478c2828c9b7083dbacc6dc1e68a84061fcd07c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "477d30a3_f46854b4",
        "filename": "libs/binder/tests/binderRpcTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 150,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-09-24T00:12:22Z",
      "side": 1,
      "message": "We need these FDs to make it past both a fork and an exec, so we need them to not be CLOEXEC. `base::Socketpair` seems fine in that regard, but a comment could make this explicit?",
      "revId": "c478c2828c9b7083dbacc6dc1e68a84061fcd07c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9489616_b07f995b",
        "filename": "libs/binder/tests/binderRpcTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 150,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2022-10-03T11:14:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "477d30a3_f46854b4",
      "revId": "c478c2828c9b7083dbacc6dc1e68a84061fcd07c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}