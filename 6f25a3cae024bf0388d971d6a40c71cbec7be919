{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "85bcdb25_bc5da4b9",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 10
      },
      "lineNbr": 283,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-29T16:50:54Z",
      "side": 1,
      "message": "you don\u0027t want to hold the mutex for the entire time recording is on. you want to hold it just long enough to read/write to the protected fields, i.e, take it at the start of this function and unlock it at the end. same for `stopRecordingTransactions`. added notes for `BBinder::transact` in another comment\n\nissues with the current approach\n\n* multiple threads can call `BBinder::transact`. currently the mutex doesn\u0027t help serialize write calls to the FD\n* startRecording and stopRecording could be called from different threads. it is undefined behavior to lock a mutex in one thread and then unlock it in another\n* it is undefined behavior to call `try_lock` from a thread that already locked a mutex\n\n(see https://en.cppreference.com/w/cpp/thread/mutex)",
      "revId": "6f25a3cae024bf0388d971d6a40c71cbec7be919",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe4d5d72_0e318e51",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 10
      },
      "lineNbr": 365,
      "author": {
        "id": 1956970
      },
      "writtenOn": "2022-08-29T09:39:13Z",
      "side": 1,
      "message": "Having getOrCreateExtras() called every time seems costly. Is there a more efficient way to do the recording check?",
      "range": {
        "startLine": 365,
        "startChar": 4,
        "endLine": 365,
        "endChar": 35
      },
      "revId": "6f25a3cae024bf0388d971d6a40c71cbec7be919",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fee2007_a9ca548f",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 10
      },
      "lineNbr": 365,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-29T16:50:54Z",
      "side": 1,
      "message": "The load should be cheap enough, but we don\u0027t want to fallback to creating extras. maybe something like\n\n```\nExtras* e \u003d mExtras.load(std::memory_order_acquire);\nif (e !\u003d nullptr \u0026\u0026 e-\u003emRecordingOn) {\n```",
      "parentUuid": "fe4d5d72_0e318e51",
      "range": {
        "startLine": 365,
        "startChar": 4,
        "endLine": 365,
        "endChar": 35
      },
      "revId": "6f25a3cae024bf0388d971d6a40c71cbec7be919",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "581ebb62_fa40dce5",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 10
      },
      "lineNbr": 370,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-29T16:50:54Z",
      "side": 1,
      "message": "you want to take the mutex here, maybe something like\n\n```\n    if (CC_UNLIKELY(e-\u003emRecordingOn.load(std::memory_order_acquire))) {\n        std::lock_guard\u003cstd::mutex\u003e guard(e-\u003emRecordingLock);\n        if (e-\u003emRecordingOn.load(std::memory_order_acquire)) {\n            android::BinderRecordReplay::RecordedTransaction transaction(code, flags, data, *reply,\n                                                                     err);\n            transaction.dumpToFile(e-\u003emRecordingFd);\n        }\n    }\n```\n\nsince it reads `e-\u003emRecordingOn` outside the lock, we should make that field `std::atomic\u003cbool\u003e`. then, you need to check it again inside the mutex to avoid possibly writing to a bad FD",
      "range": {
        "startLine": 366,
        "startChar": 0,
        "endLine": 370,
        "endChar": 5
      },
      "revId": "6f25a3cae024bf0388d971d6a40c71cbec7be919",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e14f33b0_9f9211af",
        "filename": "libs/binder/BinderRecordReplay.cpp",
        "patchSetId": 10
      },
      "lineNbr": 37,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-08-29T15:49:49Z",
      "side": 1,
      "message": "take a lock here and in readFromFile so we don\u0027t change values in the middle of other function calls?\nMaybe change the name of the mutex from `dumpMutex`",
      "range": {
        "startLine": 37,
        "startChar": 26,
        "endLine": 37,
        "endChar": 41
      },
      "revId": "6f25a3cae024bf0388d971d6a40c71cbec7be919",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32339391_a396b17b",
        "filename": "libs/binder/BinderRecordReplay.cpp",
        "patchSetId": 10
      },
      "lineNbr": 37,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-29T16:53:15Z",
      "side": 1,
      "message": "don\u0027t bother with a mutex inside `RecordedTransaction`. it is a transient object that is only visible to one thread at the moment (and IMO if we add more use cases later, it would make the most sense to have the callers manage synchronization)",
      "parentUuid": "e14f33b0_9f9211af",
      "range": {
        "startLine": 37,
        "startChar": 26,
        "endLine": 37,
        "endChar": 41
      },
      "revId": "6f25a3cae024bf0388d971d6a40c71cbec7be919",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24abab9a_573f3b40",
        "filename": "libs/binder/BinderRecordReplay.cpp",
        "patchSetId": 10
      },
      "lineNbr": 56,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-29T17:37:51Z",
      "side": 1,
      "message": "making copies is unfortunate. this is part of why i was pushing back on the idea of adding a class. in languages with manual memory management, it isn\u0027t easy to design a clean object based API that supports both owning the data (as you want when you read) and referencing data (as you want when you write)\n\nalso, unlike a purely function based API, users can now stack allocate this class and then we can potentially run into issues with prebuilts",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 56,
        "endChar": 5
      },
      "revId": "6f25a3cae024bf0388d971d6a40c71cbec7be919",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "071683af_34f121b2",
        "filename": "libs/binder/BinderRecordReplay.cpp",
        "patchSetId": 10
      },
      "lineNbr": 56,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-08-29T17:43:43Z",
      "side": 1,
      "message": "(not a blocker if everyone else is happy with it)",
      "parentUuid": "24abab9a_573f3b40",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 56,
        "endChar": 5
      },
      "revId": "6f25a3cae024bf0388d971d6a40c71cbec7be919",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5358c84_174b0700",
        "filename": "libs/binder/include/binder/Binder.h",
        "patchSetId": 10
      },
      "lineNbr": 107,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-08-29T15:49:49Z",
      "side": 1,
      "message": "comment descriptions here",
      "range": {
        "startLine": 106,
        "startChar": 0,
        "endLine": 107,
        "endChar": 41
      },
      "revId": "6f25a3cae024bf0388d971d6a40c71cbec7be919",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a281631_70b34aed",
        "filename": "libs/binder/include/binder/BinderRecordReplay.h",
        "patchSetId": 10
      },
      "lineNbr": 41,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-08-29T15:49:49Z",
      "side": 1,
      "message": "Is this needed anywhere? We could remove this default constructor if it\u0027s invalid.",
      "range": {
        "startLine": 40,
        "startChar": 4,
        "endLine": 41,
        "endChar": 26
      },
      "revId": "6f25a3cae024bf0388d971d6a40c71cbec7be919",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a283b44_4c06d0cc",
        "filename": "libs/binder/include/binder/BinderRecordReplay.h",
        "patchSetId": 10
      },
      "lineNbr": 50,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-08-29T15:49:49Z",
      "side": 1,
      "message": "do we want these to overwrite the existing contents of the object? If so, I think we should have comments noting that.",
      "range": {
        "startLine": 48,
        "startChar": 4,
        "endLine": 50,
        "endChar": 43
      },
      "revId": "6f25a3cae024bf0388d971d6a40c71cbec7be919",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "013aca96_6a331e8f",
        "filename": "libs/binder/include/binder/BinderRecordReplay.h",
        "patchSetId": 10
      },
      "lineNbr": 52,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-08-29T15:49:49Z",
      "side": 1,
      "message": "Add a comment describing what makes this valid?",
      "range": {
        "startLine": 52,
        "startChar": 4,
        "endLine": 52,
        "endChar": 25
      },
      "revId": "6f25a3cae024bf0388d971d6a40c71cbec7be919",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9c2bd48_217e8c63",
        "filename": "libs/binder/include/binder/BinderRecordReplay.h",
        "patchSetId": 10
      },
      "lineNbr": 82,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-08-29T15:49:49Z",
      "side": 1,
      "message": "add the `m` prefix to these fields. It makes it easier to understand that these are member variables in the function definitions.\n`mValid`, `mSent`, ...",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 82,
        "endChar": 33
      },
      "revId": "6f25a3cae024bf0388d971d6a40c71cbec7be919",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a7a01a6_4c24703c",
        "filename": "libs/binder/include/binder/BpBinder.h",
        "patchSetId": 10
      },
      "lineNbr": 55,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-08-29T15:49:49Z",
      "side": 1,
      "message": "comment descriptions here",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 55,
        "endChar": 43
      },
      "revId": "6f25a3cae024bf0388d971d6a40c71cbec7be919",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}