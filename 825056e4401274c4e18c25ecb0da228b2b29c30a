{
  "comments": [
    {
      "key": {
        "uuid": "a2379cdf_7b1d1fb7",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2019-01-09T21:10:07Z",
      "side": 1,
      "message": "Jiyong, can you help with the right format for this? How should I write this so that the \"# apex\" symbols aren\u0027t in the NDK.\n\nI seem to need to unfreeze the ABI of the NDK whether I have it like this or move the \"introduced\u003d29\" tag to only the NDK symbols. Is there an example for configuring the symbols only for the APEX variant?",
      "revId": "825056e4401274c4e18c25ecb0da228b2b29c30a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "706f1b87_1e8c9d7b",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-01-10T05:26:24Z",
      "side": 1,
      "message": "I think you are doing this right. Do you see the # apex symbols in the NDK stub library? How did you check that?",
      "parentUuid": "a2379cdf_7b1d1fb7",
      "revId": "825056e4401274c4e18c25ecb0da228b2b29c30a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "968fb690_96f69a21",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2019-01-10T17:24:54Z",
      "side": 1,
      "message": "All I know is that this caused the libbinder_ndk ABI dump to fail (but I didn\u0027t think this should have changed the NDK ABI). Maybe the script is dumping the platform libs. I will look into this more today.",
      "parentUuid": "706f1b87_1e8c9d7b",
      "revId": "825056e4401274c4e18c25ecb0da228b2b29c30a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd5baa92_cb09365e",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-01-10T17:40:48Z",
      "side": 1,
      "message": "\u003e libbinder_ndk ABI dump to fail\n\nThat\u0027s expected because this file is also used as the version script for libbinder_ndk. With this change, you are making the 5 symbols public  in the generated *.so file. (before this change, they are matched by \"*\" and were \u0027local\u0027, which means hidden.) When used as a version script, the tags (# apex, # vndk, etc.) are just comments.\n\n\u003e Maybe the script is dumping the platform libs\nYes sure. The dumping shouldn\u0027t be done with stubs.\n\nI think we just need to update the ABI dump.",
      "parentUuid": "968fb690_96f69a21",
      "revId": "825056e4401274c4e18c25ecb0da228b2b29c30a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68953cab_d58d7fb5",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2019-01-10T20:55:36Z",
      "side": 1,
      "message": "Alright, that makes sense. It just felt a bit weird (it just wasn\u0027t obvious to me that the \u0027# apex\u0027 symbols don\u0027t make it to be part of the NDK). Could we make that better?\n\nIs there a reason there is not an APEX variant of the library (libbinder_ndk.apex)?",
      "parentUuid": "dd5baa92_cb09365e",
      "revId": "825056e4401274c4e18c25ecb0da228b2b29c30a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14365212_7bcef66b",
        "filename": "libs/binder/ndk/libbinder_ndk.map.txt",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-01-11T02:31:42Z",
      "side": 1,
      "message": "I think you are mixing two concepts. We have two levels symbol visibility: the visibility at build time and the visibility at runtime. For a shared library, we have different sets of API surface for different types of clients. That is done by creating different stubs libraries from this \u0027map\u0027 file. So for example, when building a stubs for NDK clients, only the symbols that is without # vndk, # apex tags are included. When building a stub for vendors, # vndk symbols are added to the set. Similar for # apex.\n\nThe visibility at runtime is controlled by the version script. And since this is a runtime thing, it can\u0027t distinguish its   clients. Symbols that are matched to \"local: *\" are made hidden ( \u003d removed from the dynamic symbol table).\n\n\u003e Is there a reason there is not an APEX variant of the library (libbinder_ndk.apex)?\n\nWhat do you mean by apex variant? If it means \u0027a variant of libbinder_ndk that things in APEXes can link to\u0027, then we already have. By having stubs: {...} in Android.bp, we are creating apex-specific stubs lib from libbinder_ndk and the stubs lib is used for APEXes.",
      "parentUuid": "68953cab_d58d7fb5",
      "revId": "825056e4401274c4e18c25ecb0da228b2b29c30a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}