{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3af139fc_b27872c3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-21T10:51:42Z",
      "side": 1,
      "message": "Hi David,\n\nSorry for the late reply. I was OOO last Friday.",
      "revId": "714af587a4aba04d1bf8771356d3c8966b07053b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03c4d308_19de035a",
        "filename": "libs/binder/libbinder_rpc_unstable.cpp",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-21T10:51:42Z",
      "side": 1,
      "message": "What about making this method part of ARpcServer and call it `asRpcServer()`? Then we don\u0027t need any param for it.",
      "range": {
        "startLine": 38,
        "startChar": 21,
        "endLine": 38,
        "endChar": 32
      },
      "revId": "714af587a4aba04d1bf8771356d3c8966b07053b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2a47bd0_e25412da",
        "filename": "libs/binder/libbinder_rpc_unstable.cpp",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2022-11-21T11:40:00Z",
      "side": 1,
      "message": "Eh, I would prefer not to do that. `ARpcServer` is not a real C++ object. It is never allocated or destructed, it\u0027s only an opaque type we expose to C. What you\u0027re suggestion I think would work but it\u0027s very subtle - eg. need to make sure that C++ doesn\u0027t expect a vtable entry for that function, because there isn\u0027t a vtable.",
      "parentUuid": "03c4d308_19de035a",
      "range": {
        "startLine": 38,
        "startChar": 21,
        "endLine": 38,
        "endChar": 32
      },
      "revId": "714af587a4aba04d1bf8771356d3c8966b07053b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "301452e6_5f5adfd1",
        "filename": "libs/binder/libbinder_rpc_unstable.cpp",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-21T13:36:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a2a47bd0_e25412da",
      "range": {
        "startLine": 38,
        "startChar": 21,
        "endLine": 38,
        "endChar": 32
      },
      "revId": "714af587a4aba04d1bf8771356d3c8966b07053b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6121d241_ed80b3c9",
        "filename": "libs/binder/libbinder_rpc_unstable.cpp",
        "patchSetId": 13
      },
      "lineNbr": 39,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-21T10:51:42Z",
      "side": 1,
      "message": "Can we cast two unrelated types like this? It doesn\u0027t look very safe tbh. Otherwise, such usage is not allowed by many cpp linters[1].\n\n[1] https://rules.sonarsource.com/cpp/RSPEC-5275",
      "range": {
        "startLine": 39,
        "startChar": 15,
        "endLine": 39,
        "endChar": 31
      },
      "revId": "714af587a4aba04d1bf8771356d3c8966b07053b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7744c29_d4fc3ce6",
        "filename": "libs/binder/libbinder_rpc_unstable.cpp",
        "patchSetId": 13
      },
      "lineNbr": 39,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2022-11-21T11:40:00Z",
      "side": 1,
      "message": "Well yeah, it\u0027s not and that\u0027s expected. We\u0027re bridging C++ and Rust via C, so we are going to lose some safety guarantees around that boundary.\n\nTry to look at is the big picture: `struct ARpcServer*` is a pointer of an opaque type, it\u0027s only purpose is to be a token that we give to C/Rust such that we can find the original `sp\u003cRpcServer\u003e` object when we get it back. The `reinterpret_cast` is just a convenient way of implementing that token - that way we can find the original object in `O(1)`.\n\nThe token is exposed to C (unsafe, explicit malloc/free) and immediately wrapped in a Rust object (safe, automatic malloc/free).",
      "parentUuid": "6121d241_ed80b3c9",
      "range": {
        "startLine": 39,
        "startChar": 15,
        "endLine": 39,
        "endChar": 31
      },
      "revId": "714af587a4aba04d1bf8771356d3c8966b07053b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c39e545b_6442976d",
        "filename": "libs/binder/libbinder_rpc_unstable.cpp",
        "patchSetId": 13
      },
      "lineNbr": 39,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-21T13:36:33Z",
      "side": 1,
      "message": "As discussed offline, this is okay since it\u0027s only C code.",
      "parentUuid": "c7744c29_d4fc3ce6",
      "range": {
        "startLine": 39,
        "startChar": 15,
        "endLine": 39,
        "endChar": 31
      },
      "revId": "714af587a4aba04d1bf8771356d3c8966b07053b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82a4c73b_04bd2079",
        "filename": "libs/binder/libbinder_rpc_unstable.cpp",
        "patchSetId": 13
      },
      "lineNbr": 53,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-21T10:51:42Z",
      "side": 1,
      "message": "Can this also be part of ARpcServer like `free()` or part of its destructor?",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 53,
        "endChar": 0
      },
      "revId": "714af587a4aba04d1bf8771356d3c8966b07053b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3645046_3e3e1d2f",
        "filename": "libs/binder/libbinder_rpc_unstable.cpp",
        "patchSetId": 13
      },
      "lineNbr": 53,
      "author": {
        "id": 1059815
      },
      "writtenOn": "2022-11-21T11:40:00Z",
      "side": 1,
      "message": "See the comment on `toRpcServer` but with the caveat that this wouldn\u0027t work - ARpcServer is never destructed (or allocated in the first place).",
      "parentUuid": "82a4c73b_04bd2079",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 53,
        "endChar": 0
      },
      "revId": "714af587a4aba04d1bf8771356d3c8966b07053b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16d1a773_3ea7d6d8",
        "filename": "libs/binder/libbinder_rpc_unstable.cpp",
        "patchSetId": 13
      },
      "lineNbr": 53,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-21T13:36:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d3645046_3e3e1d2f",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 53,
        "endChar": 0
      },
      "revId": "714af587a4aba04d1bf8771356d3c8966b07053b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e991b645_5387e2aa",
        "filename": "libs/binder/libbinder_rpc_unstable.cpp",
        "patchSetId": 13
      },
      "lineNbr": 107,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-21T13:36:33Z",
      "side": 1,
      "message": "Is this method needed for the current change?",
      "range": {
        "startLine": 105,
        "startChar": 0,
        "endLine": 107,
        "endChar": 1
      },
      "revId": "714af587a4aba04d1bf8771356d3c8966b07053b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cd68b42_59defcfb",
        "filename": "libs/binder/rust/rpcbinder/src/server.rs",
        "patchSetId": 13
      },
      "lineNbr": 30,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-21T13:36:33Z",
      "side": 1,
      "message": "Comment needs to be updated.",
      "range": {
        "startLine": 30,
        "startChar": 8,
        "endLine": 30,
        "endChar": 14
      },
      "revId": "714af587a4aba04d1bf8771356d3c8966b07053b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5babe4a_a3f86f60",
        "filename": "libs/binder/rust/rpcbinder/src/server.rs",
        "patchSetId": 13
      },
      "lineNbr": 33,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-21T13:36:33Z",
      "side": 1,
      "message": "Need to update the comment",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 23
      },
      "revId": "714af587a4aba04d1bf8771356d3c8966b07053b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "934841d0_5fa59203",
        "filename": "libs/binder/rust/rpcbinder/src/server.rs",
        "patchSetId": 13
      },
      "lineNbr": 98,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-21T13:36:33Z",
      "side": 1,
      "message": "Why these methods are in RpcServerRef instead of RpcServer?",
      "range": {
        "startLine": 96,
        "startChar": 4,
        "endLine": 98,
        "endChar": 5
      },
      "revId": "714af587a4aba04d1bf8771356d3c8966b07053b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}