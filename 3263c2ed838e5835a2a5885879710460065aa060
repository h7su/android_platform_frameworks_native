{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "157552bd_8e4e94de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 56
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-04-19T04:08:18Z",
      "side": 1,
      "message": "minor comments... that can be ignored until WIP gets dropped.",
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54cf023c_b48dd4fc",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 56
      },
      "lineNbr": 65,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-04-19T04:08:18Z",
      "side": 1,
      "message": "+1",
      "range": {
        "startLine": 65,
        "startChar": 13,
        "endLine": 65,
        "endChar": 31
      },
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f8497fc_d788fbbf",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 56
      },
      "lineNbr": 65,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-05-17T02:31:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "54cf023c_b48dd4fc",
      "range": {
        "startLine": 65,
        "startChar": 13,
        "endLine": 65,
        "endChar": 31
      },
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a43758a_22479655",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 56
      },
      "lineNbr": 69,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-04-19T04:08:18Z",
      "side": 1,
      "message": "copy this as well?... or is the caller guaranteed to outlive this?",
      "range": {
        "startLine": 69,
        "startChar": 20,
        "endLine": 69,
        "endChar": 23
      },
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3dc36e6_0357bf39",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 56
      },
      "lineNbr": 69,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-04-27T01:17:44Z",
      "side": 1,
      "message": "In the most common use case, port is a pointer to a constant string and acl is a pointer to a static const structure (and so are its fields, mainly uuids). Here\u0027s one example of what that looks like: https://android.googlesource.com/trusty/lib/+/refs/heads/master/app/acvp/acvp.cpp#107\n\nI think it would be fine if we required port and acl to point to constant globals, I\u0027m just not sure what that looks like in C++ (this made me think of Rust where we could just slap a \u0027static on both parameters).",
      "parentUuid": "6a43758a_22479655",
      "range": {
        "startLine": 69,
        "startChar": 20,
        "endLine": 69,
        "endChar": 23
      },
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95781004_07db99a9",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 56
      },
      "lineNbr": 69,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-04-28T01:07:47Z",
      "side": 1,
      "message": "Changing the type to std::shared_ptr?\n\nThen wrapping the static const struct in shared_ptr with a no-op deleter.\n\nstd::shared_ptr\u003cconst struct tipc_port_acl\u003e acl{\u0026kAcvpPortAcl, [](auto p){}};",
      "parentUuid": "f3dc36e6_0357bf39",
      "range": {
        "startLine": 69,
        "startChar": 20,
        "endLine": 69,
        "endChar": 23
      },
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66009eca_608e3e20",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 56
      },
      "lineNbr": 69,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-05-17T02:31:45Z",
      "side": 1,
      "message": "The ACL structure points to a set of UUIDs via 2 levels of indirection, so we\u0027d need to copy 1) the structure, 2) an array of pointers to UUIDs, and 3) the UUIDs themselves. That\u0027s a lot of copying, and in most practical cases both the port name and structure (and the UUIDs it points to) are going to be fixed.\n\nI added a comment on the lifetime requirements of the parameters and how to use setupTrustyServer, they match the underlying low-level API at https://android.googlesource.com/trusty/lib/+/refs/heads/master/lib/tipc/include/lib/tipc/tipc_srv.h#46.",
      "parentUuid": "95781004_07db99a9",
      "range": {
        "startLine": 69,
        "startChar": 20,
        "endLine": 69,
        "endChar": 23
      },
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22d4ba0a_75481d0b",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 56
      },
      "lineNbr": 69,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-05-17T04:42:38Z",
      "side": 1,
      "message": "\u003e in most practical cases\n\nThe \"most practical\" part is a bit concerning to me. Why can\u0027t it be \"all\"? I don\u0027t have a super strong opinion about std::shared_ptr, but wish that we at least have some comments about lifetime in the source code of binder as well.",
      "parentUuid": "66009eca_608e3e20",
      "range": {
        "startLine": 69,
        "startChar": 20,
        "endLine": 69,
        "endChar": 23
      },
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45139c73_2b57a4d3",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 56
      },
      "lineNbr": 69,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-05-17T04:55:51Z",
      "side": 1,
      "message": "I\u0027m not against making the API harder to misuse, just not sure how to do it without a deep copy of the ACL structure.",
      "parentUuid": "22d4ba0a_75481d0b",
      "range": {
        "startLine": 69,
        "startChar": 20,
        "endLine": 69,
        "endChar": 23
      },
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee2ee851_5b934077",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 56
      },
      "lineNbr": 69,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-05-17T06:27:46Z",
      "side": 1,
      "message": "With `std::shared_ptr\u003cconst struct tipc_port_acl\u003e acl{\u0026kAcvpPortAcl, [](auto p){}};` there will be no copying of the struct.",
      "parentUuid": "45139c73_2b57a4d3",
      "range": {
        "startLine": 69,
        "startChar": 20,
        "endLine": 69,
        "endChar": 23
      },
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c8e40e1_74f1619f",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 56
      },
      "lineNbr": 69,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-05-17T20:27:21Z",
      "side": 1,
      "message": "Here\u0027s the structure\n```\n/**\n * ...\n * @uuids:      pointer to array of pointers to uuids of apps allowed to connect\n * ...\n */\nstruct tipc_port_acl {\n    uint32_t flags;\n    uint32_t uuid_num;\n    const struct uuid** uuids;\n    const void* extra_data;\n};\n```\n\nPassing the structure by shared_ptr or copying it should be fine, the real problem is the `uuids` array. We can\u0027t replace that with something like `std::vector\u003cstd::shared_ptr\u003cuuid\u003e\u003e` because that\u0027s not binary-compatible with `uuid**` (via `reinterpret_cast`), so we need to either copy those uuids into 2 vectors (one for the uuids and one for the pointers), or require that they outlive the call to `tipc_run_event_loop` (unless there\u0027s a third option).\n\nOne alternative could be to add a new `tipc_port_acl2` structure and corresponding `tipc_add_service2` function that takes an array of `uuid`s instead of an array of pointers to `uuid`s, but I wonder if that\u0027s worth doing.",
      "parentUuid": "ee2ee851_5b934077",
      "range": {
        "startLine": 69,
        "startChar": 20,
        "endLine": 69,
        "endChar": 23
      },
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04a272f4_fbeb53df",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 56
      },
      "lineNbr": 69,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-05-18T04:27:30Z",
      "side": 1,
      "message": "I am not suggesting to change the type of the uuids field, or any type that is already defined in trusty.\n\nThe suggestion was to pass `struct X` not via its pointer, but via a shared pointer. In doing so, the users are forced to either copy the struct (if it is not guaranteed to outlive the callee), or wrap it with a no-op deleter (if the lifetime is known to be static).",
      "parentUuid": "7c8e40e1_74f1619f",
      "range": {
        "startLine": 69,
        "startChar": 20,
        "endLine": 69,
        "endChar": 23
      },
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9d5d097_465be5e8",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 56
      },
      "lineNbr": 69,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-05-18T05:35:31Z",
      "side": 1,
      "message": "\u003e The suggestion was to pass  struct X  not via its pointer, but via a shared pointer.\n\nRight, I understood that. What I\u0027m wondering is how useful that is if we\u0027re only wrapping the structure in the shared pointer and not the uuids. Those also have the same lifetime issues as the structure afaict.\n\nAfter my last message, I realized we could pass the structure into the function by value instead of by shared pointer and copy it, the structure isn\u0027t that big.",
      "parentUuid": "04a272f4_fbeb53df",
      "range": {
        "startLine": 69,
        "startChar": 20,
        "endLine": 69,
        "endChar": 23
      },
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "198ddc3b_9ead310c",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 56
      },
      "lineNbr": 69,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-05-18T11:38:08Z",
      "side": 1,
      "message": "I think the handling of the uuids field should be encapsulated in the tipc_port_acl struct either via making the struct non-copyable, or implement the copy constructor (and assignment operator) so that the uuids are also copied and then the array is constructed for the copies.",
      "parentUuid": "e9d5d097_465be5e8",
      "range": {
        "startLine": 69,
        "startChar": 20,
        "endLine": 69,
        "endChar": 23
      },
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b265d580_3e64fa23",
        "filename": "libs/binder/trusty/RpcServerTrusty.cpp",
        "patchSetId": 56
      },
      "lineNbr": 69,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-05-19T04:02:49Z",
      "side": 1,
      "message": "I couldn\u0027t modify the original tipc_port_acl structure in those ways (the reason being that it\u0027s a C structure), so I added a new PortAcl equivalent here. We still need to provide a tipc_port_acl to tipc_add_service, so RpcServerTrusty internally converts between the two structures. Everything should be safe now, unless the pointers in mUuidPtrs become invalid for any reason.",
      "parentUuid": "198ddc3b_9ead310c",
      "range": {
        "startLine": 69,
        "startChar": 20,
        "endLine": 69,
        "endChar": 23
      },
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e8cfd15_cd255c2d",
        "filename": "libs/binder/trusty/RpcTransportRaw.cpp",
        "patchSetId": 56
      },
      "lineNbr": 45,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-04-19T04:08:18Z",
      "side": 1,
      "message": "I see the same definition above. Do we need to dedup?",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 45,
        "endChar": 1
      },
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db15eb11_27bf6b2f",
        "filename": "libs/binder/trusty/RpcTransportRaw.cpp",
        "patchSetId": 56
      },
      "lineNbr": 45,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-04-19T04:09:51Z",
      "side": 1,
      "message": "Definitely, I\u0027m just not sure where to put it. Utils.cpp could work but Utils.h is in the parent directory and not Trusty-specific.",
      "parentUuid": "2e8cfd15_cd255c2d",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 45,
        "endChar": 1
      },
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5941e252_194b1494",
        "filename": "libs/binder/trusty/RpcTransportRaw.cpp",
        "patchSetId": 56
      },
      "lineNbr": 45,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-04-19T16:30:38Z",
      "side": 1,
      "message": "Why can\u0027t we have the declaration in Utils.h and wrap it with #if __TRUSTY__ (or something that is equivalent to it)?",
      "parentUuid": "db15eb11_27bf6b2f",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 45,
        "endChar": 1
      },
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c20d304a_9116d118",
        "filename": "libs/binder/trusty/RpcTransportRaw.cpp",
        "patchSetId": 56
      },
      "lineNbr": 45,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2022-04-22T06:09:14Z",
      "side": 1,
      "message": "I added trusty/Utils.h, it\u0027s cleaner now.",
      "parentUuid": "5941e252_194b1494",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 45,
        "endChar": 1
      },
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb4b9162_e90e0b02",
        "filename": "libs/binder/trusty/RpcTransportRaw.cpp",
        "patchSetId": 56
      },
      "lineNbr": 45,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-04-22T17:36:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c20d304a_9116d118",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 45,
        "endChar": 1
      },
      "revId": "3263c2ed838e5835a2a5885879710460065aa060",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}