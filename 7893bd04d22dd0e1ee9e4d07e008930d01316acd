{
  "comments": [
    {
      "key": {
        "uuid": "f3061d16_7f0fe393",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1638873
      },
      "writtenOn": "2020-09-22T01:59:56Z",
      "side": 1,
      "message": "The AIDL Rust tests were flaky because AIBinder::associateClass is not thread-safe. Concretely, the problem occurs when the following sequence happens:\n\u003e Thread 1 calls associateClass\n\u003e Thread 2 calls associateClass with the same clazz as Thread 1\n\u003e Thread 1 checks for mClazz \u003d\u003d clazz (false)\n\u003e Thread 2 checks for mClazz \u003d\u003d clazz (false)\n\u003e Thread 1 checks for mClazz \u003d\u003d null (true)\n\u003e Thread 1 sets mClazz to clazz\n\u003e Thread 2 check for mClazz \u003d\u003d null (false!)\n\u003e Thread 2 errors",
      "revId": "7893bd04d22dd0e1ee9e4d07e008930d01316acd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8343f96_aefca82f",
        "filename": "libs/binder/ndk/ibinder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-09-22T16:53:15Z",
      "side": 1,
      "message": "can happen before we take the lock",
      "revId": "7893bd04d22dd0e1ee9e4d07e008930d01316acd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff1d38cc_2cef6ae6",
        "filename": "libs/binder/ndk/ibinder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1638873
      },
      "writtenOn": "2020-09-22T19:00:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d8343f96_aefca82f",
      "revId": "7893bd04d22dd0e1ee9e4d07e008930d01316acd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0709939e_b51d709f",
        "filename": "libs/binder/ndk/ibinder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-09-22T16:53:15Z",
      "side": 1,
      "message": "getInterfaceDescriptor is a binder transaction (note, L85 is not, since it is a call to the AIBinder_Class method), and when a binder transaction is made, we might serve other binder transactions (during libbinder\u0027s waitForResponse). So, it is possible that we re-enter associateClass on the same binder proxy when this is called. In order to avoid a deadlock, we need to make sure not to take this lock when we make this binder transaction. For instance, drop the lock on L103, take it back on L104. If mClazz is non-null, drop the lock again and recurse to hit either L87 or L91 (maybe instead of recursion and the extra lock that would entail, L85..L99 could be split into a different function).\n\nL87 makes me realize another problem. ABpBinder, like BpBinder, is unique per-process (see references to ABpBinderTag in this file). That means that we couldn\u0027t have a Rust-backend client and a NDK-backend client of the same BpBinder in the same process (there is only one mClazz variable). Do we already have a bug for this specific problem?",
      "range": {
        "startLine": 104,
        "startChar": 36,
        "endLine": 104,
        "endChar": 58
      },
      "revId": "7893bd04d22dd0e1ee9e4d07e008930d01316acd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fa71cc9_383e02f8",
        "filename": "libs/binder/ndk/ibinder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1638873
      },
      "writtenOn": "2020-09-22T19:00:36Z",
      "side": 1,
      "message": "\u003e L87 makes me realize another problem. ABpBinder, like BpBinder, is unique per-process (see references to ABpBinderTag in this file). That means that we couldn\u0027t have a Rust-backend client and a NDK-backend client of the same BpBinder in the same process (there is only one mClazz variable). Do we already have a bug for this specific problem?\n\nNone that I\u0027m aware of.",
      "parentUuid": "0709939e_b51d709f",
      "range": {
        "startLine": 104,
        "startChar": 36,
        "endLine": 104,
        "endChar": 58
      },
      "revId": "7893bd04d22dd0e1ee9e4d07e008930d01316acd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1639a447_9b37574d",
        "filename": "libs/binder/ndk/ibinder_internal.h",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1638873
      },
      "writtenOn": "2020-09-22T02:01:53Z",
      "side": 1,
      "message": "This makes AIBinder bigger. Alternatively, I could use a single global mutex?",
      "revId": "7893bd04d22dd0e1ee9e4d07e008930d01316acd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63eccecb_91ba8a9e",
        "filename": "libs/binder/ndk/ibinder_internal.h",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1638873
      },
      "writtenOn": "2020-09-22T02:57:47Z",
      "side": 1,
      "message": "Another option: move the mutex to the Rust side, most likely to InterfaceClass.",
      "parentUuid": "1639a447_9b37574d",
      "revId": "7893bd04d22dd0e1ee9e4d07e008930d01316acd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bc08311_c09b47e9",
        "filename": "libs/binder/ndk/ibinder_internal.h",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-09-22T16:53:15Z",
      "side": 1,
      "message": "The problem really exists in libbinder_ndk. Definitely think the solution should go hear, as you are suggesting w/ this CL.",
      "parentUuid": "63eccecb_91ba8a9e",
      "revId": "7893bd04d22dd0e1ee9e4d07e008930d01316acd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4efe005c_d1ca3d02",
        "filename": "libs/binder/ndk/ibinder_internal.h",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-09-22T16:53:59Z",
      "side": 1,
      "message": "btw - the alternative here would be to use BpBinder\u0027s existing mMutex, but that starts getting pretty messy, so I\u0027m happy with this.",
      "parentUuid": "3bc08311_c09b47e9",
      "revId": "7893bd04d22dd0e1ee9e4d07e008930d01316acd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}