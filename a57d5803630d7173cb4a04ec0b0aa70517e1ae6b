{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "96b46a54_1b93d00f",
        "filename": "cmds/installd/InstalldNativeService.cpp",
        "patchSetId": 5
      },
      "lineNbr": 235,
      "author": {
        "id": 1137063
      },
      "writtenOn": "2023-08-01T23:51:58Z",
      "side": 1,
      "message": "I\u0027d really prefer not to rely on path validation like this.  Some potential issues are:\n\n- Path traversal via paths like `/data/user/0/com.foo.bar/../../../../some/arbitrary/path`\n- Paths like `/data/user/0/com.foo.bar/foo/bar` where either `foo` or `bar` could be a symlink that points to anywhere\n- TOCTOU bugs if checks are done on the file separately from it actually being opened for the ioctl",
      "range": {
        "startLine": 235,
        "startChar": 0,
        "endLine": 235,
        "endChar": 4
      },
      "revId": "a57d5803630d7173cb4a04ec0b0aa70517e1ae6b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee7e1880_e7dd33ad",
        "filename": "cmds/installd/InstalldNativeService.cpp",
        "patchSetId": 5
      },
      "lineNbr": 235,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2023-08-02T13:48:10Z",
      "side": 1,
      "message": "I agree with the sentiment, but the alternative also has issues - we can\u0027t just operate on any fd.\n\nThere are helpers in frameworks/native/cmds/installd/utils.cpp for some of this - e.g. validate_path() which blocks use of \"..\" at all. Maybe this function should be there?\n\nWe also sometimes specify O_NOFOLLOW when opening the files. (Although I vaguely think we try to prevent symlinks being created in app data directories in the first place.)\n\nOver at https://source.corp.google.com/h/googleplex-android/platform/superproject/main/+/refs/heads/main:frameworks/native/cmds/installd/dexopt.cpp;drc\u003da8dc666195b8df98e1f35e9d54759670f267666f;l\u003d2244 we fork, drop capabilities and switch to the app\u0027s uid before opening the file, which prevents a lot of attacks. (There\u0027s a few other places we do that too.) We retain our SELinux context though, so we can still do things only installd can do, like fs-verity.",
      "parentUuid": "96b46a54_1b93d00f",
      "range": {
        "startLine": 235,
        "startChar": 0,
        "endLine": 235,
        "endChar": 4
      },
      "revId": "a57d5803630d7173cb4a04ec0b0aa70517e1ae6b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4c3c32c_8c125998",
        "filename": "cmds/installd/InstalldNativeService.cpp",
        "patchSetId": 5
      },
      "lineNbr": 235,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2023-08-02T18:27:20Z",
      "side": 1,
      "message": "I\u0027m trying another idea (I\u0027m seeing some technical complexity, so throwing out first).\n\nWhen the app calls the API, the app process will open the file and send the read-only FD, PLUS a writable \"auth FD\" of the same file.  This way, system server as the man-in-the-middle can\u0027t enable fs-verity on arbitrary app files.\n\ninstalld will ensure both FDs are indeed the same inode via stat(2), the auth FD is writable via fcntl(F_GETCL), and the app uid actually owns the file. If preferred, we can keep the path check, although I don\u0027t think it will provide any security value.\n\nI think this is as much as we can get without relying on the kernel update?\n\nLet me know if you see a problem in this approach.  If this sounds good, I need to fight with some binder/aidl challenge (specifically, to get the auth PFD closed right after sending over the transport)...",
      "parentUuid": "ee7e1880_e7dd33ad",
      "range": {
        "startLine": 235,
        "startChar": 0,
        "endLine": 235,
        "endChar": 4
      },
      "revId": "a57d5803630d7173cb4a04ec0b0aa70517e1ae6b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e49fdbb0_f4f667a1",
        "filename": "cmds/installd/InstalldNativeService.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3902,
      "author": {
        "id": 1137063
      },
      "writtenOn": "2023-08-01T23:51:58Z",
      "side": 1,
      "message": "Could https://lore.kernel.org/fsverity/20230801050714.28974-1-ebiggers@kernel.org be enough?  That wouldn\u0027t break backwards compatibility for earlier Android versions, so we could backport it to *every* Android Common Kernel branch that supports fsverity, even branches like `android11-5.4` that need to be compatible with earlier Android versions",
      "range": {
        "startLine": 3899,
        "startChar": 82,
        "endLine": 3902,
        "endChar": 27
      },
      "revId": "a57d5803630d7173cb4a04ec0b0aa70517e1ae6b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e62d6210_d92469cc",
        "filename": "cmds/installd/InstalldNativeService.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3902,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2023-08-02T00:05:34Z",
      "side": 1,
      "message": "I thought many OEMs don\u0027t touch the kernel once a device is launched?  Are we able to actually require a kernel update on an Android release?  If so, how is it enforced?  How do we know the OEM/vendor actually apply that patch?\n\nIf we can get the patch out this early, I\u0027d love to switch over to the simple solution...",
      "parentUuid": "e49fdbb0_f4f667a1",
      "range": {
        "startLine": 3899,
        "startChar": 82,
        "endLine": 3902,
        "endChar": 27
      },
      "revId": "a57d5803630d7173cb4a04ec0b0aa70517e1ae6b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91a7baca_edfae237",
        "filename": "cmds/installd/InstalldNativeService.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3902,
      "author": {
        "id": 1137063
      },
      "writtenOn": "2023-08-02T00:12:08Z",
      "side": 1,
      "message": "\u003e I thought many OEMs don\u0027t touch the kernel once a device is launched? \n\nThen their kernel has tons of known vulnerabilities anyway.\n\nWe can do everything we possibly can to get the patch out short of putting it in the Android Security Bulletin, including backporting it to 10+ different kernel branches.\n\nUltimately, we should only go so far to cater to OEMs who refuse to update their kernel.",
      "parentUuid": "e62d6210_d92469cc",
      "range": {
        "startLine": 3899,
        "startChar": 82,
        "endLine": 3902,
        "endChar": 27
      },
      "revId": "a57d5803630d7173cb4a04ec0b0aa70517e1ae6b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef3eaab1_c750864f",
        "filename": "cmds/installd/InstalldNativeService.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3902,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2023-08-02T13:48:10Z",
      "side": 1,
      "message": "I believe the current state is that very few OEMs will upgrade existing devices to a new kernel version, but they will distribute security patches.\n\nThat will start to change though, as longer device lifetimes are mandated.",
      "parentUuid": "91a7baca_edfae237",
      "range": {
        "startLine": 3899,
        "startChar": 82,
        "endLine": 3902,
        "endChar": 27
      },
      "revId": "a57d5803630d7173cb4a04ec0b0aa70517e1ae6b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "106ab9fe_6fe9041b",
        "filename": "cmds/installd/InstalldNativeService.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3902,
      "author": {
        "id": 1042276
      },
      "writtenOn": "2023-08-02T18:27:20Z",
      "side": 1,
      "message": "Yeah... if there is already a standard process of updating a device kernel, especially during an Android update, I\u0027d love to learn more.  But if it\u0027s really just up to the OEM, I wouldn\u0027t feel comfortable exposing a new attack surface to apps (I don\u0027t know how much vulnerabilities are accessible to the app sandbox).\n\nASB is an interesting idea though.  Maybe a plan B?",
      "parentUuid": "91a7baca_edfae237",
      "range": {
        "startLine": 3899,
        "startChar": 82,
        "endLine": 3902,
        "endChar": 27
      },
      "revId": "a57d5803630d7173cb4a04ec0b0aa70517e1ae6b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4051e5f6_6db1a533",
        "filename": "cmds/installd/InstalldNativeService.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3913,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2023-08-02T13:48:10Z",
      "side": 1,
      "message": "Actually this checks for \"..\" already.",
      "range": {
        "startLine": 3913,
        "startChar": 4,
        "endLine": 3913,
        "endChar": 23
      },
      "revId": "a57d5803630d7173cb4a04ec0b0aa70517e1ae6b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}