/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//! Unsafe native interfaces to the C++ libbinder library. No user servicable
//! parts here.

// Bindings to libbinder generated by bindgen. Ideally we should generate this
// at build time, as is done in the `build.rs` script. However, soong doesn't
// support `build.rs` yet so we pre-generate these bindings and check them into
// the repo. These bindings must be manually re-generated when the libbinder API
// changes.
#[allow(
    non_camel_case_types,
    non_snake_case,
    non_upper_case_globals,
    unused,
    improper_ctypes
)]
pub(crate) mod libbinder_bindings {
    // We are using a custom opaque declaration for `android_sp` and
    // `android_wp` because we want them to be generic over T, but opaque, which
    // bindgen can't do. According to the Rust [nomicon][1], this is how opaque
    // structs should be declared.
    //
    // [1]: https://doc.rust-lang.org/nomicon/ffi.html#representing-opaque-structs
    #[repr(C)]
    pub struct android_sp<T> {
        _opaque: [u8; 0],
        _phantom: std::marker::PhantomData<T>,
    }
    #[repr(C)]
    pub struct android_wp<T> {
        _opaque: [u8; 0],
        _phantom: std::marker::PhantomData<T>,
    }
    include!("sys/libbinder_bindings.rs");
}

mod status;

#[cfg(test)]
mod tests;

pub use libbinder_bindings::{android_status_t as status_t, binder_size_t};
pub use status::Status;
