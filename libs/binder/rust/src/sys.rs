/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//! Unsafe native interfaces to the C++ libbinder library. No user servicable
//! parts here.

// Bindings to libbinder generated by bindgen. Ideally we should generate this
// at build time, as is done in the `build.rs` script. However, soong doesn't
// support `build.rs` yet so we pre-generate these bindings and check them into
// the repo. These bindings must be manually re-generated when the libbinder API
// changes.
#[allow(
    non_camel_case_types,
    non_snake_case,
    non_upper_case_globals,
    unused,
    improper_ctypes
)]
mod libbinder_bindings {
    include!("sys/libbinder_bindings.rs");
}

pub use libbinder_bindings::android_c_interface_ExceptionCode as ExceptionCode;
pub use libbinder_bindings::android_c_interface_StatusCode as StatusCode;
pub use libbinder_bindings::binder_status_t as status_t;
pub use libbinder_bindings::size_t;
pub use libbinder_bindings::AIBinder_Class_define;
pub use libbinder_bindings::{ABinderProcess_joinThreadPool, ABinderProcess_startThreadPool};
pub use libbinder_bindings::{AIBinder, AIBinder_Class, AParcel, AStatus};
pub use libbinder_bindings::{
    AIBinder_DeathRecipient, AIBinder_DeathRecipient_delete, AIBinder_DeathRecipient_new,
};
pub use libbinder_bindings::{AIBinder_Weak, AIBinder_Weak_new};
pub use libbinder_bindings::{
    AIBinder_associateClass, AIBinder_decStrong, AIBinder_dump, AIBinder_getClass,
    AIBinder_getExtension, AIBinder_getUserData, AIBinder_incStrong, AIBinder_isAlive,
    AIBinder_isRemote, AIBinder_linkToDeath, AIBinder_new, AIBinder_ping,
    AIBinder_prepareTransaction, AIBinder_setExtension, AIBinder_transact, AIBinder_unlinkToDeath,
};
pub use libbinder_bindings::{AIBinder_getCallingPid, AIBinder_getCallingUid};
pub use libbinder_bindings::{AParcel_delete, AParcel_getDataPosition, AParcel_setDataPosition};
pub use libbinder_bindings::{
    AParcel_readBool, AParcel_readByte, AParcel_readChar, AParcel_readDouble, AParcel_readFloat,
    AParcel_readInt32, AParcel_readInt64, AParcel_readParcelFileDescriptor,
    AParcel_readStatusHeader, AParcel_readString, AParcel_readStrongBinder, AParcel_readUint32,
    AParcel_readUint64,
};
pub use libbinder_bindings::{
    AParcel_readBoolArray, AParcel_readByteArray, AParcel_readCharArray, AParcel_readDoubleArray,
    AParcel_readFloatArray, AParcel_readInt32Array, AParcel_readInt64Array,
    AParcel_readUint32Array, AParcel_readUint64Array,
};
pub use libbinder_bindings::{
    AParcel_writeBool, AParcel_writeByte, AParcel_writeChar, AParcel_writeDouble,
    AParcel_writeFloat, AParcel_writeInt32, AParcel_writeInt64, AParcel_writeParcelFileDescriptor,
    AParcel_writeStatusHeader, AParcel_writeString, AParcel_writeStrongBinder, AParcel_writeUint32,
    AParcel_writeUint64,
};
pub use libbinder_bindings::{
    AParcel_writeBoolArray, AParcel_writeByteArray, AParcel_writeCharArray,
    AParcel_writeDoubleArray, AParcel_writeFloatArray, AParcel_writeInt32Array,
    AParcel_writeInt64Array, AParcel_writeUint32Array, AParcel_writeUint64Array,
};
pub use libbinder_bindings::{AServiceManager_addService, AServiceManager_getService};
pub use libbinder_bindings::{
    AStatus_delete, AStatus_deleteDescription, AStatus_fromStatus, AStatus_getDescription,
    AStatus_getExceptionCode, AStatus_getServiceSpecificError, AStatus_getStatus, AStatus_isOk,
    AStatus_newOk,
};

pub use libbinder_bindings::android_c_interface_RustBBinder as RustBBinder;
pub use libbinder_bindings::RustObject;
pub use libbinder_bindings::{FIRST_CALL_TRANSACTION, FLAG_ONEWAY, LAST_CALL_TRANSACTION};
