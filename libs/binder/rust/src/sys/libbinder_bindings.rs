/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct std_basic_string {
    pub _address: u8,
}
pub type std_basic_string__Char_alloc_type = u8;
pub type std_basic_string__Alloc_traits = u8;
pub type std_basic_string_traits_type = u8;
pub type std_basic_string_value_type = u8;
pub type std_basic_string_allocator_type = u8;
pub type std_basic_string_size_type = u8;
pub type std_basic_string_difference_type = u8;
pub type std_basic_string_reference = u8;
pub type std_basic_string_const_reference = u8;
pub type std_basic_string_pointer = u8;
pub type std_basic_string_const_pointer = u8;
pub type std_basic_string_iterator = u8;
pub type std_basic_string_const_iterator = u8;
pub type std_basic_string_const_reverse_iterator = u8;
pub type std_basic_string_reverse_iterator = u8;
pub type std_basic_string___const_iterator = u8;
pub type std_basic_string___sv_type = u8;
pub type std_basic_string__If_sv = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct std_basic_string___sv_wrapper {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct std_basic_string__Alloc_hider {
    pub _address: u8,
}
pub const std_basic_string__S_local_capacity: std_basic_string__bindgen_ty_1 = 0;
pub type std_basic_string__bindgen_ty_1 = i32;
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union std_basic_string__bindgen_ty_2 {
    pub _bindgen_opaque_blob: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct std_allocator {
    pub _address: u8,
}
pub type std_allocator_size_type = u64;
pub type std_allocator_difference_type = u64;
pub type std_allocator_pointer = u8;
pub type std_allocator_const_pointer = u8;
pub type std_allocator_reference = u8;
pub type std_allocator_const_reference = u8;
pub type std_allocator_value_type = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct std_allocator_rebind {
    pub _address: u8,
}
pub type std_allocator_rebind_other = u8;
pub type std_allocator_propagate_on_container_move_assignment = u8;
pub type std_allocator_is_always_equal = u8;
pub type std_string = [u64; 4usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct std_char_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct std_default_delete {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct std_unique_ptr {
    pub _address: u8,
}
pub type std_unique_ptr__DeleterConstraint = u8;
pub type std_unique_ptr_pointer = u8;
pub type std_unique_ptr_element_type = u8;
pub type std_unique_ptr_deleter_type = u8;
pub type std_unique_ptr___safe_conversion_up = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct std_optional {
    pub _address: u8,
}
pub type std_optional__Base = u8;
pub type std_optional___not_self = u8;
pub type std_optional___not_tag = u8;
pub type std_optional__Requires = u8;
pub type std_optional_value_type = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct std_vector {
    pub _address: u8,
}
pub type std_vector__Base = u8;
pub type std_vector__Tp_alloc_type = u8;
pub type std_vector__Alloc_traits = u8;
pub type std_vector_value_type = u8;
pub type std_vector_pointer = u8;
pub type std_vector_const_pointer = u8;
pub type std_vector_reference = u8;
pub type std_vector_const_reference = u8;
pub type std_vector_iterator = u8;
pub type std_vector_const_iterator = u8;
pub type std_vector_const_reverse_iterator = u8;
pub type std_vector_reverse_iterator = u8;
pub type std_vector_size_type = u64;
pub type std_vector_difference_type = u64;
pub type std_vector_allocator_type = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct std_vector__Temporary_value {
    pub _address: u8,
}
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __pid_t = ::std::os::raw::c_int;
pub type __ssize_t = ::std::os::raw::c_long;
pub type size_t = ::std::os::raw::c_ulong;
pub type va_list = __builtin_va_list;
pub type pid_t = __pid_t;
pub type uid_t = __uid_t;
pub type ssize_t = __ssize_t;
#[doc = " The type used to return success/failure from frameworks APIs."]
#[doc = " See the anonymous enum below for valid values."]
pub type android_status_t = i32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct android_base_DefaultCloser {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_android_base_DefaultCloser() {
    assert_eq!(
        ::std::mem::size_of::<android_base_DefaultCloser>(),
        1usize,
        concat!("Size of: ", stringify!(android_base_DefaultCloser))
    );
    assert_eq!(
        ::std::mem::align_of::<android_base_DefaultCloser>(),
        1usize,
        concat!("Alignment of ", stringify!(android_base_DefaultCloser))
    );
}
#[repr(C)]
pub struct android_base_unique_fd_impl {
    pub fd_: ::std::os::raw::c_int,
}
pub type android_base_unique_fd = android_base_unique_fd_impl;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct android_wp {
    pub _address: u8,
}
#[doc = "! This is a string holding UTF-8 characters. Does not allow the value more"]
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub struct android_String8 {
    pub _bindgen_opaque_blob: u64,
}
#[test]
fn bindgen_test_layout_android_String8() {
    assert_eq!(
        ::std::mem::size_of::<android_String8>(),
        8usize,
        concat!("Size of: ", stringify!(android_String8))
    );
    assert_eq!(
        ::std::mem::align_of::<android_String8>(),
        8usize,
        concat!("Alignment of ", stringify!(android_String8))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String86formatEPKcz"]
    pub fn android_String8_format(fmt: *const ::std::os::raw::c_char, ...) -> android_String8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String87formatVEPKcP13__va_list_tag"]
    pub fn android_String8_formatV(
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> android_String8;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android7String86lengthEv"]
    pub fn android_String8_length(this: *const android_String8) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String85clearEv"]
    pub fn android_String8_clear(this: *mut android_String8);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String85setToERKS0_"]
    pub fn android_String8_setTo(this: *mut android_String8, other: *const android_String8);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String85setToEPKc"]
    pub fn android_String8_setTo1(
        this: *mut android_String8,
        other: *const ::std::os::raw::c_char,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String85setToEPKcm"]
    pub fn android_String8_setTo2(
        this: *mut android_String8,
        other: *const ::std::os::raw::c_char,
        numChars: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String85setToEPKDsm"]
    pub fn android_String8_setTo3(
        this: *mut android_String8,
        other: *const u16,
        numChars: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String85setToEPKDim"]
    pub fn android_String8_setTo4(
        this: *mut android_String8,
        other: *const u32,
        length: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String86appendERKS0_"]
    pub fn android_String8_append(
        this: *mut android_String8,
        other: *const android_String8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String86appendEPKc"]
    pub fn android_String8_append1(
        this: *mut android_String8,
        other: *const ::std::os::raw::c_char,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String86appendEPKcm"]
    pub fn android_String8_append2(
        this: *mut android_String8,
        other: *const ::std::os::raw::c_char,
        numChars: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String812appendFormatEPKcz"]
    pub fn android_String8_appendFormat(
        this: *mut android_String8,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String813appendFormatVEPKcP13__va_list_tag"]
    pub fn android_String8_appendFormatV(
        this: *mut android_String8,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String810lockBufferEm"]
    pub fn android_String8_lockBuffer(
        this: *mut android_String8,
        size: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String812unlockBufferEv"]
    pub fn android_String8_unlockBuffer(this: *mut android_String8);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String812unlockBufferEm"]
    pub fn android_String8_unlockBuffer1(
        this: *mut android_String8,
        size: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android7String84findEPKcm"]
    pub fn android_String8_find(
        this: *const android_String8,
        other: *const ::std::os::raw::c_char,
        start: size_t,
    ) -> ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String89removeAllEPKc"]
    pub fn android_String8_removeAll(
        this: *mut android_String8,
        other: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String87toLowerEv"]
    pub fn android_String8_toLower(this: *mut android_String8);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String87toLowerEmm"]
    pub fn android_String8_toLower1(this: *mut android_String8, start: size_t, numChars: size_t);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String87toUpperEv"]
    pub fn android_String8_toUpper(this: *mut android_String8);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String87toUpperEmm"]
    pub fn android_String8_toUpper1(this: *mut android_String8, start: size_t, numChars: size_t);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String811setPathNameEPKc"]
    pub fn android_String8_setPathName(
        this: *mut android_String8,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String811setPathNameEPKcm"]
    pub fn android_String8_setPathName1(
        this: *mut android_String8,
        name: *const ::std::os::raw::c_char,
        numChars: size_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android7String811getPathLeafEv"]
    pub fn android_String8_getPathLeaf(this: *const android_String8) -> android_String8;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android7String810getPathDirEv"]
    pub fn android_String8_getPathDir(this: *const android_String8) -> android_String8;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android7String88walkPathEPS0_"]
    pub fn android_String8_walkPath(
        this: *const android_String8,
        outRemains: *mut android_String8,
    ) -> android_String8;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android7String816getPathExtensionEv"]
    pub fn android_String8_getPathExtension(this: *const android_String8) -> android_String8;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android7String811getBasePathEv"]
    pub fn android_String8_getBasePath(this: *const android_String8) -> android_String8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String810appendPathEPKc"]
    pub fn android_String8_appendPath(
        this: *mut android_String8,
        leaf: *const ::std::os::raw::c_char,
    ) -> *mut android_String8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String816convertToResPathEv"]
    pub fn android_String8_convertToResPath(this: *mut android_String8) -> *mut android_String8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String8C1Ev"]
    pub fn android_String8_String8(this: *mut android_String8);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String8C1ERKS0_"]
    pub fn android_String8_String81(this: *mut android_String8, o: *const android_String8);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String8C1EPKc"]
    pub fn android_String8_String82(this: *mut android_String8, o: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String8C1EPKcm"]
    pub fn android_String8_String83(
        this: *mut android_String8,
        o: *const ::std::os::raw::c_char,
        numChars: size_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String8C1ERKNS_8String16E"]
    pub fn android_String8_String84(this: *mut android_String8, o: *const android_String16);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String8C1EPKDs"]
    pub fn android_String8_String85(this: *mut android_String8, o: *const u16);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String8C1EPKDsm"]
    pub fn android_String8_String86(this: *mut android_String8, o: *const u16, numChars: size_t);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String8C1EPKDi"]
    pub fn android_String8_String87(this: *mut android_String8, o: *const u32);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String8C1EPKDim"]
    pub fn android_String8_String88(this: *mut android_String8, o: *const u32, numChars: size_t);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7String8D1Ev"]
    pub fn android_String8_String8_destructor(this: *mut android_String8);
}
impl android_String8 {
    #[inline]
    pub unsafe fn formatV(
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> android_String8 {
        android_String8_formatV(fmt, args)
    }
    #[inline]
    pub unsafe fn length(&self) -> size_t {
        android_String8_length(self)
    }
    #[inline]
    pub unsafe fn clear(&mut self) {
        android_String8_clear(self)
    }
    #[inline]
    pub unsafe fn setTo(&mut self, other: *const android_String8) {
        android_String8_setTo(self, other)
    }
    #[inline]
    pub unsafe fn setTo1(&mut self, other: *const ::std::os::raw::c_char) -> android_status_t {
        android_String8_setTo1(self, other)
    }
    #[inline]
    pub unsafe fn setTo2(
        &mut self,
        other: *const ::std::os::raw::c_char,
        numChars: size_t,
    ) -> android_status_t {
        android_String8_setTo2(self, other, numChars)
    }
    #[inline]
    pub unsafe fn setTo3(&mut self, other: *const u16, numChars: size_t) -> android_status_t {
        android_String8_setTo3(self, other, numChars)
    }
    #[inline]
    pub unsafe fn setTo4(&mut self, other: *const u32, length: size_t) -> android_status_t {
        android_String8_setTo4(self, other, length)
    }
    #[inline]
    pub unsafe fn append(&mut self, other: *const android_String8) -> android_status_t {
        android_String8_append(self, other)
    }
    #[inline]
    pub unsafe fn append1(&mut self, other: *const ::std::os::raw::c_char) -> android_status_t {
        android_String8_append1(self, other)
    }
    #[inline]
    pub unsafe fn append2(
        &mut self,
        other: *const ::std::os::raw::c_char,
        numChars: size_t,
    ) -> android_status_t {
        android_String8_append2(self, other, numChars)
    }
    #[inline]
    pub unsafe fn appendFormatV(
        &mut self,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> android_status_t {
        android_String8_appendFormatV(self, fmt, args)
    }
    #[inline]
    pub unsafe fn lockBuffer(&mut self, size: size_t) -> *mut ::std::os::raw::c_char {
        android_String8_lockBuffer(self, size)
    }
    #[inline]
    pub unsafe fn unlockBuffer(&mut self) {
        android_String8_unlockBuffer(self)
    }
    #[inline]
    pub unsafe fn unlockBuffer1(&mut self, size: size_t) -> android_status_t {
        android_String8_unlockBuffer1(self, size)
    }
    #[inline]
    pub unsafe fn find(&self, other: *const ::std::os::raw::c_char, start: size_t) -> ssize_t {
        android_String8_find(self, other, start)
    }
    #[inline]
    pub unsafe fn removeAll(&mut self, other: *const ::std::os::raw::c_char) -> bool {
        android_String8_removeAll(self, other)
    }
    #[inline]
    pub unsafe fn toLower(&mut self) {
        android_String8_toLower(self)
    }
    #[inline]
    pub unsafe fn toLower1(&mut self, start: size_t, numChars: size_t) {
        android_String8_toLower1(self, start, numChars)
    }
    #[inline]
    pub unsafe fn toUpper(&mut self) {
        android_String8_toUpper(self)
    }
    #[inline]
    pub unsafe fn toUpper1(&mut self, start: size_t, numChars: size_t) {
        android_String8_toUpper1(self, start, numChars)
    }
    #[inline]
    pub unsafe fn setPathName(&mut self, name: *const ::std::os::raw::c_char) {
        android_String8_setPathName(self, name)
    }
    #[inline]
    pub unsafe fn setPathName1(&mut self, name: *const ::std::os::raw::c_char, numChars: size_t) {
        android_String8_setPathName1(self, name, numChars)
    }
    #[inline]
    pub unsafe fn getPathLeaf(&self) -> android_String8 {
        android_String8_getPathLeaf(self)
    }
    #[inline]
    pub unsafe fn getPathDir(&self) -> android_String8 {
        android_String8_getPathDir(self)
    }
    #[inline]
    pub unsafe fn walkPath(&self, outRemains: *mut android_String8) -> android_String8 {
        android_String8_walkPath(self, outRemains)
    }
    #[inline]
    pub unsafe fn getPathExtension(&self) -> android_String8 {
        android_String8_getPathExtension(self)
    }
    #[inline]
    pub unsafe fn getBasePath(&self) -> android_String8 {
        android_String8_getBasePath(self)
    }
    #[inline]
    pub unsafe fn appendPath(
        &mut self,
        leaf: *const ::std::os::raw::c_char,
    ) -> *mut android_String8 {
        android_String8_appendPath(self, leaf)
    }
    #[inline]
    pub unsafe fn convertToResPath(&mut self) -> *mut android_String8 {
        android_String8_convertToResPath(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_String8_String8(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(o: *const android_String8) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_String8_String81(__bindgen_tmp.as_mut_ptr(), o);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(o: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_String8_String82(__bindgen_tmp.as_mut_ptr(), o);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(o: *const ::std::os::raw::c_char, numChars: size_t) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_String8_String83(__bindgen_tmp.as_mut_ptr(), o, numChars);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(o: *const android_String16) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_String8_String84(__bindgen_tmp.as_mut_ptr(), o);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new5(o: *const u16) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_String8_String85(__bindgen_tmp.as_mut_ptr(), o);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new6(o: *const u16, numChars: size_t) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_String8_String86(__bindgen_tmp.as_mut_ptr(), o, numChars);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new7(o: *const u32) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_String8_String87(__bindgen_tmp.as_mut_ptr(), o);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new8(o: *const u32, numChars: size_t) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_String8_String88(__bindgen_tmp.as_mut_ptr(), o, numChars);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        android_String8_String8_destructor(self)
    }
}
#[doc = "! This is a string holding UTF-16 characters."]
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub struct android_String16 {
    pub _bindgen_opaque_blob: u64,
}
#[test]
fn bindgen_test_layout_android_String16() {
    assert_eq!(
        ::std::mem::size_of::<android_String16>(),
        8usize,
        concat!("Size of: ", stringify!(android_String16))
    );
    assert_eq!(
        ::std::mem::align_of::<android_String16>(),
        8usize,
        concat!("Alignment of ", stringify!(android_String16))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android8String164sizeEv"]
    pub fn android_String16_size(this: *const android_String16) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String165setToERKS0_"]
    pub fn android_String16_setTo(this: *mut android_String16, other: *const android_String16);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String165setToEPKDs"]
    pub fn android_String16_setTo1(
        this: *mut android_String16,
        other: *const u16,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String165setToEPKDsm"]
    pub fn android_String16_setTo2(
        this: *mut android_String16,
        other: *const u16,
        len: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String165setToERKS0_mm"]
    pub fn android_String16_setTo3(
        this: *mut android_String16,
        other: *const android_String16,
        len: size_t,
        begin: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String166appendERKS0_"]
    pub fn android_String16_append(
        this: *mut android_String16,
        other: *const android_String16,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String166appendEPKDsm"]
    pub fn android_String16_append1(
        this: *mut android_String16,
        other: *const u16,
        len: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String166insertEmPKDs"]
    pub fn android_String16_insert(
        this: *mut android_String16,
        pos: size_t,
        chrs: *const u16,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String166insertEmPKDsm"]
    pub fn android_String16_insert1(
        this: *mut android_String16,
        pos: size_t,
        chrs: *const u16,
        len: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android8String169findFirstEDs"]
    pub fn android_String16_findFirst(this: *const android_String16, c: u16) -> ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android8String168findLastEDs"]
    pub fn android_String16_findLast(this: *const android_String16, c: u16) -> ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android8String1610startsWithERKS0_"]
    pub fn android_String16_startsWith(
        this: *const android_String16,
        prefix: *const android_String16,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android8String1610startsWithEPKDs"]
    pub fn android_String16_startsWith1(this: *const android_String16, prefix: *const u16) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android8String168containsEPKDs"]
    pub fn android_String16_contains(this: *const android_String16, chrs: *const u16) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String169makeLowerEv"]
    pub fn android_String16_makeLower(this: *mut android_String16) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String1610replaceAllEDsDs"]
    pub fn android_String16_replaceAll(
        this: *mut android_String16,
        replaceThis: u16,
        withThis: u16,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String166removeEmm"]
    pub fn android_String16_remove(
        this: *mut android_String16,
        len: size_t,
        begin: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android8String1614isStaticStringEv"]
    pub fn android_String16_isStaticString(this: *const android_String16) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String16C1Ev"]
    pub fn android_String16_String16(this: *mut android_String16);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String16C1ERKS0_"]
    pub fn android_String16_String161(this: *mut android_String16, o: *const android_String16);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String16C1ERKS0_mm"]
    pub fn android_String16_String162(
        this: *mut android_String16,
        o: *const android_String16,
        len: size_t,
        begin: size_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String16C1EPKDs"]
    pub fn android_String16_String163(this: *mut android_String16, o: *const u16);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String16C1EPKDsm"]
    pub fn android_String16_String164(this: *mut android_String16, o: *const u16, len: size_t);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String16C1ERKNS_7String8E"]
    pub fn android_String16_String165(this: *mut android_String16, o: *const android_String8);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String16C1EPKc"]
    pub fn android_String16_String166(
        this: *mut android_String16,
        o: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String16C1EPKcm"]
    pub fn android_String16_String167(
        this: *mut android_String16,
        o: *const ::std::os::raw::c_char,
        len: size_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android8String16D1Ev"]
    pub fn android_String16_String16_destructor(this: *mut android_String16);
}
impl android_String16 {
    #[inline]
    pub unsafe fn size(&self) -> size_t {
        android_String16_size(self)
    }
    #[inline]
    pub unsafe fn setTo(&mut self, other: *const android_String16) {
        android_String16_setTo(self, other)
    }
    #[inline]
    pub unsafe fn setTo1(&mut self, other: *const u16) -> android_status_t {
        android_String16_setTo1(self, other)
    }
    #[inline]
    pub unsafe fn setTo2(&mut self, other: *const u16, len: size_t) -> android_status_t {
        android_String16_setTo2(self, other, len)
    }
    #[inline]
    pub unsafe fn setTo3(
        &mut self,
        other: *const android_String16,
        len: size_t,
        begin: size_t,
    ) -> android_status_t {
        android_String16_setTo3(self, other, len, begin)
    }
    #[inline]
    pub unsafe fn append(&mut self, other: *const android_String16) -> android_status_t {
        android_String16_append(self, other)
    }
    #[inline]
    pub unsafe fn append1(&mut self, other: *const u16, len: size_t) -> android_status_t {
        android_String16_append1(self, other, len)
    }
    #[inline]
    pub unsafe fn insert(&mut self, pos: size_t, chrs: *const u16) -> android_status_t {
        android_String16_insert(self, pos, chrs)
    }
    #[inline]
    pub unsafe fn insert1(
        &mut self,
        pos: size_t,
        chrs: *const u16,
        len: size_t,
    ) -> android_status_t {
        android_String16_insert1(self, pos, chrs, len)
    }
    #[inline]
    pub unsafe fn findFirst(&self, c: u16) -> ssize_t {
        android_String16_findFirst(self, c)
    }
    #[inline]
    pub unsafe fn findLast(&self, c: u16) -> ssize_t {
        android_String16_findLast(self, c)
    }
    #[inline]
    pub unsafe fn startsWith(&self, prefix: *const android_String16) -> bool {
        android_String16_startsWith(self, prefix)
    }
    #[inline]
    pub unsafe fn startsWith1(&self, prefix: *const u16) -> bool {
        android_String16_startsWith1(self, prefix)
    }
    #[inline]
    pub unsafe fn contains(&self, chrs: *const u16) -> bool {
        android_String16_contains(self, chrs)
    }
    #[inline]
    pub unsafe fn makeLower(&mut self) -> android_status_t {
        android_String16_makeLower(self)
    }
    #[inline]
    pub unsafe fn replaceAll(&mut self, replaceThis: u16, withThis: u16) -> android_status_t {
        android_String16_replaceAll(self, replaceThis, withThis)
    }
    #[inline]
    pub unsafe fn remove(&mut self, len: size_t, begin: size_t) -> android_status_t {
        android_String16_remove(self, len, begin)
    }
    #[inline]
    pub unsafe fn isStaticString(&self) -> bool {
        android_String16_isStaticString(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_String16_String16(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(o: *const android_String16) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_String16_String161(__bindgen_tmp.as_mut_ptr(), o);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(o: *const android_String16, len: size_t, begin: size_t) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_String16_String162(__bindgen_tmp.as_mut_ptr(), o, len, begin);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(o: *const u16) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_String16_String163(__bindgen_tmp.as_mut_ptr(), o);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(o: *const u16, len: size_t) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_String16_String164(__bindgen_tmp.as_mut_ptr(), o, len);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new5(o: *const android_String8) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_String16_String165(__bindgen_tmp.as_mut_ptr(), o);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new6(o: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_String16_String166(__bindgen_tmp.as_mut_ptr(), o);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new7(o: *const ::std::os::raw::c_char, len: size_t) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_String16_String167(__bindgen_tmp.as_mut_ptr(), o, len);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        android_String16_String16_destructor(self)
    }
}
pub const android_String16_kIsSharedBufferAllocated: u32 = 2147483648;
#[doc = " The main templated vector class ensuring type safety"]
#[doc = " while making use of VectorImpl."]
#[doc = " This is the class users want to use."]
#[doc = ""]
#[doc = " DO NOT USE: please use std::vector"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct android_Vector {}
pub type android_Vector_value_type<TYPE> = TYPE;
#[doc = " sort (stable) the array"]
pub type android_Vector_compar_t<TYPE> = ::std::option::Option<
    unsafe extern "C" fn(lhs: *const TYPE, rhs: *const TYPE) -> ::std::os::raw::c_int,
>;
pub type android_Vector_compar_r_t<TYPE> = ::std::option::Option<
    unsafe extern "C" fn(
        lhs: *const TYPE,
        rhs: *const TYPE,
        state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type android_Vector_iterator<TYPE> = *mut TYPE;
pub type android_Vector_const_iterator<TYPE> = *const TYPE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct android_Flattenable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct android_BpBinder {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct android_IResultReceiver {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct android_IShellCallback {
    _unused: [u8; 0],
}
#[doc = " Base class and low-level protocol for a remotable object."]
#[doc = " You can derive from this class to create an object for which other"]
#[doc = " processes can hold references to it.  Communication between processes"]
#[doc = " (method calls, property get and set) is down through a low-level"]
#[doc = " protocol implemented on top of the transact() API."]
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub struct android_IBinder {
    pub _bindgen_opaque_blob: [u64; 3usize],
}
pub const android_IBinder_FIRST_CALL_TRANSACTION: android_IBinder__bindgen_ty_1 = 1;
pub const android_IBinder_LAST_CALL_TRANSACTION: android_IBinder__bindgen_ty_1 = 16777215;
pub const android_IBinder_PING_TRANSACTION: android_IBinder__bindgen_ty_1 = 1599098439;
pub const android_IBinder_DUMP_TRANSACTION: android_IBinder__bindgen_ty_1 = 1598311760;
pub const android_IBinder_SHELL_COMMAND_TRANSACTION: android_IBinder__bindgen_ty_1 = 1598246212;
pub const android_IBinder_INTERFACE_TRANSACTION: android_IBinder__bindgen_ty_1 = 1598968902;
pub const android_IBinder_SYSPROPS_TRANSACTION: android_IBinder__bindgen_ty_1 = 1599295570;
pub const android_IBinder_EXTENSION_TRANSACTION: android_IBinder__bindgen_ty_1 = 1598380116;
pub const android_IBinder_DEBUG_PID_TRANSACTION: android_IBinder__bindgen_ty_1 = 1599097156;
pub const android_IBinder_FLAG_ONEWAY: android_IBinder__bindgen_ty_1 = 1;
pub const android_IBinder_FLAG_PRIVATE_VENDOR: android_IBinder__bindgen_ty_1 = 268435456;
pub type android_IBinder__bindgen_ty_1 = u32;
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub struct android_IBinder_DeathRecipient {
    pub _bindgen_opaque_blob: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_android_IBinder_DeathRecipient() {
    assert_eq!(
        ::std::mem::size_of::<android_IBinder_DeathRecipient>(),
        24usize,
        concat!("Size of: ", stringify!(android_IBinder_DeathRecipient))
    );
    assert_eq!(
        ::std::mem::align_of::<android_IBinder_DeathRecipient>(),
        8usize,
        concat!("Alignment of ", stringify!(android_IBinder_DeathRecipient))
    );
}
pub type android_IBinder_object_cleanup_func = ::std::option::Option<
    unsafe extern "C" fn(
        id: *const ::std::os::raw::c_void,
        obj: *mut ::std::os::raw::c_void,
        cleanupCookie: *mut ::std::os::raw::c_void,
    ),
>;
#[test]
fn bindgen_test_layout_android_IBinder() {
    assert_eq!(
        ::std::mem::size_of::<android_IBinder>(),
        24usize,
        concat!("Size of: ", stringify!(android_IBinder))
    );
    assert_eq!(
        ::std::mem::align_of::<android_IBinder>(),
        8usize,
        concat!("Alignment of ", stringify!(android_IBinder))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7IBinder12shellCommandERKNS_2spIS0_EEiiiRNS_6VectorINS_8String16EEERKNS1_INS_14IShellCallbackEEERKNS1_INS_15IResultReceiverEEE"]
    pub fn android_IBinder_shellCommand(
        target: *const android_sp<android_IBinder>,
        in_: ::std::os::raw::c_int,
        out: ::std::os::raw::c_int,
        err: ::std::os::raw::c_int,
        args: *mut u8,
        callback: *const android_sp<android_IShellCallback>,
        resultReceiver: *const android_sp<android_IResultReceiver>,
    ) -> android_status_t;
}
extern "C" {
    #[doc = " This allows someone to add their own additions to an interface without"]
    #[doc = " having to modify the original interface."]
    #[doc = ""]
    #[doc = " For instance, imagine if we have this interface:"]
    #[doc = "     interface IFoo { void doFoo(); }"]
    #[doc = ""]
    #[doc = " If an unrelated owner (perhaps in a downstream codebase) wants to make a"]
    #[doc = " change to the interface, they have two options:"]
    #[doc = ""]
    #[doc = " A). Historical option that has proven to be BAD! Only the original"]
    #[doc = "     author of an interface should change an interface. If someone"]
    #[doc = "     downstream wants additional functionality, they should not ever"]
    #[doc = "     change the interface or use this method."]
    #[doc = ""]
    #[doc = "    BAD TO DO:  interface IFoo {                       BAD TO DO"]
    #[doc = "    BAD TO DO:      void doFoo();                      BAD TO DO"]
    #[doc = "    BAD TO DO: +    void doBar(); // adding a method   BAD TO DO"]
    #[doc = "    BAD TO DO:  }                                      BAD TO DO"]
    #[doc = ""]
    #[doc = " B). Option that this method enables!"]
    #[doc = "     Leave the original interface unchanged (do not change IFoo!)."]
    #[doc = "     Instead, create a new interface in a downstream package:"]
    #[doc = ""]
    #[doc = "         package com.<name>; // new functionality in a new package"]
    #[doc = "         interface IBar { void doBar(); }"]
    #[doc = ""]
    #[doc = "     When registering the interface, add:"]
    #[doc = "         sp<MyFoo> foo = new MyFoo; // class in AOSP codebase"]
    #[doc = "         sp<MyBar> bar = new MyBar; // custom extension class"]
    #[doc = "         foo->setExtension(bar);    // use method in BBinder"]
    #[doc = ""]
    #[doc = "     Then, clients of IFoo can get this extension:"]
    #[doc = "         sp<IBinder> binder = ...;"]
    #[doc = "         sp<IFoo> foo = interface_cast<IFoo>(binder); // handle if null"]
    #[doc = "         sp<IBinder> barBinder;"]
    #[doc = "         ... handle error ... = binder->getExtension(&barBinder);"]
    #[doc = "         sp<IBar> bar = interface_cast<IBar>(barBinder);"]
    #[doc = "         // if bar is null, then there is no extension or a different"]
    #[doc = "         // type of extension"]
    #[link_name = "\u{1}_ZN7android7IBinder12getExtensionEPNS_2spIS0_EE"]
    pub fn android_IBinder_getExtension(
        this: *mut android_IBinder,
        out: *mut android_sp<android_IBinder>,
    ) -> android_status_t;
}
extern "C" {
    #[doc = " Dump PID for a binder, for debugging."]
    #[link_name = "\u{1}_ZN7android7IBinder11getDebugPidEPi"]
    pub fn android_IBinder_getDebugPid(
        this: *mut android_IBinder,
        outPid: *mut pid_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7IBinderC2Ev"]
    pub fn android_IBinder_IBinder(this: *mut android_IBinder);
}
impl android_IBinder {
    #[inline]
    pub unsafe fn shellCommand(
        target: *const android_sp<android_IBinder>,
        in_: ::std::os::raw::c_int,
        out: ::std::os::raw::c_int,
        err: ::std::os::raw::c_int,
        args: *mut u8,
        callback: *const android_sp<android_IShellCallback>,
        resultReceiver: *const android_sp<android_IResultReceiver>,
    ) -> android_status_t {
        android_IBinder_shellCommand(target, in_, out, err, args, callback, resultReceiver)
    }
    #[inline]
    pub unsafe fn getExtension(
        &mut self,
        out: *mut android_sp<android_IBinder>,
    ) -> android_status_t {
        android_IBinder_getExtension(self, out)
    }
    #[inline]
    pub unsafe fn getDebugPid(&mut self, outPid: *mut pid_t) -> android_status_t {
        android_IBinder_getDebugPid(self, outPid)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_IBinder_IBinder(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[doc = " Check if this IBinder implements the interface named by"]
    #[doc = " @a descriptor.  If it does, the base pointer to it is returned,"]
    #[doc = " which you can safely static_cast<> to the concrete C++ interface."]
    #[link_name = "\u{1}_ZN7android7IBinder19queryLocalInterfaceERKNS_8String16E"]
    pub fn android_IBinder_queryLocalInterface(
        this: *mut ::std::os::raw::c_void,
        descriptor: *const android_String16,
    ) -> android_sp<android_IInterface>;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android7IBinder13checkSubclassEPKv"]
    pub fn android_IBinder_checkSubclass(
        this: *mut ::std::os::raw::c_void,
        subclassID: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7IBinder11localBinderEv"]
    pub fn android_IBinder_localBinder(this: *mut ::std::os::raw::c_void) -> *mut android_BBinder;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7IBinder12remoteBinderEv"]
    pub fn android_IBinder_remoteBinder(this: *mut ::std::os::raw::c_void)
        -> *mut android_BpBinder;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7IBinderD1Ev"]
    pub fn android_IBinder_IBinder_destructor(this: *mut android_IBinder);
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub struct android_BBinder {
    pub _bindgen_opaque_blob: [u64; 5usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct android_BBinder_Extras {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union android_BBinder__bindgen_ty_1 {
    pub mStability: i32,
    pub mReserved0: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_android_BBinder__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<android_BBinder__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(android_BBinder__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<android_BBinder__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(android_BBinder__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<android_BBinder__bindgen_ty_1>())).mStability as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(android_BBinder__bindgen_ty_1),
            "::",
            stringify!(mStability)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<android_BBinder__bindgen_ty_1>())).mReserved0 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(android_BBinder__bindgen_ty_1),
            "::",
            stringify!(mReserved0)
        )
    );
}
#[test]
fn bindgen_test_layout_android_BBinder() {
    assert_eq!(
        ::std::mem::size_of::<android_BBinder>(),
        40usize,
        concat!("Size of: ", stringify!(android_BBinder))
    );
    assert_eq!(
        ::std::mem::align_of::<android_BBinder>(),
        8usize,
        concat!("Alignment of ", stringify!(android_BBinder))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7BBinder15isRequestingSidEv"]
    pub fn android_BBinder_isRequestingSid(this: *mut android_BBinder) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7BBinder16setRequestingSidEb"]
    pub fn android_BBinder_setRequestingSid(this: *mut android_BBinder, requestSid: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7BBinder12getExtensionEv"]
    pub fn android_BBinder_getExtension(this: *mut android_BBinder) -> android_sp<android_IBinder>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7BBinder12setExtensionERKNS_2spINS_7IBinderEEE"]
    pub fn android_BBinder_setExtension(
        this: *mut android_BBinder,
        extension: *const android_sp<android_IBinder>,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7BBinder11getDebugPidEv"]
    pub fn android_BBinder_getDebugPid(this: *mut android_BBinder) -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7BBinderC1Ev"]
    pub fn android_BBinder_BBinder(this: *mut android_BBinder);
}
impl android_BBinder {
    #[inline]
    pub unsafe fn isRequestingSid(&mut self) -> bool {
        android_BBinder_isRequestingSid(self)
    }
    #[inline]
    pub unsafe fn setRequestingSid(&mut self, requestSid: bool) {
        android_BBinder_setRequestingSid(self, requestSid)
    }
    #[inline]
    pub unsafe fn getExtension(&mut self) -> android_sp<android_IBinder> {
        android_BBinder_getExtension(self)
    }
    #[inline]
    pub unsafe fn setExtension(&mut self, extension: *const android_sp<android_IBinder>) {
        android_BBinder_setExtension(self, extension)
    }
    #[inline]
    pub unsafe fn getDebugPid(&mut self) -> pid_t {
        android_BBinder_getDebugPid(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_BBinder_BBinder(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android7BBinder22getInterfaceDescriptorEv"]
    pub fn android_BBinder_getInterfaceDescriptor(
        this: *mut ::std::os::raw::c_void,
    ) -> *const android_String16;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android7BBinder13isBinderAliveEv"]
    pub fn android_BBinder_isBinderAlive(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7BBinder10pingBinderEv"]
    pub fn android_BBinder_pingBinder(this: *mut ::std::os::raw::c_void) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7BBinder4dumpEiRKNS_6VectorINS_8String16EEE"]
    pub fn android_BBinder_dump(
        this: *mut ::std::os::raw::c_void,
        fd: ::std::os::raw::c_int,
        args: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7BBinder8transactEjRKNS_6ParcelEPS1_j"]
    pub fn android_BBinder_transact(
        this: *mut ::std::os::raw::c_void,
        code: u32,
        data: *const android_Parcel,
        reply: *mut android_Parcel,
        flags: u32,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7BBinder11linkToDeathERKNS_2spINS_7IBinder14DeathRecipientEEEPvj"]
    pub fn android_BBinder_linkToDeath(
        this: *mut ::std::os::raw::c_void,
        recipient: *const android_sp<android_IBinder_DeathRecipient>,
        cookie: *mut ::std::os::raw::c_void,
        flags: u32,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7BBinder13unlinkToDeathERKNS_2wpINS_7IBinder14DeathRecipientEEEPvjPS4_"]
    pub fn android_BBinder_unlinkToDeath(
        this: *mut ::std::os::raw::c_void,
        recipient: *const u8,
        cookie: *mut ::std::os::raw::c_void,
        flags: u32,
        outRecipient: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7BBinder12attachObjectEPKvPvS3_PFvS2_S3_S3_E"]
    pub fn android_BBinder_attachObject(
        this: *mut ::std::os::raw::c_void,
        objectID: *const ::std::os::raw::c_void,
        object: *mut ::std::os::raw::c_void,
        cleanupCookie: *mut ::std::os::raw::c_void,
        func: android_IBinder_object_cleanup_func,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android7BBinder10findObjectEPKv"]
    pub fn android_BBinder_findObject(
        this: *mut ::std::os::raw::c_void,
        objectID: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7BBinder12detachObjectEPKv"]
    pub fn android_BBinder_detachObject(
        this: *mut ::std::os::raw::c_void,
        objectID: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7BBinder11localBinderEv"]
    pub fn android_BBinder_localBinder(this: *mut ::std::os::raw::c_void) -> *mut android_BBinder;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7BBinderD1Ev"]
    pub fn android_BBinder_BBinder_destructor(this: *mut android_BBinder);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android7BBinder10onTransactEjRKNS_6ParcelEPS1_j"]
    pub fn android_BBinder_onTransact(
        this: *mut ::std::os::raw::c_void,
        code: u32,
        data: *const android_Parcel,
        reply: *mut android_Parcel,
        flags: u32,
    ) -> android_status_t;
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub struct android_IInterface {
    pub _bindgen_opaque_blob: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_android_IInterface() {
    assert_eq!(
        ::std::mem::size_of::<android_IInterface>(),
        24usize,
        concat!("Size of: ", stringify!(android_IInterface))
    );
    assert_eq!(
        ::std::mem::align_of::<android_IInterface>(),
        8usize,
        concat!("Alignment of ", stringify!(android_IInterface))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android10IInterface8asBinderEPKS0_"]
    pub fn android_IInterface_asBinder(
        arg1: *const android_IInterface,
    ) -> android_sp<android_IBinder>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android10IInterface8asBinderERKNS_2spIS0_EE"]
    pub fn android_IInterface_asBinder1(
        arg1: *const android_sp<android_IInterface>,
    ) -> android_sp<android_IBinder>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android10IInterfaceC2Ev"]
    pub fn android_IInterface_IInterface(this: *mut android_IInterface);
}
impl android_IInterface {
    #[inline]
    pub unsafe fn asBinder(arg1: *const android_IInterface) -> android_sp<android_IBinder> {
        android_IInterface_asBinder(arg1)
    }
    #[inline]
    pub unsafe fn asBinder1(
        arg1: *const android_sp<android_IInterface>,
    ) -> android_sp<android_IBinder> {
        android_IInterface_asBinder1(arg1)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_IInterface_IInterface(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN7android10IInterfaceD1Ev"]
    pub fn android_IInterface_IInterface_destructor(this: *mut android_IInterface);
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub struct android_Parcelable {
    pub _bindgen_opaque_blob: u64,
}
#[test]
fn bindgen_test_layout_android_Parcelable() {
    assert_eq!(
        ::std::mem::size_of::<android_Parcelable>(),
        8usize,
        concat!("Size of: ", stringify!(android_Parcelable))
    );
    assert_eq!(
        ::std::mem::align_of::<android_Parcelable>(),
        8usize,
        concat!("Alignment of ", stringify!(android_Parcelable))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct android_flat_binder_object {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct android_TextOutput {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub struct android_Parcel {
    pub _bindgen_opaque_blob: [u64; 15usize],
}
pub type android_Parcel_release_func = ::std::option::Option<
    unsafe extern "C" fn(
        parcel: *mut android_Parcel,
        data: *const u8,
        dataSize: size_t,
        objects: *const binder_size_t,
        objectsSize: size_t,
        cookie: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub struct android_Parcel_ReadableBlob {
    pub _bindgen_opaque_blob: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_android_Parcel_ReadableBlob() {
    assert_eq!(
        ::std::mem::size_of::<android_Parcel_ReadableBlob>(),
        32usize,
        concat!("Size of: ", stringify!(android_Parcel_ReadableBlob))
    );
    assert_eq!(
        ::std::mem::align_of::<android_Parcel_ReadableBlob>(),
        8usize,
        concat!("Alignment of ", stringify!(android_Parcel_ReadableBlob))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub struct android_Parcel_WritableBlob {
    pub _bindgen_opaque_blob: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_android_Parcel_WritableBlob() {
    assert_eq!(
        ::std::mem::size_of::<android_Parcel_WritableBlob>(),
        32usize,
        concat!("Size of: ", stringify!(android_Parcel_WritableBlob))
    );
    assert_eq!(
        ::std::mem::align_of::<android_Parcel_WritableBlob>(),
        8usize,
        concat!("Alignment of ", stringify!(android_Parcel_WritableBlob))
    );
}
#[test]
fn bindgen_test_layout_android_Parcel() {
    assert_eq!(
        ::std::mem::size_of::<android_Parcel>(),
        120usize,
        concat!("Size of: ", stringify!(android_Parcel))
    );
    assert_eq!(
        ::std::mem::align_of::<android_Parcel>(),
        8usize,
        concat!("Alignment of ", stringify!(android_Parcel))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel4dataEv"]
    pub fn android_Parcel_data(this: *const android_Parcel) -> *const u8;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel8dataSizeEv"]
    pub fn android_Parcel_dataSize(this: *const android_Parcel) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel9dataAvailEv"]
    pub fn android_Parcel_dataAvail(this: *const android_Parcel) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel12dataPositionEv"]
    pub fn android_Parcel_dataPosition(this: *const android_Parcel) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel12dataCapacityEv"]
    pub fn android_Parcel_dataCapacity(this: *const android_Parcel) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel11setDataSizeEm"]
    pub fn android_Parcel_setDataSize(this: *mut android_Parcel, size: size_t) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel15setDataPositionEm"]
    pub fn android_Parcel_setDataPosition(this: *const android_Parcel, pos: size_t);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel15setDataCapacityEm"]
    pub fn android_Parcel_setDataCapacity(
        this: *mut android_Parcel,
        size: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel7setDataEPKhm"]
    pub fn android_Parcel_setData(
        this: *mut android_Parcel,
        buffer: *const u8,
        len: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel10appendFromEPKS0_mm"]
    pub fn android_Parcel_appendFrom(
        this: *mut android_Parcel,
        parcel: *const android_Parcel,
        start: size_t,
        len: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel11compareDataERKS0_"]
    pub fn android_Parcel_compareData(
        this: *mut android_Parcel,
        other: *const android_Parcel,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel8allowFdsEv"]
    pub fn android_Parcel_allowFds(this: *const android_Parcel) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel12pushAllowFdsEb"]
    pub fn android_Parcel_pushAllowFds(this: *mut android_Parcel, allowFds: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel15restoreAllowFdsEb"]
    pub fn android_Parcel_restoreAllowFds(this: *mut android_Parcel, lastValue: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel18hasFileDescriptorsEv"]
    pub fn android_Parcel_hasFileDescriptors(this: *const android_Parcel) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel19writeInterfaceTokenERKNS_8String16E"]
    pub fn android_Parcel_writeInterfaceToken(
        this: *mut android_Parcel,
        interface: *const android_String16,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel16enforceInterfaceERKNS_8String16EPNS_14IPCThreadStateE"]
    pub fn android_Parcel_enforceInterface(
        this: *const android_Parcel,
        interface: *const android_String16,
        threadState: *mut android_IPCThreadState,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel16enforceInterfaceEPKDsmPNS_14IPCThreadStateE"]
    pub fn android_Parcel_enforceInterface1(
        this: *const android_Parcel,
        interface: *const u16,
        len: size_t,
        threadState: *mut android_IPCThreadState,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel14checkInterfaceEPNS_7IBinderE"]
    pub fn android_Parcel_checkInterface(
        this: *const android_Parcel,
        arg1: *mut android_IBinder,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel8freeDataEv"]
    pub fn android_Parcel_freeData(this: *mut android_Parcel);
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel12objectsCountEv"]
    pub fn android_Parcel_objectsCount(this: *const android_Parcel) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel10errorCheckEv"]
    pub fn android_Parcel_errorCheck(this: *const android_Parcel) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel8setErrorEi"]
    pub fn android_Parcel_setError(this: *mut android_Parcel, err: android_status_t);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel5writeEPKvm"]
    pub fn android_Parcel_write(
        this: *mut android_Parcel,
        data: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel12writeInplaceEm"]
    pub fn android_Parcel_writeInplace(
        this: *mut android_Parcel,
        len: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel13writeUnpaddedEPKvm"]
    pub fn android_Parcel_writeUnpadded(
        this: *mut android_Parcel,
        data: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel10writeInt32Ei"]
    pub fn android_Parcel_writeInt32(this: *mut android_Parcel, val: i32) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel11writeUint32Ej"]
    pub fn android_Parcel_writeUint32(this: *mut android_Parcel, val: u32) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel10writeInt64El"]
    pub fn android_Parcel_writeInt64(this: *mut android_Parcel, val: i64) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel11writeUint64Em"]
    pub fn android_Parcel_writeUint64(this: *mut android_Parcel, val: u64) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel10writeFloatEf"]
    pub fn android_Parcel_writeFloat(this: *mut android_Parcel, val: f32) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel11writeDoubleEd"]
    pub fn android_Parcel_writeDouble(this: *mut android_Parcel, val: f64) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel12writeCStringEPKc"]
    pub fn android_Parcel_writeCString(
        this: *mut android_Parcel,
        str: *const ::std::os::raw::c_char,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel12writeString8ERKNS_7String8E"]
    pub fn android_Parcel_writeString8(
        this: *mut android_Parcel,
        str: *const android_String8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel13writeString16ERKNS_8String16E"]
    pub fn android_Parcel_writeString16(
        this: *mut android_Parcel,
        str: *const android_String16,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel13writeString16ERKSt8optionalINS_8String16EE"]
    pub fn android_Parcel_writeString161(
        this: *mut android_Parcel,
        str: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel13writeString16ERKSt10unique_ptrINS_8String16ESt14default_deleteIS2_EE"]
    pub fn android_Parcel_writeString162(
        this: *mut android_Parcel,
        str: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel13writeString16EPKDsm"]
    pub fn android_Parcel_writeString163(
        this: *mut android_Parcel,
        str: *const u16,
        len: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel17writeStrongBinderERKNS_2spINS_7IBinderEEE"]
    pub fn android_Parcel_writeStrongBinder(
        this: *mut android_Parcel,
        val: *const android_sp<android_IBinder>,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel15writeInt32ArrayEmPKi"]
    pub fn android_Parcel_writeInt32Array(
        this: *mut android_Parcel,
        len: size_t,
        val: *const i32,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel14writeByteArrayEmPKh"]
    pub fn android_Parcel_writeByteArray(
        this: *mut android_Parcel,
        len: size_t,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel9writeBoolEb"]
    pub fn android_Parcel_writeBool(this: *mut android_Parcel, val: bool) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel9writeCharEDs"]
    pub fn android_Parcel_writeChar(this: *mut android_Parcel, val: u16) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel9writeByteEa"]
    pub fn android_Parcel_writeByte(this: *mut android_Parcel, val: i8) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel16writeUtf8AsUtf16ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn android_Parcel_writeUtf8AsUtf16(
        this: *mut android_Parcel,
        str: *const std_string,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel16writeUtf8AsUtf16ERKSt8optionalINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE"]
    pub fn android_Parcel_writeUtf8AsUtf161(
        this: *mut android_Parcel,
        str: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel16writeUtf8AsUtf16ERKSt10unique_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS7_EE"]
    pub fn android_Parcel_writeUtf8AsUtf162(
        this: *mut android_Parcel,
        str: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel15writeByteVectorERKSt8optionalISt6vectorIaSaIaEEE"]
    pub fn android_Parcel_writeByteVector(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel15writeByteVectorERKSt10unique_ptrISt6vectorIaSaIaEESt14default_deleteIS4_EE"]
    pub fn android_Parcel_writeByteVector1(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel15writeByteVectorERKSt6vectorIaSaIaEE"]
    pub fn android_Parcel_writeByteVector2(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel15writeByteVectorERKSt8optionalISt6vectorIhSaIhEEE"]
    pub fn android_Parcel_writeByteVector3(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel15writeByteVectorERKSt10unique_ptrISt6vectorIhSaIhEESt14default_deleteIS4_EE"]
    pub fn android_Parcel_writeByteVector4(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel15writeByteVectorERKSt6vectorIhSaIhEE"]
    pub fn android_Parcel_writeByteVector5(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel16writeInt32VectorERKSt8optionalISt6vectorIiSaIiEEE"]
    pub fn android_Parcel_writeInt32Vector(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel16writeInt32VectorERKSt10unique_ptrISt6vectorIiSaIiEESt14default_deleteIS4_EE"]
    pub fn android_Parcel_writeInt32Vector1(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel16writeInt32VectorERKSt6vectorIiSaIiEE"]
    pub fn android_Parcel_writeInt32Vector2(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel16writeInt64VectorERKSt8optionalISt6vectorIlSaIlEEE"]
    pub fn android_Parcel_writeInt64Vector(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel16writeInt64VectorERKSt10unique_ptrISt6vectorIlSaIlEESt14default_deleteIS4_EE"]
    pub fn android_Parcel_writeInt64Vector1(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel16writeInt64VectorERKSt6vectorIlSaIlEE"]
    pub fn android_Parcel_writeInt64Vector2(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel17writeUint64VectorERKSt8optionalISt6vectorImSaImEEE"]
    pub fn android_Parcel_writeUint64Vector(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel17writeUint64VectorERKSt10unique_ptrISt6vectorImSaImEESt14default_deleteIS4_EE"]
    pub fn android_Parcel_writeUint64Vector1(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel17writeUint64VectorERKSt6vectorImSaImEE"]
    pub fn android_Parcel_writeUint64Vector2(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel16writeFloatVectorERKSt8optionalISt6vectorIfSaIfEEE"]
    pub fn android_Parcel_writeFloatVector(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel16writeFloatVectorERKSt10unique_ptrISt6vectorIfSaIfEESt14default_deleteIS4_EE"]
    pub fn android_Parcel_writeFloatVector1(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel16writeFloatVectorERKSt6vectorIfSaIfEE"]
    pub fn android_Parcel_writeFloatVector2(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel17writeDoubleVectorERKSt8optionalISt6vectorIdSaIdEEE"]
    pub fn android_Parcel_writeDoubleVector(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel17writeDoubleVectorERKSt10unique_ptrISt6vectorIdSaIdEESt14default_deleteIS4_EE"]
    pub fn android_Parcel_writeDoubleVector1(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel17writeDoubleVectorERKSt6vectorIdSaIdEE"]
    pub fn android_Parcel_writeDoubleVector2(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel15writeBoolVectorERKSt8optionalISt6vectorIbSaIbEEE"]
    pub fn android_Parcel_writeBoolVector(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel15writeBoolVectorERKSt10unique_ptrISt6vectorIbSaIbEESt14default_deleteIS4_EE"]
    pub fn android_Parcel_writeBoolVector1(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel15writeBoolVectorERKSt6vectorIbSaIbEE"]
    pub fn android_Parcel_writeBoolVector2(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel15writeCharVectorERKSt8optionalISt6vectorIDsSaIDsEEE"]
    pub fn android_Parcel_writeCharVector(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel15writeCharVectorERKSt10unique_ptrISt6vectorIDsSaIDsEESt14default_deleteIS4_EE"]
    pub fn android_Parcel_writeCharVector1(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel15writeCharVectorERKSt6vectorIDsSaIDsEE"]
    pub fn android_Parcel_writeCharVector2(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel19writeString16VectorERKSt8optionalISt6vectorIS1_INS_8String16EESaIS4_EEE"]
    pub fn android_Parcel_writeString16Vector(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel19writeString16VectorERKSt10unique_ptrISt6vectorIS1_INS_8String16ESt14default_deleteIS3_EESaIS6_EES4_IS8_EE"]
    pub fn android_Parcel_writeString16Vector1(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel19writeString16VectorERKSt6vectorINS_8String16ESaIS2_EE"]
    pub fn android_Parcel_writeString16Vector2(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel28writeUtf8VectorAsUtf16VectorERKSt8optionalISt6vectorIS1_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS9_EEE"]
    pub fn android_Parcel_writeUtf8VectorAsUtf16Vector(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel28writeUtf8VectorAsUtf16VectorERKSt10unique_ptrISt6vectorIS1_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS8_EESaISB_EES9_ISD_EE"]
    pub fn android_Parcel_writeUtf8VectorAsUtf16Vector1(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel28writeUtf8VectorAsUtf16VectorERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EE"]
    pub fn android_Parcel_writeUtf8VectorAsUtf16Vector2(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel23writeStrongBinderVectorERKSt8optionalISt6vectorINS_2spINS_7IBinderEEESaIS5_EEE"]
    pub fn android_Parcel_writeStrongBinderVector(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel23writeStrongBinderVectorERKSt10unique_ptrISt6vectorINS_2spINS_7IBinderEEESaIS5_EESt14default_deleteIS7_EE"]
    pub fn android_Parcel_writeStrongBinderVector1(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel23writeStrongBinderVectorERKSt6vectorINS_2spINS_7IBinderEEESaIS4_EE"]
    pub fn android_Parcel_writeStrongBinderVector2(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel15writeParcelableERKNS_10ParcelableE"]
    pub fn android_Parcel_writeParcelable(
        this: *mut android_Parcel,
        parcelable: *const android_Parcelable,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel17writeNativeHandleEPK13native_handle"]
    pub fn android_Parcel_writeNativeHandle(
        this: *mut android_Parcel,
        handle: *const native_handle,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel19writeFileDescriptorEib"]
    pub fn android_Parcel_writeFileDescriptor(
        this: *mut android_Parcel,
        fd: ::std::os::raw::c_int,
        takeOwnership: bool,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel22writeDupFileDescriptorEi"]
    pub fn android_Parcel_writeDupFileDescriptor(
        this: *mut android_Parcel,
        fd: ::std::os::raw::c_int,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel25writeParcelFileDescriptorEib"]
    pub fn android_Parcel_writeParcelFileDescriptor(
        this: *mut android_Parcel,
        fd: ::std::os::raw::c_int,
        takeOwnership: bool,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel28writeDupParcelFileDescriptorEi"]
    pub fn android_Parcel_writeDupParcelFileDescriptor(
        this: *mut android_Parcel,
        fd: ::std::os::raw::c_int,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel25writeUniqueFileDescriptorERKNS_4base14unique_fd_implINS1_13DefaultCloserEEE"]
    pub fn android_Parcel_writeUniqueFileDescriptor(
        this: *mut android_Parcel,
        fd: *const android_base_unique_fd,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel31writeUniqueFileDescriptorVectorERKSt8optionalISt6vectorINS_4base14unique_fd_implINS3_13DefaultCloserEEESaIS6_EEE"]
    pub fn android_Parcel_writeUniqueFileDescriptorVector(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel31writeUniqueFileDescriptorVectorERKSt10unique_ptrISt6vectorINS_4base14unique_fd_implINS3_13DefaultCloserEEESaIS6_EESt14default_deleteIS8_EE"]
    pub fn android_Parcel_writeUniqueFileDescriptorVector1(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel31writeUniqueFileDescriptorVectorERKSt6vectorINS_4base14unique_fd_implINS2_13DefaultCloserEEESaIS5_EE"]
    pub fn android_Parcel_writeUniqueFileDescriptorVector2(
        this: *mut android_Parcel,
        val: *const u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel9writeBlobEmbPNS0_12WritableBlobE"]
    pub fn android_Parcel_writeBlob(
        this: *mut android_Parcel,
        len: size_t,
        mutableCopy: bool,
        outBlob: *mut android_Parcel_WritableBlob,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel35writeDupImmutableBlobFileDescriptorEi"]
    pub fn android_Parcel_writeDupImmutableBlobFileDescriptor(
        this: *mut android_Parcel,
        fd: ::std::os::raw::c_int,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel11writeObjectERKNS_18flat_binder_objectEb"]
    pub fn android_Parcel_writeObject(
        this: *mut android_Parcel,
        val: *const android_flat_binder_object,
        nullMetaData: bool,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel16writeNoExceptionEv"]
    pub fn android_Parcel_writeNoException(this: *mut android_Parcel) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel4readEPvm"]
    pub fn android_Parcel_read(
        this: *const android_Parcel,
        outData: *mut ::std::os::raw::c_void,
        len: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel11readInplaceEm"]
    pub fn android_Parcel_readInplace(
        this: *const android_Parcel,
        len: size_t,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel9readInt32Ev"]
    pub fn android_Parcel_readInt32(this: *const android_Parcel) -> i32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel9readInt32EPi"]
    pub fn android_Parcel_readInt321(
        this: *const android_Parcel,
        pArg: *mut i32,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel10readUint32Ev"]
    pub fn android_Parcel_readUint32(this: *const android_Parcel) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel10readUint32EPj"]
    pub fn android_Parcel_readUint321(
        this: *const android_Parcel,
        pArg: *mut u32,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel9readInt64Ev"]
    pub fn android_Parcel_readInt64(this: *const android_Parcel) -> i64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel9readInt64EPl"]
    pub fn android_Parcel_readInt641(
        this: *const android_Parcel,
        pArg: *mut i64,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel10readUint64Ev"]
    pub fn android_Parcel_readUint64(this: *const android_Parcel) -> u64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel10readUint64EPm"]
    pub fn android_Parcel_readUint641(
        this: *const android_Parcel,
        pArg: *mut u64,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel9readFloatEv"]
    pub fn android_Parcel_readFloat(this: *const android_Parcel) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel9readFloatEPf"]
    pub fn android_Parcel_readFloat1(
        this: *const android_Parcel,
        pArg: *mut f32,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel10readDoubleEv"]
    pub fn android_Parcel_readDouble(this: *const android_Parcel) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel10readDoubleEPd"]
    pub fn android_Parcel_readDouble1(
        this: *const android_Parcel,
        pArg: *mut f64,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel10readIntPtrEv"]
    pub fn android_Parcel_readIntPtr(this: *const android_Parcel) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel10readIntPtrEPl"]
    pub fn android_Parcel_readIntPtr1(
        this: *const android_Parcel,
        pArg: *mut isize,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel8readBoolEv"]
    pub fn android_Parcel_readBool(this: *const android_Parcel) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel8readBoolEPb"]
    pub fn android_Parcel_readBool1(
        this: *const android_Parcel,
        pArg: *mut bool,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel8readCharEv"]
    pub fn android_Parcel_readChar(this: *const android_Parcel) -> u16;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel8readCharEPDs"]
    pub fn android_Parcel_readChar1(
        this: *const android_Parcel,
        pArg: *mut u16,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel8readByteEv"]
    pub fn android_Parcel_readByte(this: *const android_Parcel) -> i8;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel8readByteEPa"]
    pub fn android_Parcel_readByte1(this: *const android_Parcel, pArg: *mut i8)
        -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel17readUtf8FromUtf16EPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn android_Parcel_readUtf8FromUtf16(
        this: *const android_Parcel,
        str: *mut std_string,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel17readUtf8FromUtf16EPSt8optionalINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE"]
    pub fn android_Parcel_readUtf8FromUtf161(
        this: *const android_Parcel,
        str: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel17readUtf8FromUtf16EPSt10unique_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS7_EE"]
    pub fn android_Parcel_readUtf8FromUtf162(
        this: *const android_Parcel,
        str: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel11readCStringEv"]
    pub fn android_Parcel_readCString(this: *const android_Parcel)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel11readString8Ev"]
    pub fn android_Parcel_readString8(this: *const android_Parcel) -> android_String8;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel11readString8EPNS_7String8E"]
    pub fn android_Parcel_readString81(
        this: *const android_Parcel,
        pArg: *mut android_String8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel12readString16Ev"]
    pub fn android_Parcel_readString16(this: *const android_Parcel) -> android_String16;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel12readString16EPNS_8String16E"]
    pub fn android_Parcel_readString161(
        this: *const android_Parcel,
        pArg: *mut android_String16,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel12readString16EPSt8optionalINS_8String16EE"]
    pub fn android_Parcel_readString162(
        this: *const android_Parcel,
        pArg: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel12readString16EPSt10unique_ptrINS_8String16ESt14default_deleteIS2_EE"]
    pub fn android_Parcel_readString163(
        this: *const android_Parcel,
        pArg: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel19readString16InplaceEPm"]
    pub fn android_Parcel_readString16Inplace(
        this: *const android_Parcel,
        outLen: *mut size_t,
    ) -> *const u16;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel16readStrongBinderEv"]
    pub fn android_Parcel_readStrongBinder(
        this: *const android_Parcel,
    ) -> android_sp<android_IBinder>;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel16readStrongBinderEPNS_2spINS_7IBinderEEE"]
    pub fn android_Parcel_readStrongBinder1(
        this: *const android_Parcel,
        val: *mut android_sp<android_IBinder>,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel24readNullableStrongBinderEPNS_2spINS_7IBinderEEE"]
    pub fn android_Parcel_readNullableStrongBinder(
        this: *const android_Parcel,
        val: *mut android_sp<android_IBinder>,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel14readParcelableEPNS_10ParcelableE"]
    pub fn android_Parcel_readParcelable(
        this: *const android_Parcel,
        parcelable: *mut android_Parcelable,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel22readStrongBinderVectorEPSt8optionalISt6vectorINS_2spINS_7IBinderEEESaIS5_EEE"]
    pub fn android_Parcel_readStrongBinderVector(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel22readStrongBinderVectorEPSt10unique_ptrISt6vectorINS_2spINS_7IBinderEEESaIS5_EESt14default_deleteIS7_EE"]
    pub fn android_Parcel_readStrongBinderVector1(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel22readStrongBinderVectorEPSt6vectorINS_2spINS_7IBinderEEESaIS4_EE"]
    pub fn android_Parcel_readStrongBinderVector2(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel14readByteVectorEPSt8optionalISt6vectorIaSaIaEEE"]
    pub fn android_Parcel_readByteVector(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel14readByteVectorEPSt10unique_ptrISt6vectorIaSaIaEESt14default_deleteIS4_EE"]
    pub fn android_Parcel_readByteVector1(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel14readByteVectorEPSt6vectorIaSaIaEE"]
    pub fn android_Parcel_readByteVector2(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel14readByteVectorEPSt8optionalISt6vectorIhSaIhEEE"]
    pub fn android_Parcel_readByteVector3(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel14readByteVectorEPSt10unique_ptrISt6vectorIhSaIhEESt14default_deleteIS4_EE"]
    pub fn android_Parcel_readByteVector4(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel14readByteVectorEPSt6vectorIhSaIhEE"]
    pub fn android_Parcel_readByteVector5(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel15readInt32VectorEPSt8optionalISt6vectorIiSaIiEEE"]
    pub fn android_Parcel_readInt32Vector(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel15readInt32VectorEPSt10unique_ptrISt6vectorIiSaIiEESt14default_deleteIS4_EE"]
    pub fn android_Parcel_readInt32Vector1(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel15readInt32VectorEPSt6vectorIiSaIiEE"]
    pub fn android_Parcel_readInt32Vector2(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel15readInt64VectorEPSt8optionalISt6vectorIlSaIlEEE"]
    pub fn android_Parcel_readInt64Vector(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel15readInt64VectorEPSt10unique_ptrISt6vectorIlSaIlEESt14default_deleteIS4_EE"]
    pub fn android_Parcel_readInt64Vector1(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel15readInt64VectorEPSt6vectorIlSaIlEE"]
    pub fn android_Parcel_readInt64Vector2(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel16readUint64VectorEPSt8optionalISt6vectorImSaImEEE"]
    pub fn android_Parcel_readUint64Vector(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel16readUint64VectorEPSt10unique_ptrISt6vectorImSaImEESt14default_deleteIS4_EE"]
    pub fn android_Parcel_readUint64Vector1(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel16readUint64VectorEPSt6vectorImSaImEE"]
    pub fn android_Parcel_readUint64Vector2(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel15readFloatVectorEPSt8optionalISt6vectorIfSaIfEEE"]
    pub fn android_Parcel_readFloatVector(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel15readFloatVectorEPSt10unique_ptrISt6vectorIfSaIfEESt14default_deleteIS4_EE"]
    pub fn android_Parcel_readFloatVector1(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel15readFloatVectorEPSt6vectorIfSaIfEE"]
    pub fn android_Parcel_readFloatVector2(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel16readDoubleVectorEPSt8optionalISt6vectorIdSaIdEEE"]
    pub fn android_Parcel_readDoubleVector(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel16readDoubleVectorEPSt10unique_ptrISt6vectorIdSaIdEESt14default_deleteIS4_EE"]
    pub fn android_Parcel_readDoubleVector1(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel16readDoubleVectorEPSt6vectorIdSaIdEE"]
    pub fn android_Parcel_readDoubleVector2(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel14readBoolVectorEPSt8optionalISt6vectorIbSaIbEEE"]
    pub fn android_Parcel_readBoolVector(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel14readBoolVectorEPSt10unique_ptrISt6vectorIbSaIbEESt14default_deleteIS4_EE"]
    pub fn android_Parcel_readBoolVector1(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel14readBoolVectorEPSt6vectorIbSaIbEE"]
    pub fn android_Parcel_readBoolVector2(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel14readCharVectorEPSt8optionalISt6vectorIDsSaIDsEEE"]
    pub fn android_Parcel_readCharVector(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel14readCharVectorEPSt10unique_ptrISt6vectorIDsSaIDsEESt14default_deleteIS4_EE"]
    pub fn android_Parcel_readCharVector1(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel14readCharVectorEPSt6vectorIDsSaIDsEE"]
    pub fn android_Parcel_readCharVector2(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel18readString16VectorEPSt8optionalISt6vectorIS1_INS_8String16EESaIS4_EEE"]
    pub fn android_Parcel_readString16Vector(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel18readString16VectorEPSt10unique_ptrISt6vectorIS1_INS_8String16ESt14default_deleteIS3_EESaIS6_EES4_IS8_EE"]
    pub fn android_Parcel_readString16Vector1(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel18readString16VectorEPSt6vectorINS_8String16ESaIS2_EE"]
    pub fn android_Parcel_readString16Vector2(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel29readUtf8VectorFromUtf16VectorEPSt8optionalISt6vectorIS1_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS9_EEE"]
    pub fn android_Parcel_readUtf8VectorFromUtf16Vector(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel29readUtf8VectorFromUtf16VectorEPSt10unique_ptrISt6vectorIS1_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS8_EESaISB_EES9_ISD_EE"]
    pub fn android_Parcel_readUtf8VectorFromUtf16Vector1(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel29readUtf8VectorFromUtf16VectorEPSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EE"]
    pub fn android_Parcel_readUtf8VectorFromUtf16Vector2(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel17readExceptionCodeEv"]
    pub fn android_Parcel_readExceptionCode(this: *const android_Parcel) -> i32;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel16readNativeHandleEv"]
    pub fn android_Parcel_readNativeHandle(this: *const android_Parcel) -> *mut native_handle;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel18readFileDescriptorEv"]
    pub fn android_Parcel_readFileDescriptor(this: *const android_Parcel) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel24readParcelFileDescriptorEv"]
    pub fn android_Parcel_readParcelFileDescriptor(
        this: *const android_Parcel,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel24readUniqueFileDescriptorEPNS_4base14unique_fd_implINS1_13DefaultCloserEEE"]
    pub fn android_Parcel_readUniqueFileDescriptor(
        this: *const android_Parcel,
        val: *mut android_base_unique_fd,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel30readUniqueParcelFileDescriptorEPNS_4base14unique_fd_implINS1_13DefaultCloserEEE"]
    pub fn android_Parcel_readUniqueParcelFileDescriptor(
        this: *const android_Parcel,
        val: *mut android_base_unique_fd,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel30readUniqueFileDescriptorVectorEPSt8optionalISt6vectorINS_4base14unique_fd_implINS3_13DefaultCloserEEESaIS6_EEE"]
    pub fn android_Parcel_readUniqueFileDescriptorVector(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel30readUniqueFileDescriptorVectorEPSt10unique_ptrISt6vectorINS_4base14unique_fd_implINS3_13DefaultCloserEEESaIS6_EESt14default_deleteIS8_EE"]
    pub fn android_Parcel_readUniqueFileDescriptorVector1(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel30readUniqueFileDescriptorVectorEPSt6vectorINS_4base14unique_fd_implINS2_13DefaultCloserEEESaIS5_EE"]
    pub fn android_Parcel_readUniqueFileDescriptorVector2(
        this: *const android_Parcel,
        val: *mut u8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel8readBlobEmPNS0_12ReadableBlobE"]
    pub fn android_Parcel_readBlob(
        this: *const android_Parcel,
        len: size_t,
        outBlob: *mut android_Parcel_ReadableBlob,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel10readObjectEb"]
    pub fn android_Parcel_readObject(
        this: *const android_Parcel,
        nullMetaData: bool,
    ) -> *const android_flat_binder_object;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel20closeFileDescriptorsEv"]
    pub fn android_Parcel_closeFileDescriptors(this: *mut android_Parcel);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel18getGlobalAllocSizeEv"]
    pub fn android_Parcel_getGlobalAllocSize() -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel19getGlobalAllocCountEv"]
    pub fn android_Parcel_getGlobalAllocCount() -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6Parcel27replaceCallingWorkSourceUidEj"]
    pub fn android_Parcel_replaceCallingWorkSourceUid(
        this: *mut android_Parcel,
        uid: uid_t,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel24readCallingWorkSourceUidEv"]
    pub fn android_Parcel_readCallingWorkSourceUid(this: *const android_Parcel) -> uid_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel5printERNS_10TextOutputEj"]
    pub fn android_Parcel_print(
        this: *const android_Parcel,
        to: *mut android_TextOutput,
        flags: u32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel17getBlobAshmemSizeEv"]
    pub fn android_Parcel_getBlobAshmemSize(this: *const android_Parcel) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6Parcel17getOpenAshmemSizeEv"]
    pub fn android_Parcel_getOpenAshmemSize(this: *const android_Parcel) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6ParcelC1Ev"]
    pub fn android_Parcel_Parcel(this: *mut android_Parcel);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6ParcelD1Ev"]
    pub fn android_Parcel_Parcel_destructor(this: *mut android_Parcel);
}
impl android_Parcel {
    #[inline]
    pub unsafe fn data(&self) -> *const u8 {
        android_Parcel_data(self)
    }
    #[inline]
    pub unsafe fn dataSize(&self) -> size_t {
        android_Parcel_dataSize(self)
    }
    #[inline]
    pub unsafe fn dataAvail(&self) -> size_t {
        android_Parcel_dataAvail(self)
    }
    #[inline]
    pub unsafe fn dataPosition(&self) -> size_t {
        android_Parcel_dataPosition(self)
    }
    #[inline]
    pub unsafe fn dataCapacity(&self) -> size_t {
        android_Parcel_dataCapacity(self)
    }
    #[inline]
    pub unsafe fn setDataSize(&mut self, size: size_t) -> android_status_t {
        android_Parcel_setDataSize(self, size)
    }
    #[inline]
    pub unsafe fn setDataPosition(&self, pos: size_t) {
        android_Parcel_setDataPosition(self, pos)
    }
    #[inline]
    pub unsafe fn setDataCapacity(&mut self, size: size_t) -> android_status_t {
        android_Parcel_setDataCapacity(self, size)
    }
    #[inline]
    pub unsafe fn setData(&mut self, buffer: *const u8, len: size_t) -> android_status_t {
        android_Parcel_setData(self, buffer, len)
    }
    #[inline]
    pub unsafe fn appendFrom(
        &mut self,
        parcel: *const android_Parcel,
        start: size_t,
        len: size_t,
    ) -> android_status_t {
        android_Parcel_appendFrom(self, parcel, start, len)
    }
    #[inline]
    pub unsafe fn compareData(&mut self, other: *const android_Parcel) -> ::std::os::raw::c_int {
        android_Parcel_compareData(self, other)
    }
    #[inline]
    pub unsafe fn allowFds(&self) -> bool {
        android_Parcel_allowFds(self)
    }
    #[inline]
    pub unsafe fn pushAllowFds(&mut self, allowFds: bool) -> bool {
        android_Parcel_pushAllowFds(self, allowFds)
    }
    #[inline]
    pub unsafe fn restoreAllowFds(&mut self, lastValue: bool) {
        android_Parcel_restoreAllowFds(self, lastValue)
    }
    #[inline]
    pub unsafe fn hasFileDescriptors(&self) -> bool {
        android_Parcel_hasFileDescriptors(self)
    }
    #[inline]
    pub unsafe fn writeInterfaceToken(
        &mut self,
        interface: *const android_String16,
    ) -> android_status_t {
        android_Parcel_writeInterfaceToken(self, interface)
    }
    #[inline]
    pub unsafe fn enforceInterface(
        &self,
        interface: *const android_String16,
        threadState: *mut android_IPCThreadState,
    ) -> bool {
        android_Parcel_enforceInterface(self, interface, threadState)
    }
    #[inline]
    pub unsafe fn enforceInterface1(
        &self,
        interface: *const u16,
        len: size_t,
        threadState: *mut android_IPCThreadState,
    ) -> bool {
        android_Parcel_enforceInterface1(self, interface, len, threadState)
    }
    #[inline]
    pub unsafe fn checkInterface(&self, arg1: *mut android_IBinder) -> bool {
        android_Parcel_checkInterface(self, arg1)
    }
    #[inline]
    pub unsafe fn freeData(&mut self) {
        android_Parcel_freeData(self)
    }
    #[inline]
    pub unsafe fn objectsCount(&self) -> size_t {
        android_Parcel_objectsCount(self)
    }
    #[inline]
    pub unsafe fn errorCheck(&self) -> android_status_t {
        android_Parcel_errorCheck(self)
    }
    #[inline]
    pub unsafe fn setError(&mut self, err: android_status_t) {
        android_Parcel_setError(self, err)
    }
    #[inline]
    pub unsafe fn write(
        &mut self,
        data: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> android_status_t {
        android_Parcel_write(self, data, len)
    }
    #[inline]
    pub unsafe fn writeInplace(&mut self, len: size_t) -> *mut ::std::os::raw::c_void {
        android_Parcel_writeInplace(self, len)
    }
    #[inline]
    pub unsafe fn writeUnpadded(
        &mut self,
        data: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> android_status_t {
        android_Parcel_writeUnpadded(self, data, len)
    }
    #[inline]
    pub unsafe fn writeInt32(&mut self, val: i32) -> android_status_t {
        android_Parcel_writeInt32(self, val)
    }
    #[inline]
    pub unsafe fn writeUint32(&mut self, val: u32) -> android_status_t {
        android_Parcel_writeUint32(self, val)
    }
    #[inline]
    pub unsafe fn writeInt64(&mut self, val: i64) -> android_status_t {
        android_Parcel_writeInt64(self, val)
    }
    #[inline]
    pub unsafe fn writeUint64(&mut self, val: u64) -> android_status_t {
        android_Parcel_writeUint64(self, val)
    }
    #[inline]
    pub unsafe fn writeFloat(&mut self, val: f32) -> android_status_t {
        android_Parcel_writeFloat(self, val)
    }
    #[inline]
    pub unsafe fn writeDouble(&mut self, val: f64) -> android_status_t {
        android_Parcel_writeDouble(self, val)
    }
    #[inline]
    pub unsafe fn writeCString(&mut self, str: *const ::std::os::raw::c_char) -> android_status_t {
        android_Parcel_writeCString(self, str)
    }
    #[inline]
    pub unsafe fn writeString8(&mut self, str: *const android_String8) -> android_status_t {
        android_Parcel_writeString8(self, str)
    }
    #[inline]
    pub unsafe fn writeString16(&mut self, str: *const android_String16) -> android_status_t {
        android_Parcel_writeString16(self, str)
    }
    #[inline]
    pub unsafe fn writeString161(&mut self, str: *const u8) -> android_status_t {
        android_Parcel_writeString161(self, str)
    }
    #[inline]
    pub unsafe fn writeString162(&mut self, str: *const u8) -> android_status_t {
        android_Parcel_writeString162(self, str)
    }
    #[inline]
    pub unsafe fn writeString163(&mut self, str: *const u16, len: size_t) -> android_status_t {
        android_Parcel_writeString163(self, str, len)
    }
    #[inline]
    pub unsafe fn writeStrongBinder(
        &mut self,
        val: *const android_sp<android_IBinder>,
    ) -> android_status_t {
        android_Parcel_writeStrongBinder(self, val)
    }
    #[inline]
    pub unsafe fn writeInt32Array(&mut self, len: size_t, val: *const i32) -> android_status_t {
        android_Parcel_writeInt32Array(self, len, val)
    }
    #[inline]
    pub unsafe fn writeByteArray(&mut self, len: size_t, val: *const u8) -> android_status_t {
        android_Parcel_writeByteArray(self, len, val)
    }
    #[inline]
    pub unsafe fn writeBool(&mut self, val: bool) -> android_status_t {
        android_Parcel_writeBool(self, val)
    }
    #[inline]
    pub unsafe fn writeChar(&mut self, val: u16) -> android_status_t {
        android_Parcel_writeChar(self, val)
    }
    #[inline]
    pub unsafe fn writeByte(&mut self, val: i8) -> android_status_t {
        android_Parcel_writeByte(self, val)
    }
    #[inline]
    pub unsafe fn writeUtf8AsUtf16(&mut self, str: *const std_string) -> android_status_t {
        android_Parcel_writeUtf8AsUtf16(self, str)
    }
    #[inline]
    pub unsafe fn writeUtf8AsUtf161(&mut self, str: *const u8) -> android_status_t {
        android_Parcel_writeUtf8AsUtf161(self, str)
    }
    #[inline]
    pub unsafe fn writeUtf8AsUtf162(&mut self, str: *const u8) -> android_status_t {
        android_Parcel_writeUtf8AsUtf162(self, str)
    }
    #[inline]
    pub unsafe fn writeByteVector(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeByteVector(self, val)
    }
    #[inline]
    pub unsafe fn writeByteVector1(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeByteVector1(self, val)
    }
    #[inline]
    pub unsafe fn writeByteVector2(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeByteVector2(self, val)
    }
    #[inline]
    pub unsafe fn writeByteVector3(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeByteVector3(self, val)
    }
    #[inline]
    pub unsafe fn writeByteVector4(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeByteVector4(self, val)
    }
    #[inline]
    pub unsafe fn writeByteVector5(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeByteVector5(self, val)
    }
    #[inline]
    pub unsafe fn writeInt32Vector(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeInt32Vector(self, val)
    }
    #[inline]
    pub unsafe fn writeInt32Vector1(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeInt32Vector1(self, val)
    }
    #[inline]
    pub unsafe fn writeInt32Vector2(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeInt32Vector2(self, val)
    }
    #[inline]
    pub unsafe fn writeInt64Vector(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeInt64Vector(self, val)
    }
    #[inline]
    pub unsafe fn writeInt64Vector1(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeInt64Vector1(self, val)
    }
    #[inline]
    pub unsafe fn writeInt64Vector2(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeInt64Vector2(self, val)
    }
    #[inline]
    pub unsafe fn writeUint64Vector(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeUint64Vector(self, val)
    }
    #[inline]
    pub unsafe fn writeUint64Vector1(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeUint64Vector1(self, val)
    }
    #[inline]
    pub unsafe fn writeUint64Vector2(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeUint64Vector2(self, val)
    }
    #[inline]
    pub unsafe fn writeFloatVector(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeFloatVector(self, val)
    }
    #[inline]
    pub unsafe fn writeFloatVector1(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeFloatVector1(self, val)
    }
    #[inline]
    pub unsafe fn writeFloatVector2(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeFloatVector2(self, val)
    }
    #[inline]
    pub unsafe fn writeDoubleVector(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeDoubleVector(self, val)
    }
    #[inline]
    pub unsafe fn writeDoubleVector1(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeDoubleVector1(self, val)
    }
    #[inline]
    pub unsafe fn writeDoubleVector2(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeDoubleVector2(self, val)
    }
    #[inline]
    pub unsafe fn writeBoolVector(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeBoolVector(self, val)
    }
    #[inline]
    pub unsafe fn writeBoolVector1(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeBoolVector1(self, val)
    }
    #[inline]
    pub unsafe fn writeBoolVector2(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeBoolVector2(self, val)
    }
    #[inline]
    pub unsafe fn writeCharVector(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeCharVector(self, val)
    }
    #[inline]
    pub unsafe fn writeCharVector1(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeCharVector1(self, val)
    }
    #[inline]
    pub unsafe fn writeCharVector2(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeCharVector2(self, val)
    }
    #[inline]
    pub unsafe fn writeString16Vector(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeString16Vector(self, val)
    }
    #[inline]
    pub unsafe fn writeString16Vector1(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeString16Vector1(self, val)
    }
    #[inline]
    pub unsafe fn writeString16Vector2(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeString16Vector2(self, val)
    }
    #[inline]
    pub unsafe fn writeUtf8VectorAsUtf16Vector(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeUtf8VectorAsUtf16Vector(self, val)
    }
    #[inline]
    pub unsafe fn writeUtf8VectorAsUtf16Vector1(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeUtf8VectorAsUtf16Vector1(self, val)
    }
    #[inline]
    pub unsafe fn writeUtf8VectorAsUtf16Vector2(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeUtf8VectorAsUtf16Vector2(self, val)
    }
    #[inline]
    pub unsafe fn writeStrongBinderVector(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeStrongBinderVector(self, val)
    }
    #[inline]
    pub unsafe fn writeStrongBinderVector1(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeStrongBinderVector1(self, val)
    }
    #[inline]
    pub unsafe fn writeStrongBinderVector2(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeStrongBinderVector2(self, val)
    }
    #[inline]
    pub unsafe fn writeParcelable(
        &mut self,
        parcelable: *const android_Parcelable,
    ) -> android_status_t {
        android_Parcel_writeParcelable(self, parcelable)
    }
    #[inline]
    pub unsafe fn writeNativeHandle(&mut self, handle: *const native_handle) -> android_status_t {
        android_Parcel_writeNativeHandle(self, handle)
    }
    #[inline]
    pub unsafe fn writeFileDescriptor(
        &mut self,
        fd: ::std::os::raw::c_int,
        takeOwnership: bool,
    ) -> android_status_t {
        android_Parcel_writeFileDescriptor(self, fd, takeOwnership)
    }
    #[inline]
    pub unsafe fn writeDupFileDescriptor(&mut self, fd: ::std::os::raw::c_int) -> android_status_t {
        android_Parcel_writeDupFileDescriptor(self, fd)
    }
    #[inline]
    pub unsafe fn writeParcelFileDescriptor(
        &mut self,
        fd: ::std::os::raw::c_int,
        takeOwnership: bool,
    ) -> android_status_t {
        android_Parcel_writeParcelFileDescriptor(self, fd, takeOwnership)
    }
    #[inline]
    pub unsafe fn writeDupParcelFileDescriptor(
        &mut self,
        fd: ::std::os::raw::c_int,
    ) -> android_status_t {
        android_Parcel_writeDupParcelFileDescriptor(self, fd)
    }
    #[inline]
    pub unsafe fn writeUniqueFileDescriptor(
        &mut self,
        fd: *const android_base_unique_fd,
    ) -> android_status_t {
        android_Parcel_writeUniqueFileDescriptor(self, fd)
    }
    #[inline]
    pub unsafe fn writeUniqueFileDescriptorVector(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeUniqueFileDescriptorVector(self, val)
    }
    #[inline]
    pub unsafe fn writeUniqueFileDescriptorVector1(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeUniqueFileDescriptorVector1(self, val)
    }
    #[inline]
    pub unsafe fn writeUniqueFileDescriptorVector2(&mut self, val: *const u8) -> android_status_t {
        android_Parcel_writeUniqueFileDescriptorVector2(self, val)
    }
    #[inline]
    pub unsafe fn writeBlob(
        &mut self,
        len: size_t,
        mutableCopy: bool,
        outBlob: *mut android_Parcel_WritableBlob,
    ) -> android_status_t {
        android_Parcel_writeBlob(self, len, mutableCopy, outBlob)
    }
    #[inline]
    pub unsafe fn writeDupImmutableBlobFileDescriptor(
        &mut self,
        fd: ::std::os::raw::c_int,
    ) -> android_status_t {
        android_Parcel_writeDupImmutableBlobFileDescriptor(self, fd)
    }
    #[inline]
    pub unsafe fn writeObject(
        &mut self,
        val: *const android_flat_binder_object,
        nullMetaData: bool,
    ) -> android_status_t {
        android_Parcel_writeObject(self, val, nullMetaData)
    }
    #[inline]
    pub unsafe fn writeNoException(&mut self) -> android_status_t {
        android_Parcel_writeNoException(self)
    }
    #[inline]
    pub unsafe fn read(
        &self,
        outData: *mut ::std::os::raw::c_void,
        len: size_t,
    ) -> android_status_t {
        android_Parcel_read(self, outData, len)
    }
    #[inline]
    pub unsafe fn readInplace(&self, len: size_t) -> *const ::std::os::raw::c_void {
        android_Parcel_readInplace(self, len)
    }
    #[inline]
    pub unsafe fn readInt32(&self) -> i32 {
        android_Parcel_readInt32(self)
    }
    #[inline]
    pub unsafe fn readInt321(&self, pArg: *mut i32) -> android_status_t {
        android_Parcel_readInt321(self, pArg)
    }
    #[inline]
    pub unsafe fn readUint32(&self) -> u32 {
        android_Parcel_readUint32(self)
    }
    #[inline]
    pub unsafe fn readUint321(&self, pArg: *mut u32) -> android_status_t {
        android_Parcel_readUint321(self, pArg)
    }
    #[inline]
    pub unsafe fn readInt64(&self) -> i64 {
        android_Parcel_readInt64(self)
    }
    #[inline]
    pub unsafe fn readInt641(&self, pArg: *mut i64) -> android_status_t {
        android_Parcel_readInt641(self, pArg)
    }
    #[inline]
    pub unsafe fn readUint64(&self) -> u64 {
        android_Parcel_readUint64(self)
    }
    #[inline]
    pub unsafe fn readUint641(&self, pArg: *mut u64) -> android_status_t {
        android_Parcel_readUint641(self, pArg)
    }
    #[inline]
    pub unsafe fn readFloat(&self) -> f32 {
        android_Parcel_readFloat(self)
    }
    #[inline]
    pub unsafe fn readFloat1(&self, pArg: *mut f32) -> android_status_t {
        android_Parcel_readFloat1(self, pArg)
    }
    #[inline]
    pub unsafe fn readDouble(&self) -> f64 {
        android_Parcel_readDouble(self)
    }
    #[inline]
    pub unsafe fn readDouble1(&self, pArg: *mut f64) -> android_status_t {
        android_Parcel_readDouble1(self, pArg)
    }
    #[inline]
    pub unsafe fn readIntPtr(&self) -> isize {
        android_Parcel_readIntPtr(self)
    }
    #[inline]
    pub unsafe fn readIntPtr1(&self, pArg: *mut isize) -> android_status_t {
        android_Parcel_readIntPtr1(self, pArg)
    }
    #[inline]
    pub unsafe fn readBool(&self) -> bool {
        android_Parcel_readBool(self)
    }
    #[inline]
    pub unsafe fn readBool1(&self, pArg: *mut bool) -> android_status_t {
        android_Parcel_readBool1(self, pArg)
    }
    #[inline]
    pub unsafe fn readChar(&self) -> u16 {
        android_Parcel_readChar(self)
    }
    #[inline]
    pub unsafe fn readChar1(&self, pArg: *mut u16) -> android_status_t {
        android_Parcel_readChar1(self, pArg)
    }
    #[inline]
    pub unsafe fn readByte(&self) -> i8 {
        android_Parcel_readByte(self)
    }
    #[inline]
    pub unsafe fn readByte1(&self, pArg: *mut i8) -> android_status_t {
        android_Parcel_readByte1(self, pArg)
    }
    #[inline]
    pub unsafe fn readUtf8FromUtf16(&self, str: *mut std_string) -> android_status_t {
        android_Parcel_readUtf8FromUtf16(self, str)
    }
    #[inline]
    pub unsafe fn readUtf8FromUtf161(&self, str: *mut u8) -> android_status_t {
        android_Parcel_readUtf8FromUtf161(self, str)
    }
    #[inline]
    pub unsafe fn readUtf8FromUtf162(&self, str: *mut u8) -> android_status_t {
        android_Parcel_readUtf8FromUtf162(self, str)
    }
    #[inline]
    pub unsafe fn readCString(&self) -> *const ::std::os::raw::c_char {
        android_Parcel_readCString(self)
    }
    #[inline]
    pub unsafe fn readString8(&self) -> android_String8 {
        android_Parcel_readString8(self)
    }
    #[inline]
    pub unsafe fn readString81(&self, pArg: *mut android_String8) -> android_status_t {
        android_Parcel_readString81(self, pArg)
    }
    #[inline]
    pub unsafe fn readString16(&self) -> android_String16 {
        android_Parcel_readString16(self)
    }
    #[inline]
    pub unsafe fn readString161(&self, pArg: *mut android_String16) -> android_status_t {
        android_Parcel_readString161(self, pArg)
    }
    #[inline]
    pub unsafe fn readString162(&self, pArg: *mut u8) -> android_status_t {
        android_Parcel_readString162(self, pArg)
    }
    #[inline]
    pub unsafe fn readString163(&self, pArg: *mut u8) -> android_status_t {
        android_Parcel_readString163(self, pArg)
    }
    #[inline]
    pub unsafe fn readString16Inplace(&self, outLen: *mut size_t) -> *const u16 {
        android_Parcel_readString16Inplace(self, outLen)
    }
    #[inline]
    pub unsafe fn readStrongBinder(&self) -> android_sp<android_IBinder> {
        android_Parcel_readStrongBinder(self)
    }
    #[inline]
    pub unsafe fn readStrongBinder1(
        &self,
        val: *mut android_sp<android_IBinder>,
    ) -> android_status_t {
        android_Parcel_readStrongBinder1(self, val)
    }
    #[inline]
    pub unsafe fn readNullableStrongBinder(
        &self,
        val: *mut android_sp<android_IBinder>,
    ) -> android_status_t {
        android_Parcel_readNullableStrongBinder(self, val)
    }
    #[inline]
    pub unsafe fn readParcelable(&self, parcelable: *mut android_Parcelable) -> android_status_t {
        android_Parcel_readParcelable(self, parcelable)
    }
    #[inline]
    pub unsafe fn readStrongBinderVector(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readStrongBinderVector(self, val)
    }
    #[inline]
    pub unsafe fn readStrongBinderVector1(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readStrongBinderVector1(self, val)
    }
    #[inline]
    pub unsafe fn readStrongBinderVector2(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readStrongBinderVector2(self, val)
    }
    #[inline]
    pub unsafe fn readByteVector(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readByteVector(self, val)
    }
    #[inline]
    pub unsafe fn readByteVector1(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readByteVector1(self, val)
    }
    #[inline]
    pub unsafe fn readByteVector2(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readByteVector2(self, val)
    }
    #[inline]
    pub unsafe fn readByteVector3(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readByteVector3(self, val)
    }
    #[inline]
    pub unsafe fn readByteVector4(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readByteVector4(self, val)
    }
    #[inline]
    pub unsafe fn readByteVector5(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readByteVector5(self, val)
    }
    #[inline]
    pub unsafe fn readInt32Vector(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readInt32Vector(self, val)
    }
    #[inline]
    pub unsafe fn readInt32Vector1(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readInt32Vector1(self, val)
    }
    #[inline]
    pub unsafe fn readInt32Vector2(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readInt32Vector2(self, val)
    }
    #[inline]
    pub unsafe fn readInt64Vector(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readInt64Vector(self, val)
    }
    #[inline]
    pub unsafe fn readInt64Vector1(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readInt64Vector1(self, val)
    }
    #[inline]
    pub unsafe fn readInt64Vector2(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readInt64Vector2(self, val)
    }
    #[inline]
    pub unsafe fn readUint64Vector(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readUint64Vector(self, val)
    }
    #[inline]
    pub unsafe fn readUint64Vector1(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readUint64Vector1(self, val)
    }
    #[inline]
    pub unsafe fn readUint64Vector2(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readUint64Vector2(self, val)
    }
    #[inline]
    pub unsafe fn readFloatVector(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readFloatVector(self, val)
    }
    #[inline]
    pub unsafe fn readFloatVector1(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readFloatVector1(self, val)
    }
    #[inline]
    pub unsafe fn readFloatVector2(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readFloatVector2(self, val)
    }
    #[inline]
    pub unsafe fn readDoubleVector(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readDoubleVector(self, val)
    }
    #[inline]
    pub unsafe fn readDoubleVector1(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readDoubleVector1(self, val)
    }
    #[inline]
    pub unsafe fn readDoubleVector2(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readDoubleVector2(self, val)
    }
    #[inline]
    pub unsafe fn readBoolVector(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readBoolVector(self, val)
    }
    #[inline]
    pub unsafe fn readBoolVector1(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readBoolVector1(self, val)
    }
    #[inline]
    pub unsafe fn readBoolVector2(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readBoolVector2(self, val)
    }
    #[inline]
    pub unsafe fn readCharVector(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readCharVector(self, val)
    }
    #[inline]
    pub unsafe fn readCharVector1(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readCharVector1(self, val)
    }
    #[inline]
    pub unsafe fn readCharVector2(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readCharVector2(self, val)
    }
    #[inline]
    pub unsafe fn readString16Vector(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readString16Vector(self, val)
    }
    #[inline]
    pub unsafe fn readString16Vector1(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readString16Vector1(self, val)
    }
    #[inline]
    pub unsafe fn readString16Vector2(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readString16Vector2(self, val)
    }
    #[inline]
    pub unsafe fn readUtf8VectorFromUtf16Vector(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readUtf8VectorFromUtf16Vector(self, val)
    }
    #[inline]
    pub unsafe fn readUtf8VectorFromUtf16Vector1(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readUtf8VectorFromUtf16Vector1(self, val)
    }
    #[inline]
    pub unsafe fn readUtf8VectorFromUtf16Vector2(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readUtf8VectorFromUtf16Vector2(self, val)
    }
    #[inline]
    pub unsafe fn readExceptionCode(&self) -> i32 {
        android_Parcel_readExceptionCode(self)
    }
    #[inline]
    pub unsafe fn readNativeHandle(&self) -> *mut native_handle {
        android_Parcel_readNativeHandle(self)
    }
    #[inline]
    pub unsafe fn readFileDescriptor(&self) -> ::std::os::raw::c_int {
        android_Parcel_readFileDescriptor(self)
    }
    #[inline]
    pub unsafe fn readParcelFileDescriptor(&self) -> ::std::os::raw::c_int {
        android_Parcel_readParcelFileDescriptor(self)
    }
    #[inline]
    pub unsafe fn readUniqueFileDescriptor(
        &self,
        val: *mut android_base_unique_fd,
    ) -> android_status_t {
        android_Parcel_readUniqueFileDescriptor(self, val)
    }
    #[inline]
    pub unsafe fn readUniqueParcelFileDescriptor(
        &self,
        val: *mut android_base_unique_fd,
    ) -> android_status_t {
        android_Parcel_readUniqueParcelFileDescriptor(self, val)
    }
    #[inline]
    pub unsafe fn readUniqueFileDescriptorVector(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readUniqueFileDescriptorVector(self, val)
    }
    #[inline]
    pub unsafe fn readUniqueFileDescriptorVector1(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readUniqueFileDescriptorVector1(self, val)
    }
    #[inline]
    pub unsafe fn readUniqueFileDescriptorVector2(&self, val: *mut u8) -> android_status_t {
        android_Parcel_readUniqueFileDescriptorVector2(self, val)
    }
    #[inline]
    pub unsafe fn readBlob(
        &self,
        len: size_t,
        outBlob: *mut android_Parcel_ReadableBlob,
    ) -> android_status_t {
        android_Parcel_readBlob(self, len, outBlob)
    }
    #[inline]
    pub unsafe fn readObject(&self, nullMetaData: bool) -> *const android_flat_binder_object {
        android_Parcel_readObject(self, nullMetaData)
    }
    #[inline]
    pub unsafe fn closeFileDescriptors(&mut self) {
        android_Parcel_closeFileDescriptors(self)
    }
    #[inline]
    pub unsafe fn getGlobalAllocSize() -> size_t {
        android_Parcel_getGlobalAllocSize()
    }
    #[inline]
    pub unsafe fn getGlobalAllocCount() -> size_t {
        android_Parcel_getGlobalAllocCount()
    }
    #[inline]
    pub unsafe fn replaceCallingWorkSourceUid(&mut self, uid: uid_t) -> bool {
        android_Parcel_replaceCallingWorkSourceUid(self, uid)
    }
    #[inline]
    pub unsafe fn readCallingWorkSourceUid(&self) -> uid_t {
        android_Parcel_readCallingWorkSourceUid(self)
    }
    #[inline]
    pub unsafe fn print(&self, to: *mut android_TextOutput, flags: u32) {
        android_Parcel_print(self, to, flags)
    }
    #[inline]
    pub unsafe fn getBlobAshmemSize(&self) -> size_t {
        android_Parcel_getBlobAshmemSize(self)
    }
    #[inline]
    pub unsafe fn getOpenAshmemSize(&self) -> size_t {
        android_Parcel_getOpenAshmemSize(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_Parcel_Parcel(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        android_Parcel_Parcel_destructor(self)
    }
}
#[repr(C)]
#[repr(align(8))]
pub struct android_ProcessState {
    pub _bindgen_opaque_blob: [u64; 35usize],
}
pub type android_ProcessState_context_check_func = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const android_String16,
        caller: *const android_sp<android_IBinder>,
        userData: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
pub const android_ProcessState_CallRestriction_NONE: android_ProcessState_CallRestriction = 0;
pub const android_ProcessState_CallRestriction_ERROR_IF_NOT_ONEWAY:
    android_ProcessState_CallRestriction = 1;
pub const android_ProcessState_CallRestriction_FATAL_IF_NOT_ONEWAY:
    android_ProcessState_CallRestriction = 2;
pub type android_ProcessState_CallRestriction = i32;
#[test]
fn bindgen_test_layout_android_ProcessState() {
    assert_eq!(
        ::std::mem::size_of::<android_ProcessState>(),
        280usize,
        concat!("Size of: ", stringify!(android_ProcessState))
    );
    assert_eq!(
        ::std::mem::align_of::<android_ProcessState>(),
        8usize,
        concat!("Alignment of ", stringify!(android_ProcessState))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android12ProcessState4selfEv"]
    pub fn android_ProcessState_self() -> android_sp<android_ProcessState>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android12ProcessState10selfOrNullEv"]
    pub fn android_ProcessState_selfOrNull() -> android_sp<android_ProcessState>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android12ProcessState14initWithDriverEPKc"]
    pub fn android_ProcessState_initWithDriver(
        driver: *const ::std::os::raw::c_char,
    ) -> android_sp<android_ProcessState>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android12ProcessState16getContextObjectERKNS_2spINS_7IBinderEEE"]
    pub fn android_ProcessState_getContextObject(
        this: *mut android_ProcessState,
        caller: *const android_sp<android_IBinder>,
    ) -> android_sp<android_IBinder>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android12ProcessState15startThreadPoolEv"]
    pub fn android_ProcessState_startThreadPool(this: *mut android_ProcessState);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android12ProcessState20becomeContextManagerEPFbRKNS_8String16ERKNS_2spINS_7IBinderEEEPvES9_"]
    pub fn android_ProcessState_becomeContextManager(
        this: *mut android_ProcessState,
        checkFunc: android_ProcessState_context_check_func,
        userData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android12ProcessState23getStrongProxyForHandleEi"]
    pub fn android_ProcessState_getStrongProxyForHandle(
        this: *mut android_ProcessState,
        handle: i32,
    ) -> android_sp<android_IBinder>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android12ProcessState13expungeHandleEiPNS_7IBinderE"]
    pub fn android_ProcessState_expungeHandle(
        this: *mut android_ProcessState,
        handle: i32,
        binder: *mut android_IBinder,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android12ProcessState17spawnPooledThreadEb"]
    pub fn android_ProcessState_spawnPooledThread(this: *mut android_ProcessState, isMain: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android12ProcessState27setThreadPoolMaxThreadCountEm"]
    pub fn android_ProcessState_setThreadPoolMaxThreadCount(
        this: *mut android_ProcessState,
        maxThreads: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android12ProcessState18giveThreadPoolNameEv"]
    pub fn android_ProcessState_giveThreadPoolName(this: *mut android_ProcessState);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android12ProcessState13getDriverNameEv"]
    pub fn android_ProcessState_getDriverName(this: *mut android_ProcessState) -> android_String8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android12ProcessState19getKernelReferencesEmPm"]
    pub fn android_ProcessState_getKernelReferences(
        this: *mut android_ProcessState,
        count: size_t,
        buf: *mut usize,
    ) -> ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android12ProcessState32getStrongRefCountForNodeByHandleEi"]
    pub fn android_ProcessState_getStrongRefCountForNodeByHandle(
        this: *mut android_ProcessState,
        handle: i32,
    ) -> ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android12ProcessState18setCallRestrictionENS0_15CallRestrictionE"]
    pub fn android_ProcessState_setCallRestriction(
        this: *mut android_ProcessState,
        restriction: android_ProcessState_CallRestriction,
    );
}
impl android_ProcessState {
    #[inline]
    pub unsafe fn self_() -> android_sp<android_ProcessState> {
        android_ProcessState_self()
    }
    #[inline]
    pub unsafe fn selfOrNull() -> android_sp<android_ProcessState> {
        android_ProcessState_selfOrNull()
    }
    #[inline]
    pub unsafe fn initWithDriver(
        driver: *const ::std::os::raw::c_char,
    ) -> android_sp<android_ProcessState> {
        android_ProcessState_initWithDriver(driver)
    }
    #[inline]
    pub unsafe fn getContextObject(
        &mut self,
        caller: *const android_sp<android_IBinder>,
    ) -> android_sp<android_IBinder> {
        android_ProcessState_getContextObject(self, caller)
    }
    #[inline]
    pub unsafe fn startThreadPool(&mut self) {
        android_ProcessState_startThreadPool(self)
    }
    #[inline]
    pub unsafe fn becomeContextManager(
        &mut self,
        checkFunc: android_ProcessState_context_check_func,
        userData: *mut ::std::os::raw::c_void,
    ) -> bool {
        android_ProcessState_becomeContextManager(self, checkFunc, userData)
    }
    #[inline]
    pub unsafe fn getStrongProxyForHandle(&mut self, handle: i32) -> android_sp<android_IBinder> {
        android_ProcessState_getStrongProxyForHandle(self, handle)
    }
    #[inline]
    pub unsafe fn expungeHandle(&mut self, handle: i32, binder: *mut android_IBinder) {
        android_ProcessState_expungeHandle(self, handle, binder)
    }
    #[inline]
    pub unsafe fn spawnPooledThread(&mut self, isMain: bool) {
        android_ProcessState_spawnPooledThread(self, isMain)
    }
    #[inline]
    pub unsafe fn setThreadPoolMaxThreadCount(&mut self, maxThreads: size_t) -> android_status_t {
        android_ProcessState_setThreadPoolMaxThreadCount(self, maxThreads)
    }
    #[inline]
    pub unsafe fn giveThreadPoolName(&mut self) {
        android_ProcessState_giveThreadPoolName(self)
    }
    #[inline]
    pub unsafe fn getDriverName(&mut self) -> android_String8 {
        android_ProcessState_getDriverName(self)
    }
    #[inline]
    pub unsafe fn getKernelReferences(&mut self, count: size_t, buf: *mut usize) -> ssize_t {
        android_ProcessState_getKernelReferences(self, count, buf)
    }
    #[inline]
    pub unsafe fn getStrongRefCountForNodeByHandle(&mut self, handle: i32) -> ssize_t {
        android_ProcessState_getStrongRefCountForNodeByHandle(self, handle)
    }
    #[inline]
    pub unsafe fn setCallRestriction(&mut self, restriction: android_ProcessState_CallRestriction) {
        android_ProcessState_setCallRestriction(self, restriction)
    }
}
#[repr(C)]
#[repr(align(8))]
pub struct android_IPCThreadState {
    pub _bindgen_opaque_blob: [u64; 58usize],
}
#[test]
fn bindgen_test_layout_android_IPCThreadState() {
    assert_eq!(
        ::std::mem::size_of::<android_IPCThreadState>(),
        464usize,
        concat!("Size of: ", stringify!(android_IPCThreadState))
    );
    assert_eq!(
        ::std::mem::align_of::<android_IPCThreadState>(),
        8usize,
        concat!("Alignment of ", stringify!(android_IPCThreadState))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState4selfEv"]
    pub fn android_IPCThreadState_self() -> *mut android_IPCThreadState;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState10selfOrNullEv"]
    pub fn android_IPCThreadState_selfOrNull() -> *mut android_IPCThreadState;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState7processEv"]
    pub fn android_IPCThreadState_process(
        this: *mut android_IPCThreadState,
    ) -> android_sp<android_ProcessState>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState14clearLastErrorEv"]
    pub fn android_IPCThreadState_clearLastError(
        this: *mut android_IPCThreadState,
    ) -> android_status_t;
}
extern "C" {
    #[doc = " Returns the PID of the process which has made the current binder"]
    #[doc = " call. If not in a binder call, this will return getpid. If the"]
    #[doc = " call is oneway, this will return 0."]
    #[link_name = "\u{1}_ZNK7android14IPCThreadState13getCallingPidEv"]
    pub fn android_IPCThreadState_getCallingPid(this: *const android_IPCThreadState) -> pid_t;
}
extern "C" {
    #[doc = " Returns the SELinux security identifier of the process which has"]
    #[doc = " made the current binder call. If not in a binder call this will"]
    #[doc = " return nullptr. If this isn't requested with"]
    #[doc = " IBinder::setRequestingSid, it will also return nullptr."]
    #[doc = ""]
    #[doc = " This can't be restored once it's cleared, and it does not return the"]
    #[doc = " context of the current process when not in a binder call."]
    #[link_name = "\u{1}_ZNK7android14IPCThreadState13getCallingSidEv"]
    pub fn android_IPCThreadState_getCallingSid(
        this: *const android_IPCThreadState,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Returns the UID of the process which has made the current binder"]
    #[doc = " call. If not in a binder call, this will return 0."]
    #[link_name = "\u{1}_ZNK7android14IPCThreadState13getCallingUidEv"]
    pub fn android_IPCThreadState_getCallingUid(this: *const android_IPCThreadState) -> uid_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState19setStrictModePolicyEi"]
    pub fn android_IPCThreadState_setStrictModePolicy(
        this: *mut android_IPCThreadState,
        policy: i32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android14IPCThreadState19getStrictModePolicyEv"]
    pub fn android_IPCThreadState_getStrictModePolicy(this: *const android_IPCThreadState) -> i32;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState23setCallingWorkSourceUidEj"]
    pub fn android_IPCThreadState_setCallingWorkSourceUid(
        this: *mut android_IPCThreadState,
        uid: uid_t,
    ) -> i64;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState41setCallingWorkSourceUidWithoutPropagationEj"]
    pub fn android_IPCThreadState_setCallingWorkSourceUidWithoutPropagation(
        this: *mut android_IPCThreadState,
        uid: uid_t,
    ) -> i64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android14IPCThreadState23getCallingWorkSourceUidEv"]
    pub fn android_IPCThreadState_getCallingWorkSourceUid(
        this: *const android_IPCThreadState,
    ) -> uid_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState22clearCallingWorkSourceEv"]
    pub fn android_IPCThreadState_clearCallingWorkSource(this: *mut android_IPCThreadState) -> i64;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState24restoreCallingWorkSourceEl"]
    pub fn android_IPCThreadState_restoreCallingWorkSource(
        this: *mut android_IPCThreadState,
        token: i64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState24clearPropagateWorkSourceEv"]
    pub fn android_IPCThreadState_clearPropagateWorkSource(this: *mut android_IPCThreadState);
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android14IPCThreadState25shouldPropagateWorkSourceEv"]
    pub fn android_IPCThreadState_shouldPropagateWorkSource(
        this: *const android_IPCThreadState,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState29setLastTransactionBinderFlagsEi"]
    pub fn android_IPCThreadState_setLastTransactionBinderFlags(
        this: *mut android_IPCThreadState,
        flags: i32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android14IPCThreadState29getLastTransactionBinderFlagsEv"]
    pub fn android_IPCThreadState_getLastTransactionBinderFlags(
        this: *const android_IPCThreadState,
    ) -> i32;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState20clearCallingIdentityEv"]
    pub fn android_IPCThreadState_clearCallingIdentity(this: *mut android_IPCThreadState) -> i64;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState22restoreCallingIdentityEl"]
    pub fn android_IPCThreadState_restoreCallingIdentity(
        this: *mut android_IPCThreadState,
        token: i64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState12setupPollingEPi"]
    pub fn android_IPCThreadState_setupPolling(
        this: *mut android_IPCThreadState,
        fd: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState20handlePolledCommandsEv"]
    pub fn android_IPCThreadState_handlePolledCommands(
        this: *mut android_IPCThreadState,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState13flushCommandsEv"]
    pub fn android_IPCThreadState_flushCommands(this: *mut android_IPCThreadState);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState14joinThreadPoolEb"]
    pub fn android_IPCThreadState_joinThreadPool(this: *mut android_IPCThreadState, isMain: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState11stopProcessEb"]
    pub fn android_IPCThreadState_stopProcess(this: *mut android_IPCThreadState, immediate: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState8transactEijRKNS_6ParcelEPS1_j"]
    pub fn android_IPCThreadState_transact(
        this: *mut android_IPCThreadState,
        handle: i32,
        code: u32,
        data: *const android_Parcel,
        reply: *mut android_Parcel,
        flags: u32,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState15incStrongHandleEiPNS_8BpBinderE"]
    pub fn android_IPCThreadState_incStrongHandle(
        this: *mut android_IPCThreadState,
        handle: i32,
        proxy: *mut android_BpBinder,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState15decStrongHandleEi"]
    pub fn android_IPCThreadState_decStrongHandle(this: *mut android_IPCThreadState, handle: i32);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState13incWeakHandleEiPNS_8BpBinderE"]
    pub fn android_IPCThreadState_incWeakHandle(
        this: *mut android_IPCThreadState,
        handle: i32,
        proxy: *mut android_BpBinder,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState13decWeakHandleEi"]
    pub fn android_IPCThreadState_decWeakHandle(this: *mut android_IPCThreadState, handle: i32);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState22attemptIncStrongHandleEi"]
    pub fn android_IPCThreadState_attemptIncStrongHandle(
        this: *mut android_IPCThreadState,
        handle: i32,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState13expungeHandleEiPNS_7IBinderE"]
    pub fn android_IPCThreadState_expungeHandle(handle: i32, binder: *mut android_IBinder);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState24requestDeathNotificationEiPNS_8BpBinderE"]
    pub fn android_IPCThreadState_requestDeathNotification(
        this: *mut android_IPCThreadState,
        handle: i32,
        proxy: *mut android_BpBinder,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState22clearDeathNotificationEiPNS_8BpBinderE"]
    pub fn android_IPCThreadState_clearDeathNotification(
        this: *mut android_IPCThreadState,
        handle: i32,
        proxy: *mut android_BpBinder,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState8shutdownEv"]
    pub fn android_IPCThreadState_shutdown();
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState27disableBackgroundSchedulingEb"]
    pub fn android_IPCThreadState_disableBackgroundScheduling(disable: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState28backgroundSchedulingDisabledEv"]
    pub fn android_IPCThreadState_backgroundSchedulingDisabled(
        this: *mut android_IPCThreadState,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState25blockUntilThreadAvailableEv"]
    pub fn android_IPCThreadState_blockUntilThreadAvailable(this: *mut android_IPCThreadState);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android14IPCThreadState19setTheContextObjectENS_2spINS_7BBinderEEE"]
    pub fn android_IPCThreadState_setTheContextObject(
        this: *mut android_IPCThreadState,
        obj: android_sp<android_BBinder>,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android14IPCThreadState22getServingStackPointerEv"]
    pub fn android_IPCThreadState_getServingStackPointer(
        this: *const android_IPCThreadState,
    ) -> *const ::std::os::raw::c_void;
}
impl android_IPCThreadState {
    #[inline]
    pub unsafe fn self_() -> *mut android_IPCThreadState {
        android_IPCThreadState_self()
    }
    #[inline]
    pub unsafe fn selfOrNull() -> *mut android_IPCThreadState {
        android_IPCThreadState_selfOrNull()
    }
    #[inline]
    pub unsafe fn process(&mut self) -> android_sp<android_ProcessState> {
        android_IPCThreadState_process(self)
    }
    #[inline]
    pub unsafe fn clearLastError(&mut self) -> android_status_t {
        android_IPCThreadState_clearLastError(self)
    }
    #[inline]
    pub unsafe fn getCallingPid(&self) -> pid_t {
        android_IPCThreadState_getCallingPid(self)
    }
    #[inline]
    pub unsafe fn getCallingSid(&self) -> *const ::std::os::raw::c_char {
        android_IPCThreadState_getCallingSid(self)
    }
    #[inline]
    pub unsafe fn getCallingUid(&self) -> uid_t {
        android_IPCThreadState_getCallingUid(self)
    }
    #[inline]
    pub unsafe fn setStrictModePolicy(&mut self, policy: i32) {
        android_IPCThreadState_setStrictModePolicy(self, policy)
    }
    #[inline]
    pub unsafe fn getStrictModePolicy(&self) -> i32 {
        android_IPCThreadState_getStrictModePolicy(self)
    }
    #[inline]
    pub unsafe fn setCallingWorkSourceUid(&mut self, uid: uid_t) -> i64 {
        android_IPCThreadState_setCallingWorkSourceUid(self, uid)
    }
    #[inline]
    pub unsafe fn setCallingWorkSourceUidWithoutPropagation(&mut self, uid: uid_t) -> i64 {
        android_IPCThreadState_setCallingWorkSourceUidWithoutPropagation(self, uid)
    }
    #[inline]
    pub unsafe fn getCallingWorkSourceUid(&self) -> uid_t {
        android_IPCThreadState_getCallingWorkSourceUid(self)
    }
    #[inline]
    pub unsafe fn clearCallingWorkSource(&mut self) -> i64 {
        android_IPCThreadState_clearCallingWorkSource(self)
    }
    #[inline]
    pub unsafe fn restoreCallingWorkSource(&mut self, token: i64) {
        android_IPCThreadState_restoreCallingWorkSource(self, token)
    }
    #[inline]
    pub unsafe fn clearPropagateWorkSource(&mut self) {
        android_IPCThreadState_clearPropagateWorkSource(self)
    }
    #[inline]
    pub unsafe fn shouldPropagateWorkSource(&self) -> bool {
        android_IPCThreadState_shouldPropagateWorkSource(self)
    }
    #[inline]
    pub unsafe fn setLastTransactionBinderFlags(&mut self, flags: i32) {
        android_IPCThreadState_setLastTransactionBinderFlags(self, flags)
    }
    #[inline]
    pub unsafe fn getLastTransactionBinderFlags(&self) -> i32 {
        android_IPCThreadState_getLastTransactionBinderFlags(self)
    }
    #[inline]
    pub unsafe fn clearCallingIdentity(&mut self) -> i64 {
        android_IPCThreadState_clearCallingIdentity(self)
    }
    #[inline]
    pub unsafe fn restoreCallingIdentity(&mut self, token: i64) {
        android_IPCThreadState_restoreCallingIdentity(self, token)
    }
    #[inline]
    pub unsafe fn setupPolling(&mut self, fd: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        android_IPCThreadState_setupPolling(self, fd)
    }
    #[inline]
    pub unsafe fn handlePolledCommands(&mut self) -> android_status_t {
        android_IPCThreadState_handlePolledCommands(self)
    }
    #[inline]
    pub unsafe fn flushCommands(&mut self) {
        android_IPCThreadState_flushCommands(self)
    }
    #[inline]
    pub unsafe fn joinThreadPool(&mut self, isMain: bool) {
        android_IPCThreadState_joinThreadPool(self, isMain)
    }
    #[inline]
    pub unsafe fn stopProcess(&mut self, immediate: bool) {
        android_IPCThreadState_stopProcess(self, immediate)
    }
    #[inline]
    pub unsafe fn transact(
        &mut self,
        handle: i32,
        code: u32,
        data: *const android_Parcel,
        reply: *mut android_Parcel,
        flags: u32,
    ) -> android_status_t {
        android_IPCThreadState_transact(self, handle, code, data, reply, flags)
    }
    #[inline]
    pub unsafe fn incStrongHandle(&mut self, handle: i32, proxy: *mut android_BpBinder) {
        android_IPCThreadState_incStrongHandle(self, handle, proxy)
    }
    #[inline]
    pub unsafe fn decStrongHandle(&mut self, handle: i32) {
        android_IPCThreadState_decStrongHandle(self, handle)
    }
    #[inline]
    pub unsafe fn incWeakHandle(&mut self, handle: i32, proxy: *mut android_BpBinder) {
        android_IPCThreadState_incWeakHandle(self, handle, proxy)
    }
    #[inline]
    pub unsafe fn decWeakHandle(&mut self, handle: i32) {
        android_IPCThreadState_decWeakHandle(self, handle)
    }
    #[inline]
    pub unsafe fn attemptIncStrongHandle(&mut self, handle: i32) -> android_status_t {
        android_IPCThreadState_attemptIncStrongHandle(self, handle)
    }
    #[inline]
    pub unsafe fn expungeHandle(handle: i32, binder: *mut android_IBinder) {
        android_IPCThreadState_expungeHandle(handle, binder)
    }
    #[inline]
    pub unsafe fn requestDeathNotification(
        &mut self,
        handle: i32,
        proxy: *mut android_BpBinder,
    ) -> android_status_t {
        android_IPCThreadState_requestDeathNotification(self, handle, proxy)
    }
    #[inline]
    pub unsafe fn clearDeathNotification(
        &mut self,
        handle: i32,
        proxy: *mut android_BpBinder,
    ) -> android_status_t {
        android_IPCThreadState_clearDeathNotification(self, handle, proxy)
    }
    #[inline]
    pub unsafe fn shutdown() {
        android_IPCThreadState_shutdown()
    }
    #[inline]
    pub unsafe fn disableBackgroundScheduling(disable: bool) {
        android_IPCThreadState_disableBackgroundScheduling(disable)
    }
    #[inline]
    pub unsafe fn backgroundSchedulingDisabled(&mut self) -> bool {
        android_IPCThreadState_backgroundSchedulingDisabled(self)
    }
    #[inline]
    pub unsafe fn blockUntilThreadAvailable(&mut self) {
        android_IPCThreadState_blockUntilThreadAvailable(self)
    }
    #[inline]
    pub unsafe fn setTheContextObject(&mut self, obj: android_sp<android_BBinder>) {
        android_IPCThreadState_setTheContextObject(self, obj)
    }
    #[inline]
    pub unsafe fn getServingStackPointer(&self) -> *const ::std::os::raw::c_void {
        android_IPCThreadState_getServingStackPointer(self)
    }
}
pub const android_IPCThreadState_kUnsetWorkSource: i32 = -1;
#[doc = " Service manager for C++ services."]
#[doc = ""]
#[doc = " IInterface is only for legacy ABI compatibility"]
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub struct android_IServiceManager {
    pub _bindgen_opaque_blob: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_android_IServiceManager() {
    assert_eq!(
        ::std::mem::size_of::<android_IServiceManager>(),
        24usize,
        concat!("Size of: ", stringify!(android_IServiceManager))
    );
    assert_eq!(
        ::std::mem::align_of::<android_IServiceManager>(),
        8usize,
        concat!("Alignment of ", stringify!(android_IServiceManager))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android15IServiceManagerC2Ev"]
    pub fn android_IServiceManager_IServiceManager(this: *mut android_IServiceManager);
}
impl android_IServiceManager {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        android_IServiceManager_IServiceManager(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android15IServiceManager22getInterfaceDescriptorEv"]
    pub fn android_IServiceManager_getInterfaceDescriptor(
        this: *mut ::std::os::raw::c_void,
    ) -> *const android_String16;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android15IServiceManagerD1Ev"]
    pub fn android_IServiceManager_IServiceManager_destructor(this: *mut android_IServiceManager);
}
pub const android_IServiceManager_DUMP_FLAG_PRIORITY_CRITICAL: ::std::os::raw::c_int = 1;
pub const android_IServiceManager_DUMP_FLAG_PRIORITY_HIGH: ::std::os::raw::c_int = 2;
pub const android_IServiceManager_DUMP_FLAG_PRIORITY_NORMAL: ::std::os::raw::c_int = 4;
pub const android_IServiceManager_DUMP_FLAG_PRIORITY_DEFAULT: ::std::os::raw::c_int = 8;
pub const android_IServiceManager_DUMP_FLAG_PRIORITY_ALL: ::std::os::raw::c_int = 15;
pub const android_IServiceManager_DUMP_FLAG_PROTO: ::std::os::raw::c_int = 16;
#[repr(C)]
pub struct android_binder_Status {
    pub mException: i32,
    pub mErrorCode: i32,
    pub mMessage: android_String8,
}
pub const android_binder_Status_Exception_EX_NONE: android_binder_Status_Exception = 0;
pub const android_binder_Status_Exception_EX_SECURITY: android_binder_Status_Exception = -1;
pub const android_binder_Status_Exception_EX_BAD_PARCELABLE: android_binder_Status_Exception = -2;
pub const android_binder_Status_Exception_EX_ILLEGAL_ARGUMENT: android_binder_Status_Exception = -3;
pub const android_binder_Status_Exception_EX_NULL_POINTER: android_binder_Status_Exception = -4;
pub const android_binder_Status_Exception_EX_ILLEGAL_STATE: android_binder_Status_Exception = -5;
pub const android_binder_Status_Exception_EX_NETWORK_MAIN_THREAD: android_binder_Status_Exception =
    -6;
pub const android_binder_Status_Exception_EX_UNSUPPORTED_OPERATION:
    android_binder_Status_Exception = -7;
pub const android_binder_Status_Exception_EX_SERVICE_SPECIFIC: android_binder_Status_Exception = -8;
pub const android_binder_Status_Exception_EX_PARCELABLE: android_binder_Status_Exception = -9;
pub const android_binder_Status_Exception_EX_HAS_REPLY_HEADER: android_binder_Status_Exception =
    -128;
pub const android_binder_Status_Exception_EX_TRANSACTION_FAILED: android_binder_Status_Exception =
    -129;
pub type android_binder_Status_Exception = i32;
#[test]
fn bindgen_test_layout_android_binder_Status() {
    assert_eq!(
        ::std::mem::size_of::<android_binder_Status>(),
        16usize,
        concat!("Size of: ", stringify!(android_binder_Status))
    );
    assert_eq!(
        ::std::mem::align_of::<android_binder_Status>(),
        8usize,
        concat!("Alignment of ", stringify!(android_binder_Status))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<android_binder_Status>())).mException as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(android_binder_Status),
            "::",
            stringify!(mException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<android_binder_Status>())).mErrorCode as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(android_binder_Status),
            "::",
            stringify!(mErrorCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<android_binder_Status>())).mMessage as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(android_binder_Status),
            "::",
            stringify!(mMessage)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6binder6Status2okEv"]
    pub fn android_binder_Status_ok() -> android_binder_Status;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6binder6Status17fromExceptionCodeEi"]
    pub fn android_binder_Status_fromExceptionCode(exceptionCode: i32) -> android_binder_Status;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6binder6Status17fromExceptionCodeEiRKNS_7String8E"]
    pub fn android_binder_Status_fromExceptionCode1(
        exceptionCode: i32,
        message: *const android_String8,
    ) -> android_binder_Status;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6binder6Status17fromExceptionCodeEiPKc"]
    pub fn android_binder_Status_fromExceptionCode2(
        exceptionCode: i32,
        message: *const ::std::os::raw::c_char,
    ) -> android_binder_Status;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6binder6Status24fromServiceSpecificErrorEi"]
    pub fn android_binder_Status_fromServiceSpecificError(
        serviceSpecificErrorCode: i32,
    ) -> android_binder_Status;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6binder6Status24fromServiceSpecificErrorEiRKNS_7String8E"]
    pub fn android_binder_Status_fromServiceSpecificError1(
        serviceSpecificErrorCode: i32,
        message: *const android_String8,
    ) -> android_binder_Status;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6binder6Status24fromServiceSpecificErrorEiPKc"]
    pub fn android_binder_Status_fromServiceSpecificError2(
        serviceSpecificErrorCode: i32,
        message: *const ::std::os::raw::c_char,
    ) -> android_binder_Status;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6binder6Status11fromStatusTEi"]
    pub fn android_binder_Status_fromStatusT(status: android_status_t) -> android_binder_Status;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6binder6Status17exceptionToStringB5cxx11Ei"]
    pub fn android_binder_Status_exceptionToString(exceptionCode: android_status_t) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6binder6Status14readFromParcelERKNS_6ParcelE"]
    pub fn android_binder_Status_readFromParcel(
        this: *mut android_binder_Status,
        parcel: *const android_Parcel,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6binder6Status13writeToParcelEPNS_6ParcelE"]
    pub fn android_binder_Status_writeToParcel(
        this: *const android_binder_Status,
        parcel: *mut android_Parcel,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6binder6Status12setExceptionEiRKNS_7String8E"]
    pub fn android_binder_Status_setException(
        this: *mut android_binder_Status,
        ex: i32,
        message: *const android_String8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6binder6Status23setServiceSpecificErrorEiRKNS_7String8E"]
    pub fn android_binder_Status_setServiceSpecificError(
        this: *mut android_binder_Status,
        errorCode: i32,
        message: *const android_String8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android6binder6Status14setFromStatusTEi"]
    pub fn android_binder_Status_setFromStatusT(
        this: *mut android_binder_Status,
        status: android_status_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK7android6binder6Status9toString8Ev"]
    pub fn android_binder_Status_toString8(this: *const android_binder_Status) -> android_String8;
}
impl android_binder_Status {
    #[inline]
    pub unsafe fn ok() -> android_binder_Status {
        android_binder_Status_ok()
    }
    #[inline]
    pub unsafe fn fromExceptionCode(exceptionCode: i32) -> android_binder_Status {
        android_binder_Status_fromExceptionCode(exceptionCode)
    }
    #[inline]
    pub unsafe fn fromExceptionCode1(
        exceptionCode: i32,
        message: *const android_String8,
    ) -> android_binder_Status {
        android_binder_Status_fromExceptionCode1(exceptionCode, message)
    }
    #[inline]
    pub unsafe fn fromExceptionCode2(
        exceptionCode: i32,
        message: *const ::std::os::raw::c_char,
    ) -> android_binder_Status {
        android_binder_Status_fromExceptionCode2(exceptionCode, message)
    }
    #[inline]
    pub unsafe fn fromServiceSpecificError(serviceSpecificErrorCode: i32) -> android_binder_Status {
        android_binder_Status_fromServiceSpecificError(serviceSpecificErrorCode)
    }
    #[inline]
    pub unsafe fn fromServiceSpecificError1(
        serviceSpecificErrorCode: i32,
        message: *const android_String8,
    ) -> android_binder_Status {
        android_binder_Status_fromServiceSpecificError1(serviceSpecificErrorCode, message)
    }
    #[inline]
    pub unsafe fn fromServiceSpecificError2(
        serviceSpecificErrorCode: i32,
        message: *const ::std::os::raw::c_char,
    ) -> android_binder_Status {
        android_binder_Status_fromServiceSpecificError2(serviceSpecificErrorCode, message)
    }
    #[inline]
    pub unsafe fn fromStatusT(status: android_status_t) -> android_binder_Status {
        android_binder_Status_fromStatusT(status)
    }
    #[inline]
    pub unsafe fn exceptionToString(exceptionCode: android_status_t) -> std_string {
        android_binder_Status_exceptionToString(exceptionCode)
    }
    #[inline]
    pub unsafe fn readFromParcel(&mut self, parcel: *const android_Parcel) -> android_status_t {
        android_binder_Status_readFromParcel(self, parcel)
    }
    #[inline]
    pub unsafe fn writeToParcel(&self, parcel: *mut android_Parcel) -> android_status_t {
        android_binder_Status_writeToParcel(self, parcel)
    }
    #[inline]
    pub unsafe fn setException(&mut self, ex: i32, message: *const android_String8) {
        android_binder_Status_setException(self, ex, message)
    }
    #[inline]
    pub unsafe fn setServiceSpecificError(
        &mut self,
        errorCode: i32,
        message: *const android_String8,
    ) {
        android_binder_Status_setServiceSpecificError(self, errorCode, message)
    }
    #[inline]
    pub unsafe fn setFromStatusT(&mut self, status: android_status_t) {
        android_binder_Status_setFromStatusT(self, status)
    }
    #[inline]
    pub unsafe fn toString8(&self) -> android_String8 {
        android_binder_Status_toString8(self)
    }
}
impl android_c_interface_Error {
    pub const NO_ERROR: android_c_interface_Error = android_c_interface_Error::OK;
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum android_c_interface_Error {
    OK = 0,
    UNKNOWN_ERROR = -2147483648,
    NO_MEMORY = -12,
    INVALID_OPERATION = -38,
    BAD_VALUE = -22,
    BAD_TYPE = -2147483647,
    NAME_NOT_FOUND = -2,
    PERMISSION_DENIED = -1,
    NO_INIT = -19,
    ALREADY_EXISTS = -17,
    DEAD_OBJECT = -32,
    FAILED_TRANSACTION = -2147483646,
    BAD_INDEX = -75,
    NOT_ENOUGH_DATA = -61,
    WOULD_BLOCK = -11,
    TIMED_OUT = -110,
    UNKNOWN_TRANSACTION = -74,
    FDS_NOT_ALLOWED = -2147483641,
    UNEXPECTED_NULL = -2147483640,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct android_c_interface_RustBBinder {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface15Sp_CloneIBinderEPKNS_2spINS_7IBinderEEE"]
    pub fn android_c_interface_Sp_CloneIBinder(
        sp: *const android_sp<android_IBinder>,
    ) -> *mut android_sp<android_IBinder>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface14Sp_DropIBinderEPNS_2spINS_7IBinderEEE"]
    pub fn android_c_interface_Sp_DropIBinder(sp: *mut android_sp<android_IBinder>);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface23Sp_CloneIServiceManagerEPKNS_2spINS_15IServiceManagerEEE"]
    pub fn android_c_interface_Sp_CloneIServiceManager(
        sp: *const android_sp<android_IServiceManager>,
    ) -> *mut android_sp<android_IServiceManager>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface22Sp_DropIServiceManagerEPNS_2spINS_15IServiceManagerEEE"]
    pub fn android_c_interface_Sp_DropIServiceManager(sp: *mut android_sp<android_IServiceManager>);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface18Sp_DropRustBBinderEPNS_2spINS0_11RustBBinderEEE"]
    pub fn android_c_interface_Sp_DropRustBBinder(
        sp: *mut android_sp<android_c_interface_RustBBinder>,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface18Sp_CloneIInterfaceEPKNS_2spINS_10IInterfaceEEE"]
    pub fn android_c_interface_Sp_CloneIInterface(
        sp: *const android_sp<android_IInterface>,
    ) -> *mut android_sp<android_IInterface>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface17Sp_DropIInterfaceEPNS_2spINS_10IInterfaceEEE"]
    pub fn android_c_interface_Sp_DropIInterface(sp: *mut android_sp<android_IInterface>);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface13Sp_getIBinderEPNS_2spINS_7IBinderEEE"]
    pub fn android_c_interface_Sp_getIBinder(
        sp: *mut android_sp<android_IBinder>,
    ) -> *mut android_IBinder;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface21Sp_getIServiceManagerEPNS_2spINS_15IServiceManagerEEE"]
    pub fn android_c_interface_Sp_getIServiceManager(
        sp: *mut android_sp<android_IServiceManager>,
    ) -> *mut android_IServiceManager;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface16Sp_getIInterfaceEPNS_2spINS_10IInterfaceEEE"]
    pub fn android_c_interface_Sp_getIInterface(
        sp: *mut android_sp<android_IInterface>,
    ) -> *mut android_IInterface;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface17Sp_getRustBBinderEPNS_2spINS0_11RustBBinderEEE"]
    pub fn android_c_interface_Sp_getRustBBinder(
        sp: *mut android_sp<android_c_interface_RustBBinder>,
    ) -> *mut android_c_interface_RustBBinder;
}
pub type android_c_interface_TransactCallback = ::std::option::Option<
    unsafe extern "C" fn(
        binder: *mut android_c_interface_RustBBinder,
        object: *mut RustObject,
        code: u32,
        data: *const android_Parcel,
        reply: *mut android_Parcel,
        flags: u32,
    ) -> android_status_t,
>;
pub type android_c_interface_DestructCallback =
    ::std::option::Option<unsafe extern "C" fn(object: *mut RustObject)>;
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface14NewRustBBinderEP10RustObjectPKNS_8String16EPFiPNS0_11RustBBinderES2_jPKNS_6ParcelEPS8_jEPFvS2_E"]
    pub fn android_c_interface_NewRustBBinder(
        object: *mut RustObject,
        descriptor: *const android_String16,
        transactCallback: android_c_interface_TransactCallback,
        destructCallback: android_c_interface_DestructCallback,
    ) -> *mut android_sp<android_c_interface_RustBBinder>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface25RustBBinder_writeToParcelEPKNS_2spINS0_11RustBBinderEEEPNS_6ParcelE"]
    pub fn android_c_interface_RustBBinder_writeToParcel(
        binder: *const android_sp<android_c_interface_RustBBinder>,
        parcel: *mut android_Parcel,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface24RustBBinder_setExtensionEPNS0_11RustBBinderEPKNS_2spINS_7IBinderEEE"]
    pub fn android_c_interface_RustBBinder_setExtension(
        binder: *mut android_c_interface_RustBBinder,
        ext: *const android_sp<android_IBinder>,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface24RustBBinder_getExtensionEPNS0_11RustBBinderE"]
    pub fn android_c_interface_RustBBinder_getExtension(
        binder: *mut android_c_interface_RustBBinder,
    ) -> *mut android_sp<android_IBinder>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface25RustBBinder_castToIBinderEPKNS_2spINS0_11RustBBinderEEE"]
    pub fn android_c_interface_RustBBinder_castToIBinder(
        binder: *const android_sp<android_c_interface_RustBBinder>,
    ) -> *mut android_sp<android_IBinder>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface21RustBBinder_asIBinderEPKNS0_11RustBBinderE"]
    pub fn android_c_interface_RustBBinder_asIBinder(
        binder: *const android_c_interface_RustBBinder,
    ) -> *const android_IBinder;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface24RustBBinder_asIBinderMutEPNS0_11RustBBinderE"]
    pub fn android_c_interface_RustBBinder_asIBinderMut(
        binder: *mut android_c_interface_RustBBinder,
    ) -> *mut android_IBinder;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface34RustBBinder_getInterfaceDescriptorEPKNS0_11RustBBinderE"]
    pub fn android_c_interface_RustBBinder_getInterfaceDescriptor(
        binder: *const android_c_interface_RustBBinder,
    ) -> *const android_String16;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface25RustBBinder_isBinderAliveEPKNS0_11RustBBinderE"]
    pub fn android_c_interface_RustBBinder_isBinderAlive(
        binder: *const android_c_interface_RustBBinder,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface22RustBBinder_pingBinderEPNS0_11RustBBinderE"]
    pub fn android_c_interface_RustBBinder_pingBinder(
        binder: *mut android_c_interface_RustBBinder,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface16RustBBinder_dumpEPNS0_11RustBBinderEiPKPKNS_8String16Em"]
    pub fn android_c_interface_RustBBinder_dump(
        binder: *mut android_c_interface_RustBBinder,
        fd: ::std::os::raw::c_int,
        args: *const *const android_String16,
        args_len: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface23RustBBinder_getDebugPidEPNS0_11RustBBinderEPi"]
    pub fn android_c_interface_RustBBinder_getDebugPid(
        binder: *mut android_c_interface_RustBBinder,
        outPid: *mut pid_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface25RustBBinder_checkSubclassEPKNS0_11RustBBinderEPKv"]
    pub fn android_c_interface_RustBBinder_checkSubclass(
        binder: *const android_c_interface_RustBBinder,
        subclassID: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface20RustBBinder_transactEPNS0_11RustBBinderEjPKNS_6ParcelEPS3_j"]
    pub fn android_c_interface_RustBBinder_transact(
        binder: *mut android_c_interface_RustBBinder,
        code: u32,
        data: *const android_Parcel,
        reply: *mut android_Parcel,
        flags: u32,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface21DefaultServiceManagerEv"]
    pub fn android_c_interface_DefaultServiceManager() -> *mut android_sp<android_IServiceManager>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface15StartThreadPoolEv"]
    pub fn android_c_interface_StartThreadPool();
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface18GiveThreadPoolNameEv"]
    pub fn android_c_interface_GiveThreadPoolName();
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface13FlushCommandsEv"]
    pub fn android_c_interface_FlushCommands();
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface16IBinder_transactEPNS_7IBinderEjPKNS_6ParcelEPS3_j"]
    pub fn android_c_interface_IBinder_transact(
        binder: *mut android_IBinder,
        code: u32,
        data: *const android_Parcel,
        reply: *mut android_Parcel,
        flags: u32,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface27IBinder_queryLocalInterfaceEPNS_7IBinderEPKNS_8String16E"]
    pub fn android_c_interface_IBinder_queryLocalInterface(
        binder: *mut android_IBinder,
        descriptor: *const android_String16,
    ) -> *mut android_sp<android_IInterface>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface30IBinder_getInterfaceDescriptorEPKNS_7IBinderE"]
    pub fn android_c_interface_IBinder_getInterfaceDescriptor(
        binder: *const android_IBinder,
    ) -> *const android_String16;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface21IBinder_isBinderAliveEPKNS_7IBinderE"]
    pub fn android_c_interface_IBinder_isBinderAlive(binder: *const android_IBinder) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface18IBinder_pingBinderEPNS_7IBinderE"]
    pub fn android_c_interface_IBinder_pingBinder(binder: *mut android_IBinder)
        -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface12IBinder_dumpEPNS_7IBinderEiPKPKNS_8String16Em"]
    pub fn android_c_interface_IBinder_dump(
        binder: *mut android_IBinder,
        fd: ::std::os::raw::c_int,
        args: *const *const android_String16,
        args_len: size_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface20IBinder_getExtensionEPNS_7IBinderEPPNS_2spIS1_EE"]
    pub fn android_c_interface_IBinder_getExtension(
        binder: *mut android_IBinder,
        out: *mut *mut android_sp<android_IBinder>,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface19IBinder_getDebugPidEPNS_7IBinderEPi"]
    pub fn android_c_interface_IBinder_getDebugPid(
        binder: *mut android_IBinder,
        outPid: *mut pid_t,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface21IBinder_checkSubclassEPKNS_7IBinderEPKv"]
    pub fn android_c_interface_IBinder_checkSubclass(
        binder: *const android_IBinder,
        subclassID: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface9NewParcelEv"]
    pub fn android_c_interface_NewParcel() -> *mut android_Parcel;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface23Parcel_readStrongBinderEPKNS_6ParcelEPPNS_2spINS_7IBinderEEE"]
    pub fn android_c_interface_Parcel_readStrongBinder(
        parcel: *const android_Parcel,
        binder: *mut *mut android_sp<android_IBinder>,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface18Parcel_readString8EPKNS_6ParcelEPPNS_7String8E"]
    pub fn android_c_interface_Parcel_readString8(
        parcel: *const android_Parcel,
        string: *mut *mut android_String8,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface19Parcel_readString16EPKNS_6ParcelEPPNS_8String16E"]
    pub fn android_c_interface_Parcel_readString16(
        parcel: *const android_Parcel,
        string: *mut *mut android_String16,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface15Parcel_readBlobEPKNS_6ParcelEmPPNS1_12ReadableBlobE"]
    pub fn android_c_interface_Parcel_readBlob(
        parcel: *const android_Parcel,
        len: size_t,
        blob: *mut *mut android_Parcel_ReadableBlob,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface16Parcel_writeBlobEPNS_6ParcelEmbPPNS1_12WritableBlobE"]
    pub fn android_c_interface_Parcel_writeBlob(
        parcel: *mut android_Parcel,
        len: size_t,
        mutableCopy: bool,
        blob: *mut *mut android_Parcel_WritableBlob,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface24Parcel_ReadableBlob_dataEPKNS_6Parcel12ReadableBlobE"]
    pub fn android_c_interface_Parcel_ReadableBlob_data(
        blob: *const android_Parcel_ReadableBlob,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface24Parcel_WritableBlob_dataEPNS_6Parcel12WritableBlobE"]
    pub fn android_c_interface_Parcel_WritableBlob_data(
        blob: *mut android_Parcel_WritableBlob,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface24Parcel_ReadableBlob_sizeEPKNS_6Parcel12ReadableBlobE"]
    pub fn android_c_interface_Parcel_ReadableBlob_size(
        blob: *const android_Parcel_ReadableBlob,
    ) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface24Parcel_WritableBlob_sizeEPKNS_6Parcel12WritableBlobE"]
    pub fn android_c_interface_Parcel_WritableBlob_size(
        blob: *const android_Parcel_WritableBlob,
    ) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface25Parcel_ReadableBlob_clearEPNS_6Parcel12ReadableBlobE"]
    pub fn android_c_interface_Parcel_ReadableBlob_clear(blob: *mut android_Parcel_ReadableBlob);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface25Parcel_WritableBlob_clearEPNS_6Parcel12WritableBlobE"]
    pub fn android_c_interface_Parcel_WritableBlob_clear(blob: *mut android_Parcel_WritableBlob);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface27Parcel_ReadableBlob_releaseEPNS_6Parcel12ReadableBlobE"]
    pub fn android_c_interface_Parcel_ReadableBlob_release(blob: *mut android_Parcel_ReadableBlob);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface27Parcel_WritableBlob_releaseEPNS_6Parcel12WritableBlobE"]
    pub fn android_c_interface_Parcel_WritableBlob_release(blob: *mut android_Parcel_WritableBlob);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface30Parcel_ReadableBlob_DestructorEPNS_6Parcel12ReadableBlobE"]
    pub fn android_c_interface_Parcel_ReadableBlob_Destructor(
        blob: *mut android_Parcel_ReadableBlob,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface30Parcel_WritableBlob_DestructorEPNS_6Parcel12WritableBlobE"]
    pub fn android_c_interface_Parcel_WritableBlob_Destructor(
        blob: *mut android_Parcel_WritableBlob,
    );
}
pub type android_c_interface_ListServiceCallback = ::std::option::Option<
    unsafe extern "C" fn(service: *const android_String16, context: *mut ::std::os::raw::c_void),
>;
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface28IServiceManager_listServicesEPNS_15IServiceManagerEiPFvPKNS_8String16EPvES6_"]
    pub fn android_c_interface_IServiceManager_listServices(
        self_: *mut android_IServiceManager,
        dumpsysFlags: ::std::os::raw::c_int,
        callback: android_c_interface_ListServiceCallback,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface38IServiceManager_getInterfaceDescriptorEPKNS_15IServiceManagerE"]
    pub fn android_c_interface_IServiceManager_getInterfaceDescriptor(
        self_: *const android_IServiceManager,
    ) -> *const android_String16;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface26IServiceManager_getServiceEPKNS_15IServiceManagerEPKNS_8String16E"]
    pub fn android_c_interface_IServiceManager_getService(
        self_: *const android_IServiceManager,
        name: *const android_String16,
    ) -> *mut android_sp<android_IBinder>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface28IServiceManager_checkServiceEPKNS_15IServiceManagerEPKNS_8String16E"]
    pub fn android_c_interface_IServiceManager_checkService(
        self_: *const android_IServiceManager,
        name: *const android_String16,
    ) -> *mut android_sp<android_IBinder>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface26IServiceManager_addServiceEPNS_15IServiceManagerEPKNS_8String16EPKNS_2spINS_7IBinderEEEbi"]
    pub fn android_c_interface_IServiceManager_addService(
        self_: *mut android_IServiceManager,
        name: *const android_String16,
        service: *const android_sp<android_IBinder>,
        allowIsolated: bool,
        dumpsysFlags: ::std::os::raw::c_int,
    ) -> android_status_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface30IServiceManager_waitForServiceEPNS_15IServiceManagerEPKNS_8String16E"]
    pub fn android_c_interface_IServiceManager_waitForService(
        self_: *mut android_IServiceManager,
        name: *const android_String16,
    ) -> *mut android_sp<android_IBinder>;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface26IServiceManager_isDeclaredEPNS_15IServiceManagerEPKNS_8String16E"]
    pub fn android_c_interface_IServiceManager_isDeclared(
        self_: *mut android_IServiceManager,
        name: *const android_String16,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface10NewString8Ev"]
    pub fn android_c_interface_NewString8() -> *mut android_String8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface19NewString8FromUtf16EPKDsm"]
    pub fn android_c_interface_NewString8FromUtf16(
        data: *const u16,
        len: size_t,
    ) -> *mut android_String8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface18NewString8FromUtf8EPKcm"]
    pub fn android_c_interface_NewString8FromUtf8(
        data: *const ::std::os::raw::c_char,
        len: size_t,
    ) -> *mut android_String8;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface12String8_dataEPKNS_7String8E"]
    pub fn android_c_interface_String8_data(
        S: *const android_String8,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface15String8_DestroyEPNS_7String8E"]
    pub fn android_c_interface_String8_Destroy(S: *mut android_String8);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface11NewString16Ev"]
    pub fn android_c_interface_NewString16() -> *mut android_String16;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface12CopyString16EPKNS_8String16E"]
    pub fn android_c_interface_CopyString16(S: *const android_String16) -> *mut android_String16;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface20NewString16FromUtf16EPKDsm"]
    pub fn android_c_interface_NewString16FromUtf16(
        data: *const u16,
        len: size_t,
    ) -> *mut android_String16;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface19NewString16FromUtf8EPKcm"]
    pub fn android_c_interface_NewString16FromUtf8(
        data: *const ::std::os::raw::c_char,
        len: size_t,
    ) -> *mut android_String16;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface13String16_dataEPKNS_8String16E"]
    pub fn android_c_interface_String16_data(S: *const android_String16) -> *const u16;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface16String16_DestroyEPNS_8String16E"]
    pub fn android_c_interface_String16_Destroy(S: *mut android_String16);
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface11NewUniqueFdEv"]
    pub fn android_c_interface_NewUniqueFd() -> *mut android_base_unique_fd;
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface14UniqueFd_resetEPNS_4base14unique_fd_implINS1_13DefaultCloserEEEi"]
    pub fn android_c_interface_UniqueFd_reset(
        self_: *mut android_base_unique_fd,
        newValue: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7android11c_interface19UniqueFd_destructorEPNS_4base14unique_fd_implINS1_13DefaultCloserEEE"]
    pub fn android_c_interface_UniqueFd_destructor(self_: *mut android_base_unique_fd);
}
#[repr(C)]
pub struct native_handle {
    pub version: ::std::os::raw::c_int,
    pub numFds: ::std::os::raw::c_int,
    pub numInts: ::std::os::raw::c_int,
    pub data: __IncompleteArrayField<::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_native_handle() {
    assert_eq!(
        ::std::mem::size_of::<native_handle>(),
        12usize,
        concat!("Size of: ", stringify!(native_handle))
    );
    assert_eq!(
        ::std::mem::align_of::<native_handle>(),
        4usize,
        concat!("Alignment of ", stringify!(native_handle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<native_handle>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(native_handle),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<native_handle>())).numFds as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(native_handle),
            "::",
            stringify!(numFds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<native_handle>())).numInts as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(native_handle),
            "::",
            stringify!(numInts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<native_handle>())).data as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(native_handle),
            "::",
            stringify!(data)
        )
    );
}
pub type binder_size_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RustObject {
    _unused: [u8; 0],
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[test]
fn __bindgen_test_layout_android_base_unique_fd_impl_open0_android_base_DefaultCloser_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Size of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
}
#[test]
fn __bindgen_test_layout_android_base_unique_fd_impl_open0_android_base_DefaultCloser_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Size of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
}
#[test]
fn __bindgen_test_layout_android_base_unique_fd_impl_open0_android_base_DefaultCloser_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Size of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
}
#[test]
fn __bindgen_test_layout_android_base_unique_fd_impl_open0_android_base_DefaultCloser_close0_instantiation_3(
) {
    assert_eq!(
        ::std::mem::size_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Size of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
}
#[test]
fn __bindgen_test_layout_android_base_unique_fd_impl_open0_android_base_DefaultCloser_close0_instantiation_4(
) {
    assert_eq!(
        ::std::mem::size_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Size of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
}
#[test]
fn __bindgen_test_layout_android_base_unique_fd_impl_open0_android_base_DefaultCloser_close0_instantiation_5(
) {
    assert_eq!(
        ::std::mem::size_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Size of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
}
#[test]
fn __bindgen_test_layout_android_base_unique_fd_impl_open0_android_base_DefaultCloser_close0_instantiation_6(
) {
    assert_eq!(
        ::std::mem::size_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Size of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
}
#[test]
fn __bindgen_test_layout_android_base_unique_fd_impl_open0_android_base_DefaultCloser_close0_instantiation_7(
) {
    assert_eq!(
        ::std::mem::size_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Size of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
}
#[test]
fn __bindgen_test_layout_android_base_unique_fd_impl_open0_android_base_DefaultCloser_close0_instantiation_8(
) {
    assert_eq!(
        ::std::mem::size_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Size of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
}
#[test]
fn __bindgen_test_layout_android_base_unique_fd_impl_open0_android_base_DefaultCloser_close0_instantiation_9(
) {
    assert_eq!(
        ::std::mem::size_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Size of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
}
#[test]
fn __bindgen_test_layout_android_base_unique_fd_impl_open0_android_base_DefaultCloser_close0_instantiation_10(
) {
    assert_eq!(
        ::std::mem::size_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Size of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<android_base_unique_fd_impl>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(android_base_unique_fd_impl)
        )
    );
}
