{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e9b7f2e6_8512227d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-03-08T21:45:55Z",
      "side": 1,
      "message": "I think we\u0027ve been trying to err on the side of exposing too little rather than too much in the public API. Unless you\u0027re sure that users will need all of this functionality, I\u0027d prefer to just expose the minimum you need (link_to_death?).",
      "revId": "29455ad239ae3d5dff307c78e98389eaaebe49b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8c2f557_c752c835",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-03-08T21:49:01Z",
      "side": 1,
      "message": "The AIDL backend will need to be updated for this, as it assumes these are available in `SpIBinder`. Why not move them to IBinderTransact (assuming we keep that)?",
      "revId": "29455ad239ae3d5dff307c78e98389eaaebe49b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef1616d1_c7ea43ef",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2021-03-09T13:50:35Z",
      "side": 1,
      "message": "The codegen has to change anyway, https://r.android.com/1623786 should have what\u0027s needed.\n\nIt just seems weird for these to be associated constants on a trait. Aren\u0027t they the same value everywhere? Why would an implementor of this trait want to give them different values?",
      "parentUuid": "c8c2f557_c752c835",
      "revId": "29455ad239ae3d5dff307c78e98389eaaebe49b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21722d29_40395033",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-03-09T17:32:47Z",
      "side": 1,
      "message": "I put them there just to make it similar to the location of the enum in C++ IBinder. Moving them out is fine.",
      "parentUuid": "ef1616d1_c7ea43ef",
      "revId": "29455ad239ae3d5dff307c78e98389eaaebe49b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c93852a_962f87bc",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-03-08T21:45:55Z",
      "side": 1,
      "message": "If we expose this we need to add to the doc comment. The NDK doc comment has a lot more detail about how this API doesn\u0027t actually do what one might think it should (i.e. the result is cached from the last transaction).",
      "revId": "29455ad239ae3d5dff307c78e98389eaaebe49b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f783b114_7ef73d55",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2021-03-09T13:50:35Z",
      "side": 1,
      "message": "Moved to IBinderInternal for now.",
      "parentUuid": "3c93852a_962f87bc",
      "revId": "29455ad239ae3d5dff307c78e98389eaaebe49b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3143430_de93df1e",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-03-08T21:45:55Z",
      "side": 1,
      "message": "This API is dangerous. It is only valid for local services and is not thread-safe, so I was hoping to not expose it. If this is needed, we should make a safe way to create a service that receives security contexts. (b/178852354)",
      "revId": "29455ad239ae3d5dff307c78e98389eaaebe49b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ce9240f_446976c7",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2021-03-09T13:50:35Z",
      "side": 1,
      "message": "Moved to IBinderInternal. Should it be marked as `unsafe`?",
      "parentUuid": "e3143430_de93df1e",
      "revId": "29455ad239ae3d5dff307c78e98389eaaebe49b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7089d3a_fae68321",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-03-09T17:32:47Z",
      "side": 1,
      "message": "It\u0027s certainly not memory-unsafe. The worst that can happen is a race between concurrent, conflicting calls of this function. We could mark this unsafe, and if we were exposing this in the public API I\u0027d say we should. My plan is to use this internally during object creation, so it doesn\u0027t really matter.",
      "parentUuid": "2ce9240f_446976c7",
      "revId": "29455ad239ae3d5dff307c78e98389eaaebe49b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5e2c6aa_958e1dd3",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-03-08T21:45:55Z",
      "side": 1,
      "message": "Do we really need to expose this?",
      "revId": "29455ad239ae3d5dff307c78e98389eaaebe49b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38c64544_a66a6e46",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2021-03-09T13:50:35Z",
      "side": 1,
      "message": "I\u0027m not entirely sure. Moved to IBinderInternal for now.",
      "parentUuid": "a5e2c6aa_958e1dd3",
      "revId": "29455ad239ae3d5dff307c78e98389eaaebe49b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "745d66b3_feba30bd",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 3
      },
      "lineNbr": 117,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-03-08T21:45:55Z",
      "side": 1,
      "message": "@smoreland do we want to expose extension functionality? It was my understanding that that is deprecated with AIDL?",
      "revId": "29455ad239ae3d5dff307c78e98389eaaebe49b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b39535b_bfbbeb48",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 3
      },
      "lineNbr": 117,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2021-03-09T13:50:35Z",
      "side": 1,
      "message": "Moved to IBinderInternal.",
      "parentUuid": "745d66b3_feba30bd",
      "revId": "29455ad239ae3d5dff307c78e98389eaaebe49b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "441130eb_3f77baff",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 3
      },
      "lineNbr": 117,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-03-09T17:32:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b39535b_bfbbeb48",
      "revId": "29455ad239ae3d5dff307c78e98389eaaebe49b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d781795_656479df",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 3
      },
      "lineNbr": 132,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-03-08T21:45:55Z",
      "side": 1,
      "message": "This doc comment was copied from IBinder in C++ but is currently inaccurate for our implementation. There\u0027s an open bug (176491050) on this, which I would ideally like to resolve before exposing this API. Now that we\u0027ve landed public API support for weak binder objects I can go ahead and implement providing that to the callback, if we need it.",
      "revId": "29455ad239ae3d5dff307c78e98389eaaebe49b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afeb964e_1add9a8a",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 3
      },
      "lineNbr": 132,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2021-03-09T13:50:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4d781795_656479df",
      "revId": "29455ad239ae3d5dff307c78e98389eaaebe49b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}