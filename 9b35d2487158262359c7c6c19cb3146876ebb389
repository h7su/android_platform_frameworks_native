{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7f847111_9d9c443d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002669
      },
      "writtenOn": "2022-07-20T13:16:29Z",
      "side": 1,
      "message": "Hello I found a few issues in EventHub when using some USB touchpanels in a multi-display automotive setup where we were using the same display/touchpanel for multiple screens. The fixes for these looked fairly straight forward so I thought I would share this back upstream in case it will help others that run into the same issue. Let me know if there are any questions or clarifications needed. I tried to put some examples of the issue in the commit message to help clarify the problem I was running into. Thanks in advance for the help reviewing this.",
      "revId": "9b35d2487158262359c7c6c19cb3146876ebb389",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6146f95_9b0d6831",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1149384
      },
      "writtenOn": "2022-07-21T03:39:06Z",
      "side": 1,
      "message": "This generally lgtm. Could you add a test to EventHub_test.cpp?\n\nframeworks/native/services/inputflinger/tests/EventHub_test.cpp\n\nSomething like:\n\n    TEST_F(EventHubTest, DevicesWithMatchingUniqueIdsAreUnique) {\n      std::unique_ptr\u003cUinputHomeKey\u003e keyboard2 \u003d createUinputDevice\u003cUinputHomeKey\u003e();\n      int32_t deviceId2;\n      ASSERT_NO_FATAL_FAILURE(deviceId2 \u003d waitForDeviceCreation());\n      \n      ASSERT_EQ(mEventHub-\u003egetDeviceIdentifier(mDeviceId).descriptor, mEventHub-\u003egetDeviceIdentifier(deviceId2).descriptor);\n      \n      keyboard2.reset();\n      waitForDeviceClose(deviceId2);\n    }",
      "revId": "9b35d2487158262359c7c6c19cb3146876ebb389",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8cf92214_97e39f2e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1149384
      },
      "writtenOn": "2022-07-21T03:40:24Z",
      "side": 1,
      "message": "The dumps are super helpful, thanks for adding those!",
      "parentUuid": "7f847111_9d9c443d",
      "revId": "9b35d2487158262359c7c6c19cb3146876ebb389",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "157d159b_528a9ffb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006497
      },
      "writtenOn": "2022-07-21T21:58:32Z",
      "side": 1,
      "message": "Can we add tests for this case as well?",
      "revId": "9b35d2487158262359c7c6c19cb3146876ebb389",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfd9d988_c14edd98",
        "filename": "services/inputflinger/reader/EventHub.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1265,
      "author": {
        "id": 1149384
      },
      "writtenOn": "2022-07-21T03:39:06Z",
      "side": 1,
      "message": "rather than using a \"nonce\", wdyt about simply appending the file path of the device to the \"rawDescriptor\" string? Like:\n\n    rawDescriptor +\u003d \"/dev/input/event3\";\n    \nwould that allow us to generate a unique descriptor without having to look at \u0027mOpeningDevices\u0027 or using a nonce at all?",
      "range": {
        "startLine": 1264,
        "startChar": 5,
        "endLine": 1265,
        "endChar": 32
      },
      "revId": "9b35d2487158262359c7c6c19cb3146876ebb389",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d40bf4f6_d7a516d7",
        "filename": "services/inputflinger/reader/EventHub.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1281,
      "author": {
        "id": 1407716
      },
      "writtenOn": "2022-07-21T19:46:49Z",
      "side": 1,
      "message": "Siarhei, do you know why we\u0027re only conditionally including these values in the descriptor? Why don\u0027t we just always use all the values (vid, pid, uniqueId, name, location, nonce), and only then fall back to changing the nonce?\n\nThis way, the touchscreens don\u0027t have to rely on nonce, since the location is different. If they also had the same location, then it would depend on the nonce, which depends on order in which the devices are opened relative to each other. The touchscreen that\u0027s processed first will always have the same descriptor. We can\u0027t guarantee that if we use the path (e.g. /dev/input/event4) in the descriptor.",
      "range": {
        "startLine": 1269,
        "startChar": 0,
        "endLine": 1281,
        "endChar": 5
      },
      "revId": "9b35d2487158262359c7c6c19cb3146876ebb389",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68765b17_68828393",
        "filename": "services/inputflinger/reader/EventHub.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1298,
      "author": {
        "id": 1149384
      },
      "writtenOn": "2022-07-21T03:39:06Z",
      "side": 1,
      "message": "hasDeviceWithDescriptorLocked(identifier.descriptor) ||\n           hasOpeningDeviceWithDescriptorLocked(identifier.descriptor)",
      "range": {
        "startLine": 1297,
        "startChar": 11,
        "endLine": 1298,
        "endChar": 79
      },
      "revId": "9b35d2487158262359c7c6c19cb3146876ebb389",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}