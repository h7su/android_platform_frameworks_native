{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "746c776e_3d4a79f7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2021-08-18T15:25:40Z",
      "side": 1,
      "message": "By the way, as a reviewer, having the definition of the API and the implementation/tests split apart like this makes it very difficult to review. For instance, the bug in the thread-safety documentation was only noticeable after seeing the implementation and tests, but the documentation was in this CL.\n\nAs someone external to the project and yet apparently the main person reviewing TLS calls for correctness, these reviews already take a lot of time. Can you please structure future CLs so that they are more reviewable?",
      "revId": "eee95c1146e7678296da5e70bcb03b8fe7324b16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d36cc584_9e7e2dd5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-08-19T20:28:35Z",
      "side": 1,
      "message": "Thanks for the suggestion! go/binder-tls for the documentation.\n\nI\u0027ve also added more documentation to aosp/1794131. PTAL.",
      "parentUuid": "746c776e_3d4a79f7",
      "revId": "eee95c1146e7678296da5e70bcb03b8fe7324b16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afc61ccb_8c5e667c",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 16
      },
      "lineNbr": 37,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2021-08-18T15:21:21Z",
      "side": 1,
      "message": "Speaking of thread-safety, the way it\u0027s implemented, calling, say, interruptableWriteFully and interruptableReadFully on separate threads is *not* safe. May want to say something here too.",
      "revId": "eee95c1146e7678296da5e70bcb03b8fe7324b16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f7dd43f_0eb07f27",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 16
      },
      "lineNbr": 37,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-08-19T20:31:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "afc61ccb_8c5e667c",
      "revId": "eee95c1146e7678296da5e70bcb03b8fe7324b16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5354115_2dc86771",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 16
      },
      "lineNbr": 61,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2021-08-18T15:21:21Z",
      "side": 1,
      "message": "The tests in https://android-review.googlesource.com/c/platform/frameworks/native/+/1794131 seem to use threads.  Server::run() spins up a new thread for each accepted fd. I\u0027m not sure this constraint is what you actually want.\n\nAs long as you don\u0027t mutate an SSL_CTX after it is shared, BoringSSL is perfectly happy sharing an SSL_CTX (but not an SSL!) across threads, so that\u0027s fine. It seems the only issue here is the mutating addTrustedPeerCertificate() call.\n\nYou can say that you\u0027re not allowed to call addTrustedPeerCertificate() at all after newTransport(), to avoid race conditions. Or you could add some locking so there are no race conditions, just it\u0027s undefined whether it applies to running sockets. Or you could make the caller specify that when you construct the object, which avoids this problem altogether.",
      "revId": "eee95c1146e7678296da5e70bcb03b8fe7324b16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "763ab85d_819cc072",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 16
      },
      "lineNbr": 61,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-08-19T20:31:57Z",
      "side": 1,
      "message": "Done, PTAL. In particular, PTAL at these comments:\n\nhttps://android-review.googlesource.com/c/platform/frameworks/native/+/1794131/19/libs/binder/RpcTransportTls.cpp#474\n\nI am picking the second option for better flexibility:\n\n\u003e Or you could add some locking so there are no race conditions, just it\u0027s undefined whether it applies to running sockets.\n\nFor the third option:\n\n\u003e Or you could make the caller specify that when you construct the object, which avoids this problem altogether.\n\nIt doesn\u0027t work in my case for two-way authentication, since I\u0027ll have to construct both the server and client contexts to get their certificates, then exchange them. So peer certificates shouldn\u0027t be set in the constructor.",
      "parentUuid": "e5354115_2dc86771",
      "revId": "eee95c1146e7678296da5e70bcb03b8fe7324b16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cb38c5f_546a8dd9",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 16
      },
      "lineNbr": 78,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2021-08-18T15:21:21Z",
      "side": 1,
      "message": "(Should this be const?)",
      "revId": "eee95c1146e7678296da5e70bcb03b8fe7324b16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6fe5a773_83bba363",
        "filename": "libs/binder/include/binder/RpcTransport.h",
        "patchSetId": 16
      },
      "lineNbr": 78,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-08-19T20:54:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4cb38c5f_546a8dd9",
      "revId": "eee95c1146e7678296da5e70bcb03b8fe7324b16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}