{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "866ac1f5_53a053cc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-03-29T16:59:51Z",
      "side": 1,
      "message": "\u0027publishing RPC server on the same address\u0027",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 47
      },
      "revId": "71caccc26c628297f14ca6083d96e7ce3daa9a5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb667f78_e498a7ce",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-03-29T17:38:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "866ac1f5_53a053cc",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 47
      },
      "revId": "71caccc26c628297f14ca6083d96e7ce3daa9a5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b174846_cbe6c7fc",
        "filename": "libs/binder/RpcServer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 553,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-03-29T16:59:51Z",
      "side": 1,
      "message": "nit: \u0027(borrowed_fd fd)\u0027 is preferred, though it doesn\u0027t actually matter in this case, I would still recommend it for consistency, in case the client doesn\u0027t have a unique_fd",
      "range": {
        "startLine": 553,
        "startChar": 39,
        "endLine": 553,
        "endChar": 55
      },
      "revId": "71caccc26c628297f14ca6083d96e7ce3daa9a5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42c90e9d_3e28e6a1",
        "filename": "libs/binder/RpcServer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 553,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-03-29T17:38:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b174846_cbe6c7fc",
      "range": {
        "startLine": 553,
        "startChar": 39,
        "endLine": 553,
        "endChar": 55
      },
      "revId": "71caccc26c628297f14ca6083d96e7ce3daa9a5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98ecb350_2d1f8e0d",
        "filename": "libs/binder/RpcServer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 564,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-03-29T16:59:51Z",
      "side": 1,
      "message": "we don\u0027t want to set these independently?",
      "range": {
        "startLine": 555,
        "startChar": 0,
        "endLine": 564,
        "endChar": 5
      },
      "revId": "71caccc26c628297f14ca6083d96e7ce3daa9a5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c048703_c092d7be",
        "filename": "libs/binder/RpcServer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 564,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-03-29T17:38:31Z",
      "side": 1,
      "message": "Why would we want such granularity? We just want the user to be able to either enable restarts or go safe.",
      "parentUuid": "98ecb350_2d1f8e0d",
      "range": {
        "startLine": 555,
        "startChar": 0,
        "endLine": 564,
        "endChar": 5
      },
      "revId": "71caccc26c628297f14ca6083d96e7ce3daa9a5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f22f41c_9017450b",
        "filename": "libs/binder/include/binder/RpcServer.h",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-03-29T16:59:51Z",
      "side": 1,
      "message": "I\u0027m not sure if you saw in my comment that this functionality is already possible with this API.\n\nIn this spirit, what would you think of, instead of \"setRestartableSockets\" which is very specific, we can add:\n\n    // warning: may be called arbitrarily late for lazily configured sockets\n    //\n    // \u003csome notes on RPC binder requiring SIGPIPE to be disabled and making\n    // non-blocking sockets, not all options may work, but \n    void setSocketConfiguration(std::function\u003cvoid(borrowed_fd fd)\u003e\u0026\u0026 configurator);\n\nThat way, it\u0027s generic and we won\u0027t expect to add a bunch of APIs like this. setupRawSocketServer could still be used, but I get the desire to use the built-in functionality, and anyway, I want to delete setupRawSocketServer.\n\nAnd also - for orthogonality, I wonder if this should be an option for RpcSession as well? Perhaps not now, but in the future...",
      "range": {
        "startLine": 81,
        "startChar": 27,
        "endLine": 81,
        "endChar": 47
      },
      "revId": "71caccc26c628297f14ca6083d96e7ce3daa9a5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a929ffb_3d9be278",
        "filename": "libs/binder/include/binder/RpcServer.h",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-03-29T17:38:31Z",
      "side": 1,
      "message": "I know it\u0027s possible, but why not to use `setupInetServer` since we need exactly this, but with restart-friendly sockopt. If I use `setupRawSocketServer`, I\u0027d have to copy-paste `setupInetServer`.\n\n`setSocketConfiguration` sounds super generic and IMO overkill - per Devin\u0027s comment with setsockopt link in the other thread, there\u0027s not many other interesting options to set there (as in: to make them optional for the user).",
      "parentUuid": "1f22f41c_9017450b",
      "range": {
        "startLine": 81,
        "startChar": 27,
        "endLine": 81,
        "endChar": 47
      },
      "revId": "71caccc26c628297f14ca6083d96e7ce3daa9a5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f667586f_53008849",
        "filename": "libs/binder/include/binder/RpcServer.h",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-03-30T02:21:37Z",
      "side": 1,
      "message": "Yeah, I know, but that boat has already flown with the existing APIs, and the API being added is coupling two different socket options together that we probably don\u0027t always want to be coupled together. Also, it would be hard to modify. For instance, before you had \"TODO.. add SO_LINGER\". If we merge this, wait a year, it would be backwards incompatible to add SO_LINGER. I don\u0027t see the current API scaling, and it is a redundant API.\n\nCould you solve these API scaling issues? It doesn\u0027t have to be with my suggestion.",
      "parentUuid": "6a929ffb_3d9be278",
      "range": {
        "startLine": 81,
        "startChar": 27,
        "endLine": 81,
        "endChar": 47
      },
      "revId": "71caccc26c628297f14ca6083d96e7ce3daa9a5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cbb97b1_ae7780ad",
        "filename": "libs/binder/include/binder/RpcServer.h",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-03-30T16:18:14Z",
      "side": 1,
      "message": "Before I go into the rabbit hole of creating a super-flexible API for setting socket options, should we take such effort for non-stable, system-exclusive API? An API to switch between \"restartable\" and \"safe\" behavior sounds like appropriate level of detail for me and SO_LINGER would fit into its semantics if needed. If everything goes wrong and we need to shuffle things around, we can change this API, can\u0027t we?\n\nIf you insist, I can add `RpcServer::setsockopt(int option_name, T option_value)` that would internally store these options in a map. I can implement a reusable class for it, may be a fun exercise for me. But I still think it\u0027s an overkill to what I\u0027m trying to do here.",
      "parentUuid": "f667586f_53008849",
      "range": {
        "startLine": 81,
        "startChar": 27,
        "endLine": 81,
        "endChar": 47
      },
      "revId": "71caccc26c628297f14ca6083d96e7ce3daa9a5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "119e801d_44906d1f",
        "filename": "libs/binder/include/binder/RpcServer.h",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-03-31T21:25:09Z",
      "side": 1,
      "message": "As discussed offline, I [tried](https://paste.googleplex.com/5418041494994944?raw) using existing `releaseServer`/`setupExternalServer` APIs, as per following suggestion:\n```\nserver-\u003esetupInetSocket\nauto fd \u003d server-\u003ereleaseServer();\n... setsocketopt(fd.get(), ...);\nserver-\u003esetupExternalServer(std::move(fd));\n```\n\nIt didn\u0027t work - since both `socket()` and `bind()` calls are inside `setupInetSocket`, `setsocketopt` happens after `bind()` (and that\u0027s against SO_REUSEADDR documentation). If I was to only use existing APIs, I would have to not only not use (read: copy-paste) `setupInetServer`, but also `setupSocketServer` and go straight to `setupRawSocketServer`. That\u0027s quite a lot of copy-paste to do for such a simple thing that\u0027s probably necessary for most RPC Servers.\n\nI\u0027ve also found a line in Linux docs that would suggest this option should be set for any server (not sure if I\u0027m reading it correctly though):\n```\nTypically this difference is invisible, since, for example, a server program is\ndesigned to always set this option.\n```",
      "parentUuid": "7cbb97b1_ae7780ad",
      "range": {
        "startLine": 81,
        "startChar": 27,
        "endLine": 81,
        "endChar": 47
      },
      "revId": "71caccc26c628297f14ca6083d96e7ce3daa9a5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f592265_4e3c5715",
        "filename": "libs/binder/include/binder/RpcServer.h",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-03-31T21:39:41Z",
      "side": 1,
      "message": "okay. I like setting them by default",
      "parentUuid": "119e801d_44906d1f",
      "range": {
        "startLine": 81,
        "startChar": 27,
        "endLine": 81,
        "endChar": 47
      },
      "revId": "71caccc26c628297f14ca6083d96e7ce3daa9a5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d294017b_a7c54fe2",
        "filename": "libs/binder/include/binder/RpcServer.h",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-03-31T21:55:02Z",
      "side": 1,
      "message": "You mean, the way it is done right now (PS#7)?",
      "parentUuid": "6f592265_4e3c5715",
      "range": {
        "startLine": 81,
        "startChar": 27,
        "endLine": 81,
        "endChar": 47
      },
      "revId": "71caccc26c628297f14ca6083d96e7ce3daa9a5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}