{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f1120363_0a038004",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 2
      },
      "lineNbr": 433,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-10-13T22:42:30Z",
      "side": 1,
      "message": "btw - this delegates to AIBinder_lt, right?",
      "range": {
        "startLine": 433,
        "startChar": 0,
        "endLine": 433,
        "endChar": 52
      },
      "revId": "7c18e71933b47c85804676836f7b2d7971b1a2ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f27fabea_240b28f3",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 2
      },
      "lineNbr": 433,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2023-10-13T22:47:45Z",
      "side": 1,
      "message": "That is correct, it\u0027s implemented in `proxy.rs`.",
      "parentUuid": "f1120363_0a038004",
      "range": {
        "startLine": 433,
        "startChar": 0,
        "endLine": 433,
        "endChar": 52
      },
      "revId": "7c18e71933b47c85804676836f7b2d7971b1a2ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "421aeabb_f01f113d",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 2
      },
      "lineNbr": 439,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-10-16T09:28:14Z",
      "side": 1,
      "message": "Why keep this commented-out code? I think it would be better to remove it entirely, here and below.",
      "revId": "7c18e71933b47c85804676836f7b2d7971b1a2ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b35ab79a_afc51ef9",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 2
      },
      "lineNbr": 439,
      "author": {
        "id": 1933736
      },
      "writtenOn": "2023-10-16T17:50:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "421aeabb_f01f113d",
      "revId": "7c18e71933b47c85804676836f7b2d7971b1a2ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fec2ac9_3c757536",
        "filename": "libs/binder/rust/src/binder.rs",
        "patchSetId": 2
      },
      "lineNbr": 440,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2023-10-13T22:47:04Z",
      "side": 1,
      "message": "LGTM, because the Rust docs say this is what you\u0027re supposed to do if you implement both traits. On top of that, `SpIBinder` also does exactly that:\n```\nimpl PartialOrd for SpIBinder {\n    fn partial_cmp(\u0026self, other: \u0026Self) -\u003e Option\u003cOrdering\u003e {\n        Some(self.cmp(other))\n    }\n}\n```",
      "revId": "7c18e71933b47c85804676836f7b2d7971b1a2ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}