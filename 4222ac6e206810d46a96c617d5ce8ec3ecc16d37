{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cc5f44d5_8a0512dc",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 200,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-11-13T02:16:03Z",
      "side": 1,
      "message": "There are many things which implement onTransact from aidl-generated code which also don\u0027t check if the reply parcel is non-null.\n\nThe only way that a reply parcel can be non-null is if the following conditions are met:\n- the binder is local (if it is a remote binder, reply is always added by IPCThreadState)\n- a reply Parcel is not created for a non-oneway transaction (but a client should always do this for a non-oneway transaction)\n\nI think the idea is, in this case, it would be correct to abort in that process, since it is doing something silly.\n\nCan you get more information from the analyzer that says how null can show up here? I would rather find a way to prevent clients from sending in null replies than to allow them to do it, and potentially ignore errors or hit error paths for no good reason.",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 200,
        "endChar": 55
      },
      "revId": "4222ac6e206810d46a96c617d5ce8ec3ecc16d37",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8409d76_6c9d08aa",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 200,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2020-11-16T18:06:49Z",
      "side": 1,
      "message": "\u003e Can you get more information from the analyzer that says how null can show up here\n\ni think the `reply !\u003d nullptr` check above is what\u0027s upsetting the analyzer. if this really shouldn\u0027t happen, we can always ignore the complaint, but it might be good to have some local hints as to when null is/isn\u0027t expected, based on the value of `code`.",
      "parentUuid": "cc5f44d5_8a0512dc",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 200,
        "endChar": 55
      },
      "revId": "4222ac6e206810d46a96c617d5ce8ec3ecc16d37",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31f75b35_18406d83",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 200,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-11-16T18:50:53Z",
      "side": 1,
      "message": "I really wish we had a C++ annotation/non-ABI breaking way (e.g. gsl::not_null changes mangled name) to mark a pointer as required to be non-null for out params like this. That might make it tractable to clean up \"bad\" clients, which we\u0027d probably want to do anyway for b/28321379, even though it costs an extra (entirely stack) allocation of Parcel in the happy path for any binder transaction. I have a thing against mutable out params like \"Parcel\u0026 reply\", but it\u0027s also not an option because of prebuilts using these APIs.\n\nWe could add this, which would be closer to the actual expected semantics of this, but from a C++ quality standpoint, it doesn\u0027t actually add any guarantees, because people in-process can still mixup FLAG_ONEWAY and nullness of reply.\n\n    if (CC_UNLIKELY(reply \u003d\u003d nullptr \u0026\u0026 !(flag \u0026 FLAGS_ONEWAY)) {\n        LOG_ALWAYS_FATAL(...);\n    }\n\n\u003e local hints as to when null is/isn\u0027t expected, based on the value of `code`.\n\nThis we can\u0027t do unfortunately because the values of code are defined externally in interfaces.\n\nSo as far as a path forward here goes, I think it\u0027s best to simply disable the lint here. Fixing this null reply Parcel problem has been on my mind for a while, but it\u0027s just too tricky until we finally migrate away from manually-written binder interfaces, and even then, it may not be worth it, given alternatives at that time scale (using rust?).",
      "parentUuid": "d8409d76_6c9d08aa",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 200,
        "endChar": 55
      },
      "revId": "4222ac6e206810d46a96c617d5ce8ec3ecc16d37",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80c662d1_e46898ee",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 200,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2020-11-16T20:17:19Z",
      "side": 1,
      "message": "`__attribute__((__nonnull__))` doesn\u0027t change the ABI, but it might change code for surrounding blocks, since you can use this to reason about other NULL checks that the calling code has.",
      "parentUuid": "31f75b35_18406d83",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 200,
        "endChar": 55
      },
      "revId": "4222ac6e206810d46a96c617d5ce8ec3ecc16d37",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b5cd3a8_30636276",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 200,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-11-16T20:25:45Z",
      "side": 1,
      "message": "gtk, since it comes with a warning, that might be the ticket to find these and see if it would be reasonable to clean up all clients.",
      "parentUuid": "80c662d1_e46898ee",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 200,
        "endChar": 55
      },
      "revId": "4222ac6e206810d46a96c617d5ce8ec3ecc16d37",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}