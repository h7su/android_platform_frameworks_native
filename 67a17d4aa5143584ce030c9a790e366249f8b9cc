{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4c44ac0e_49b796df",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-06-06T18:50:09Z",
      "side": 1,
      "message": "There\u0027s still something wrong with the function_ref. It looks like it\u0027s not capturing the variables correctly. \nSeeing unexpected waitUs values and crashes in drainCommands when derefing connection.\n",
      "revId": "67a17d4aa5143584ce030c9a790e366249f8b9cc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3acf92f9_a2d5925b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-06-06T20:00:53Z",
      "side": 1,
      "message": "Looks like it\u0027s because I was using a temporary lambda for the function_ref.\nhttps://source.corp.google.com/android/system/libbase/include/android-base/function_ref.h;rcl\u003d8b536e0451f2dcdaed16a6e56a7fab1e4942e4af;l\u003d70\n\nCreating another variable to hold the lambda first fixed the issues. Patchset 4.\nPatchset 5 removes the extra variable since it\u0027s only used inside the rpcSendfunction().\n\nLooks like we may be able to use lamba types all the way down instead of std::function or function_ref like:\nhttps://stackoverflow.com/questions/6458612/proper-way-to-receive-a-lambda-as-parameter-by-reference\n\nNot sure if it\u0027s worth making those changes. Any opinions?",
      "parentUuid": "4c44ac0e_49b796df",
      "revId": "67a17d4aa5143584ce030c9a790e366249f8b9cc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66bb2154_8caf45ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-06T20:50:31Z",
      "side": 1,
      "message": "Ah, I missed this comment. Yeah you should think of `function_ref` as a pointer, so you need to make sure the function lives long enough.\n\n\u003e Not sure if it\u0027s worth making those changes. Any opinions?\n\nThe template approach can be more performant because it avoids the extra indirection inside function_ref and it can potentially inline the lambda all the way. OTOH, it might result in larger binaries.\n\nAlso, RpcTransport uses virtual methods and those don\u0027t play nice with templates, so there might be some non-trivial refactoring required.",
      "parentUuid": "3acf92f9_a2d5925b",
      "revId": "67a17d4aa5143584ce030c9a790e366249f8b9cc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9234e20_ef9c26ce",
        "filename": "libs/binder/RpcTransportTls.cpp",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-03T23:30:08Z",
      "side": 1,
      "message": "function_ref?",
      "range": {
        "startLine": 186,
        "startChar": 52,
        "endLine": 186,
        "endChar": 62
      },
      "revId": "67a17d4aa5143584ce030c9a790e366249f8b9cc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6de1e41_f008e8d1",
        "filename": "libs/binder/RpcTransportTls.cpp",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-06-06T18:50:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a9234e20_ef9c26ce",
      "range": {
        "startLine": 186,
        "startChar": 52,
        "endLine": 186,
        "endChar": 62
      },
      "revId": "67a17d4aa5143584ce030c9a790e366249f8b9cc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbd0f4ae_4d9d210b",
        "filename": "libs/binder/RpcTransportTls.cpp",
        "patchSetId": 2
      },
      "lineNbr": 202,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-06-03T23:30:08Z",
      "side": 1,
      "message": "function_ref?",
      "range": {
        "startLine": 202,
        "startChar": 44,
        "endLine": 202,
        "endChar": 57
      },
      "revId": "67a17d4aa5143584ce030c9a790e366249f8b9cc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c569fa28_e183ca75",
        "filename": "libs/binder/RpcTransportTls.cpp",
        "patchSetId": 2
      },
      "lineNbr": 202,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-06-06T18:50:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fbd0f4ae_4d9d210b",
      "range": {
        "startLine": 202,
        "startChar": 44,
        "endLine": 202,
        "endChar": 57
      },
      "revId": "67a17d4aa5143584ce030c9a790e366249f8b9cc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}