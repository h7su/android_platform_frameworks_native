{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b835e76e_73aa0fb1",
        "filename": "cmds/servicemanager/main.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2024-01-08T08:35:38Z",
      "side": 1,
      "message": "I think Arve\u0027s suggestion was to set O_NONBLOCK just before this call, and then clear it again. I agree with that because it would make this change less risky, as the regular non-blocking WRITE/READ path isn\u0027t as well tested. Talking about risk: should we flag this change? It is hard to see all the possible implications here.",
      "range": {
        "startLine": 107,
        "startChar": 32,
        "endLine": 107,
        "endChar": 52
      },
      "revId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7758dae_fb3eb387",
        "filename": "cmds/servicemanager/main.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-01-08T18:25:16Z",
      "side": 1,
      "message": "Well, if it\u0027s not safe all the time, weird UB this 1:1,000,000 case would not be so great. We\u0027d prefer to make sure it\u0027s safe all the time. What could break?\n\nAlso, since it\u0027s servicemanager we can\u0027t do runtime flagging.",
      "parentUuid": "b835e76e_73aa0fb1",
      "range": {
        "startLine": 107,
        "startChar": 32,
        "endLine": 107,
        "endChar": 52
      },
      "revId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1a1ff49_0decf43b",
        "filename": "cmds/servicemanager/main.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2024-01-09T08:20:40Z",
      "side": 1,
      "message": "I think O_NONBLOCK just isn\u0027t a well-tested path, and limiting its usage to where it is needed seems safer. Though I guess you could argue that as long as servicemanager doesn\u0027t make any outgoing transactions, this all boils down to the same write/read ioctl, so you don\u0027t really hit any different code paths. Really what it boils down to is - how do we build confidence in this change, and how can we make sure we\u0027re not introducing another subtle error path?",
      "parentUuid": "e7758dae_fb3eb387",
      "range": {
        "startLine": 107,
        "startChar": 32,
        "endLine": 107,
        "endChar": 52
      },
      "revId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f68e7ddb_53471a4a",
        "filename": "cmds/servicemanager/main.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2024-01-09T09:01:51Z",
      "side": 1,
      "message": "One other option is to flush the file descriptor just before talking to the driver. That way, `looper_need_return` will be true when we enter the kernel, so it\u0027s guaranteed to not go to sleep. And this codepath doesn\u0027t return EINVAL to userspace.",
      "parentUuid": "a1a1ff49_0decf43b",
      "range": {
        "startLine": 107,
        "startChar": 32,
        "endLine": 107,
        "endChar": 52
      },
      "revId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bca3b160_a72a3819",
        "filename": "cmds/servicemanager/main.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2024-01-09T09:03:01Z",
      "side": 1,
      "message": "Sorry, I meant EAGAIN.",
      "parentUuid": "f68e7ddb_53471a4a",
      "range": {
        "startLine": 107,
        "startChar": 32,
        "endLine": 107,
        "endChar": 52
      },
      "revId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a469bea_91c40eef",
        "filename": "cmds/servicemanager/main.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-01-09T19:05:59Z",
      "side": 1,
      "message": "So, only flushCommands and forget both of the changes here? That sounds safer, and I think we could merge it no problem.\n\nRe re maco, if we take the patch, we should take it like this so that we\u0027d become aware of issues during development rather than have those subtle issues happen in a case that is already 1:100,000 or similar. Otherwise, we\u0027d never get to the bottom of it.",
      "parentUuid": "bca3b160_a72a3819",
      "range": {
        "startLine": 107,
        "startChar": 32,
        "endLine": 107,
        "endChar": 52
      },
      "revId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c30ecb9_e2eec318",
        "filename": "cmds/servicemanager/main.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-01-09T23:26:21Z",
      "side": 1,
      "message": "staged this at http://r.android.com/2903184 in case that\u0027s what you mean",
      "parentUuid": "2a469bea_91c40eef",
      "range": {
        "startLine": 107,
        "startChar": 32,
        "endLine": 107,
        "endChar": 52
      },
      "revId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78ec867c_5f01c2c3",
        "filename": "cmds/servicemanager/main.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2024-01-10T10:21:08Z",
      "side": 1,
      "message": "Sorry, what I meant by \"flush\" was to trigger the [`binder_deferred_flush`](https://cs.android.com/android/kernel/superproject/+/common-android-mainline:common/drivers/android/binder.c;l\u003d5914-5934;drc\u003df955e6e98c348b65772fdc1db2a9eeac3a4c3fc8) function in the Kernel by performing the flush syscall with something along the lines of `fflush(binder_fd)`.",
      "parentUuid": "9c30ecb9_e2eec318",
      "range": {
        "startLine": 107,
        "startChar": 32,
        "endLine": 107,
        "endChar": 52
      },
      "revId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80a8796e_fc3185d1",
        "filename": "cmds/servicemanager/main.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2024-01-10T10:41:15Z",
      "side": 1,
      "message": "Re subtle issues, I think it depends how much soak time we have. If this were to end up in a release a month from now, I\u0027d be in favor of more narrowly scoping. But since we have more time, I\u0027d also be fine with the change as is. I think the more general concern I have is that this is just not a well-tested path, and even with this CL we may not find issues until well after the release (see the bug this CL was created for, which has been around for \u003e1 year?). Or O_NONBLOCK might be broken in weird ways on older kernels without us being aware of it, because it hasn\u0027t been used.\n\nEither way I do not have a good solution to that, beyond maybe adding more tests around O_NONBLOCK and running those on a variety of devices and kernels.",
      "parentUuid": "78ec867c_5f01c2c3",
      "range": {
        "startLine": 107,
        "startChar": 32,
        "endLine": 107,
        "endChar": 52
      },
      "revId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc681463_285d4451",
        "filename": "cmds/servicemanager/main.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-01-10T19:16:52Z",
      "side": 1,
      "message": "It\u0027d get 2mo+ soak rn before it\u0027s in any release branch, and then it would get more soak time. Approve? I can also run binderLibTest with O_NONBLOCK\n\nfflush takes FILE*, is there another function that would call the .flush \u003d binder_flush in the kernel? for some reason I really can\u0027t find it.",
      "parentUuid": "80a8796e_fc3185d1",
      "range": {
        "startLine": 107,
        "startChar": 32,
        "endLine": 107,
        "endChar": 52
      },
      "revId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbcef2d0_a82954ae",
        "filename": "cmds/servicemanager/main.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2024-01-10T19:51:24Z",
      "side": 1,
      "message": "Ack!",
      "parentUuid": "fc681463_285d4451",
      "range": {
        "startLine": 107,
        "startChar": 32,
        "endLine": 107,
        "endChar": 52
      },
      "revId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbc83a8a_5b990a63",
        "filename": "cmds/servicemanager/main.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-01-11T21:07:43Z",
      "side": 1,
      "message": "Though from testing, I think this will return a gross error when synchronous calls are made (in the reply) or for looper threads, I think the userspace would be okay for oneway calls, but it is going to need more work.\n\nAlice - is the set nonblock really required here? does it really matter?",
      "parentUuid": "cbcef2d0_a82954ae",
      "range": {
        "startLine": 107,
        "startChar": 32,
        "endLine": 107,
        "endChar": 52
      },
      "revId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68323da3_d354fed1",
        "filename": "cmds/servicemanager/main.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2024-01-12T08:53:35Z",
      "side": 1,
      "message": "Those are just log messages, right? I guess we could fix up libbinder to deal with this state correctly; maybe have a function inside IPCThreadState to switch to O_NONBLOCK, so it can keep track of the correct state itself?\n\nIf we don\u0027t use O_NONBLOCK, we would basically block on handlePolledCommands() here until the binder driver returns work for us to do (there doesn\u0027t necessarily have to be anything) - which means that we won\u0027t service any other file descriptors until then. I think you said on the thread there are no guarantees on the service time for ops on the other FDs, but it seems a bit fragile to depend on that (ie other folks might add stuff here in the future without realizing this call might block).",
      "parentUuid": "cbc83a8a_5b990a63",
      "range": {
        "startLine": 107,
        "startChar": 32,
        "endLine": 107,
        "endChar": 52
      },
      "revId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17c018f7_2c8b3bb1",
        "filename": "cmds/servicemanager/main.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2024-01-12T09:27:55Z",
      "side": 1,
      "message": "Yeah, we don\u0027t want the call to `handlePolledCommands` to block until a command arrives.\n\nA few different options:\n\n* Make `handlePolledCommands` work with O_NONBLOCK. \n* Push some dummy command that causes the kernel to respond with something.\n* Include some logic that understands whether a command appears in a todo list, and only call `handlePolledCommands` if this is the case.\n\nThe middle option doesn\u0027t seem feasible to me — there\u0027s no command that looks like a good choice to me. I think the feasible options are the first and last options. \n\nFor the first option, I suspect that if we have libbinder treat EAGAIN like when it returns normally and unset O_NONBLOCK when handling a transaction, then it should work fine.\n\nFor the last option, as far as I can tell, the `BC_CLEAR_DEATH_NOTIFICATION` command which is causing the problem actually _always_ triggers a response from the kernel:\n\n1. If the process has already died, then our todo list already has a `BR_DEAD_BINDER` command queued up that we will get when we call `handlePolledCommands`.\n2. If the process is still alive, then the kernel will immediately queue a `BR_CLEAR_DEATH_NOTIFICATION_DONE` to our todo list.\n\nSo we *could* just make the extra `handlePolledCommands` call if and only if we\u0027ve used `flushCommands` to write a `BC_CLEAR_DEATH_NOTIFICATION`.\n\nUltimately, the first option is probably less fragile, but the last option is probably easier to implement.",
      "parentUuid": "68323da3_d354fed1",
      "range": {
        "startLine": 107,
        "startChar": 32,
        "endLine": 107,
        "endChar": 52
      },
      "revId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b828420_a188d899",
        "filename": "cmds/servicemanager/main.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-01-12T20:44:15Z",
      "side": 1,
      "message": "\u003e other folks might add stuff here in the future without realizing this call might block\n\nWe could put a few more comments around, and we do need to add some more stress tests for this (processes dying during aidl_lazy_tests), but I think the priority is getting something in that will fix this 😊\n\n\u003e Yeah, we don\u0027t want the call to handlePolledCommands to block until a command arrives.\n\nThis is not true. It\u0027s fine here, which is what I posted in PS1. The only change it makes is around guarantees of how quickly lazy services will be shutdown. As long as it would unblock when a single command is sent, it\u0027s fine.\n\n\u003e Make handlePolledCommands work with O_NONBLOCK.\n\nI do think it does work, but it requires more testing btw. If we can avoid it and go with my PS1, I think it would be slower.\n\n\u003e So we could just make the extra handlePolledCommands call if and only if we\u0027ve used flushCommands to write a BC_CLEAR_DEATH_NOTIFICATION.\n\nI\u0027ll implement this if you don\u0027t like the first idea.",
      "parentUuid": "17c018f7_2c8b3bb1",
      "range": {
        "startLine": 107,
        "startChar": 32,
        "endLine": 107,
        "endChar": 52
      },
      "revId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91750d9c_a0998c8a",
        "filename": "cmds/servicemanager/main.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1892347
      },
      "writtenOn": "2024-01-15T09:43:50Z",
      "side": 1,
      "message": "I think there is value having O_NONBLOCK working because it\u0027s the only way to get a fully general way to call `handlePolledCommands` without having it block. But that doesn\u0027t mean we have to use that solution here. I would be fine with merging another simpler solution here and looking in O_NONBLOCK later.",
      "parentUuid": "9b828420_a188d899",
      "range": {
        "startLine": 107,
        "startChar": 32,
        "endLine": 107,
        "endChar": 52
      },
      "revId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0cb4f8d_1b7f8975",
        "filename": "cmds/servicemanager/main.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2024-01-17T00:31:00Z",
      "side": 1,
      "message": "Regarding my earlier suggestion of setting and clearing O_NONBLOCK each time here, that should only be necessary if you need to make outgoing transactions that are not one-way. service-manager should never do that anyway as it is the lowest level service we have, so setting O_NONBLOCK once and leaving it on should be fine in this case. It is not a solution that can necessarily be copied into other processes though. I think this CL is fine as a temporary workaround, but a more generic solution is needed. Either in the driver or in libbinder.",
      "parentUuid": "91750d9c_a0998c8a",
      "range": {
        "startLine": 107,
        "startChar": 32,
        "endLine": 107,
        "endChar": 52
      },
      "revId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c53bb15a_a04b07d4",
        "filename": "cmds/servicemanager/main.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-01-19T18:34:57Z",
      "side": 1,
      "message": "Carlos is investigating another epoll-based solution here. If that works, we\u0027ll go with that. Otherwise, we\u0027ll remove O_NONBLOCK. However, I haven\u0027t tried this yet because it messes with the timerfd timing here, and I would need to rewrite how lazy services work partially.",
      "parentUuid": "f0cb4f8d_1b7f8975",
      "range": {
        "startLine": 107,
        "startChar": 32,
        "endLine": 107,
        "endChar": 52
      },
      "revId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "AIDL-API-Review",
        "description": {
          "value": "Submit requirement for the AIDL-API-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "file:\"^(.*/)?aidl_api/.*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:AIDL-API-Review AND -label:AIDL-API-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"file:\"^(.*/)?aidl_api/.*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["file:\"^(.*/)?aidl_api/.*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:AIDL-API-Review AND -label:AIDL-API-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "API-Review",
        "description": {
          "value": "Submit requirement for the API-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "file:\"^(((~(xsd|xml)).*/)?)api/((~(xsd|xml)).*?)\\\\.txt$\" AND -project:device/generic/vulkan-cereal AND -project:platform/external/qemu AND -project:platform/hardware/interfaces AND -project:toolchain/go AND -project:platform/prebuilts/go/darwin-x86 AND -project:platform/prebuilts/go/linux-x86 AND -project:platform/system/tools/xsdc AND -project:platform/external/gfxstream-protocols -(project:platform/frameworks/av AND file:\".*/xmlparser/.*\") AND -(project:platform/external/icu AND file:\".*android_icu4j/api/legacy_platform/.*\") AND -(project:platform/tools/base AND file:\".*build-system/.*\") AND -(project:platform/system/libvintf AND file:\"^xsd/\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:API-Review\u003dMAX AND -label:API-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"file:\"^(((~(xsd|xml)).*/)?)api/((~(xsd|xml)).*?)\\\\.txt$\" AND -project:device/generic/vulkan-cereal AND -project:platform/external/qemu AND -project:platform/hardware/interfaces AND -project:toolchain/go AND -project:platform/prebuilts/go/darwin-x86 AND -project:platform/prebuilts/go/linux-x86 AND -project:platform/system/tools/xsdc AND -project:platform/external/gfxstream-protocols -(project:platform/frameworks/av AND file:\".*/xmlparser/.*\") AND -(project:platform/external/icu AND file:\".*android_icu4j/api/legacy_platform/.*\") AND -(project:platform/tools/base AND file:\".*build-system/.*\") AND -(project:platform/system/libvintf AND file:\"^xsd/\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["file:\"^(((~(xsd|xml)).*/)?)api/((~(xsd|xml)).*?)\\\\.txt$\"","project:device/generic/vulkan-cereal","project:platform/external/qemu","project:platform/hardware/interfaces","project:toolchain/go","project:platform/prebuilts/go/darwin-x86","project:platform/prebuilts/go/linux-x86","project:platform/system/tools/xsdc","project:platform/external/gfxstream-protocols","project:platform/system/libvintf","file:\"^xsd/\"","project:platform/frameworks/av","file:\".*/xmlparser/.*\"","project:platform/external/icu","file:\".*android_icu4j/api/legacy_platform/.*\"","project:platform/tools/base","file:\".*build-system/.*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:API-Review=MAX AND -label:API-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Build-Team-Review",
        "description": {
          "value": "Build team review is required"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-message:\"Import translations.\" AND message:\"DO NOT MERGE ANYWHERE\" AND -branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Build-Team-Review\u003dMAX AND -label:Build-Team-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-message:\"Import translations.\" AND message:\"DO NOT MERGE ANYWHERE\" AND -branch:refs/meta/config"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"Import translations.\"","message:\"DO NOT MERGE ANYWHERE\"","branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Build-Team-Review=MAX AND -label:Build-Team-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the Code-Review requirement"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "-label:Code-Review\u003dMIN AND (-is:android-cherry-pick_exemptedusers AND label:Code-Review\u003dMAX,user\u003dnon_uploader OR (is:android-cherry-pick_exemptedusers AND label:Code-Review\u003dMAX,count\u003e\u003d2) OR (label:Code-Review\u003dMAX AND (label:Exempt\u003d+1 OR (uploader:1474732 AND (project:platform/developers/docs OR project:platform/frameworks/support)))))"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-label:Code-Review=MIN AND (-is:android-cherry-pick_exemptedusers AND label:Code-Review=MAX,user=non_uploader OR (is:android-cherry-pick_exemptedusers AND label:Code-Review=MAX,count>=2) OR (label:Code-Review=MAX AND (label:Exempt=+1 OR (uploader:1474732 AND (project:platform/developers/docs OR project:platform/frameworks/support)))))"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MAX"],"failingAtoms":["label:Code-Review=MIN","is:android-cherry-pick_exemptedusers","is:android-cherry-pick_exemptedusers","label:Code-Review=MAX,count>=2","label:Exempt=+1","uploader:1474732","project:platform/developers/docs","project:platform/frameworks/support"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers)"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:android_exemptedusers","uploader:1587862","branch:\"^refs/heads/cherrypick-temp-.*\"","is:android-cherry-pick_exemptedusers"]}
      },
      "patchSetCommitId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "DrNo-Review",
        "description": {
          "value": "Submit requirement for the DrNo-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "branch:refs/heads/oreo-cts-dev OR branch:refs/heads/oreo-mr1-cts-dev OR branch:refs/heads/oreo-vts-dev OR branch:refs/heads/oreo-mr1-vts-dev OR branch:refs/heads/nougat-cts-dev OR branch:refs/heads/nougat-mr1-cts-dev OR branch:refs/heads/pie-cts-dev OR branch:refs/heads/pie-vts-dev OR branch:refs/heads/android10-tests-dev OR branch:refs/heads/android11-tests-dev OR branch:refs/heads/android12-tests-dev OR branch:refs/heads/android12L-tests-dev OR branch:refs/heads/android13-tests-dev OR branch:refs/heads/android14-tests-dev OR branch:^refs/heads/.*-gsi OR branch:refs/heads/emu-32-dev OR branch:refs/heads/emu-33-dev OR (branch:refs/heads/main AND (project:device/google/redbull OR project:platform/packages/modules/Bluetooth))"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:DrNo-Review\u003dMAX AND -label:DrNo-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"branch:refs/heads/oreo-cts-dev OR branch:refs/heads/oreo-mr1-cts-dev OR branch:refs/heads/oreo-vts-dev OR branch:refs/heads/oreo-mr1-vts-dev OR branch:refs/heads/nougat-cts-dev OR branch:refs/heads/nougat-mr1-cts-dev OR branch:refs/heads/pie-cts-dev OR branch:refs/heads/pie-vts-dev OR branch:refs/heads/android10-tests-dev OR branch:refs/heads/android11-tests-dev OR branch:refs/heads/android12-tests-dev OR branch:refs/heads/android12L-tests-dev OR branch:refs/heads/android13-tests-dev OR branch:refs/heads/android14-tests-dev OR branch:^refs/heads/.*-gsi OR branch:refs/heads/emu-32-dev OR branch:refs/heads/emu-33-dev OR (branch:refs/heads/main AND (project:device/google/redbull OR project:platform/packages/modules/Bluetooth))"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["branch:refs/heads/main"],"failingAtoms":["branch:refs/heads/oreo-cts-dev","branch:refs/heads/oreo-mr1-cts-dev","branch:refs/heads/oreo-vts-dev","branch:refs/heads/oreo-mr1-vts-dev","branch:refs/heads/nougat-cts-dev","branch:refs/heads/nougat-mr1-cts-dev","branch:refs/heads/pie-cts-dev","branch:refs/heads/pie-vts-dev","branch:refs/heads/android10-tests-dev","branch:refs/heads/android11-tests-dev","branch:refs/heads/android12-tests-dev","branch:refs/heads/android12L-tests-dev","branch:refs/heads/android13-tests-dev","branch:refs/heads/android14-tests-dev","branch:^refs/heads/.*-gsi","branch:refs/heads/emu-32-dev","branch:refs/heads/emu-33-dev","project:device/google/redbull","project:platform/packages/modules/Bluetooth"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:DrNo-Review=MAX AND -label:DrNo-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Lint",
        "description": {
          "value": "Submit requirement for the Lint requirement"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-label:Lint\u003dMIN AND (label:Lint\u003d+2 OR -label:Lint\u003d-1)"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-label:Lint=MIN AND (label:Lint=+2 OR -label:Lint=-1)"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Lint=MIN","label:Lint=+2","label:Lint=-1"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:android_exemptedusers","branch:\"^refs/heads/cherrypick-temp-.*\"","is:android-cherry-pick_exemptedusers","label:Build-Cop-Override=+1"]}
      },
      "patchSetCommitId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "NDK-API-Review",
        "description": {
          "value": "Submit requirement for the NDK-API-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "file:\"^.*\\\\.map\\\\.txt$\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:NDK-API-Review\u003dMAX AND -label:NDK-API-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"file:\"^.*\\\\.map\\\\.txt$\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["file:\"^.*\\\\.map\\\\.txt$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:NDK-API-Review=MAX AND -label:NDK-API-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Open-Source-Licensing",
        "description": {
          "value": "Submit requirement for the Open-Source-Licensing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Open-Source-Licensing\u003d0 OR (-label:Open-Source-Licensing\u003dMIN AND ((label:Open-Source-Licensing\u003dMAX AND label:Open-Source-Licensing\u003d-1) OR -label:Open-Source-Licensing\u003d-1))"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Open-Source-Licensing=0 OR (-label:Open-Source-Licensing=MIN AND ((label:Open-Source-Licensing=MAX AND label:Open-Source-Licensing=-1) OR -label:Open-Source-Licensing=-1))"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Open-Source-Licensing=0","label:Open-Source-Licensing=MIN","label:Open-Source-Licensing=MAX","label:Open-Source-Licensing=-1","label:Open-Source-Licensing=-1"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:android_exemptedusers","uploader:1587862","branch:\"^refs/heads/cherrypick-temp-.*\"","is:android-cherry-pick_exemptedusers","label:Build-Cop-Override=+1"]}
      },
      "patchSetCommitId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Presubmit-Verified",
        "description": {
          "value": "Submit requirement for the Presubmit-Verified requirement"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "-label:Presubmit-Verified\u003d-2 AND (label:Bypass-Presubmit\u003d+1 OR label:Presubmit-Verified-Together\u003d+1 OR (-label:Presubmit-Verified\u003d-1 AND (label:Presubmit-Verified\u003d+2 OR label:Presubmit-Verified\u003d+1)))"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bypass-Presubmit\u003d+2 OR is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR (label:Build-Cop-Override\u003d+1 AND is:pure-revert AND -label:Presubmit-Verified\u003d-2)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-label:Presubmit-Verified=-2 AND (label:Bypass-Presubmit=+1 OR label:Presubmit-Verified-Together=+1 OR (-label:Presubmit-Verified=-1 AND (label:Presubmit-Verified=+2 OR label:Presubmit-Verified=+1)))"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Presubmit-Verified=-2","label:Bypass-Presubmit=+1","label:Presubmit-Verified-Together=+1","label:Presubmit-Verified=-1","label:Presubmit-Verified=+2","label:Presubmit-Verified=+1"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bypass-Presubmit=+2 OR is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR (label:Build-Cop-Override=+1 AND is:pure-revert AND -label:Presubmit-Verified=-2)"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bypass-Presubmit=+2","is:android_exemptedusers","uploader:1587862","branch:\"^refs/heads/cherrypick-temp-.*\"","is:android-cherry-pick_exemptedusers","label:Build-Cop-Override=+1","is:pure-revert","label:Presubmit-Verified=-2"]}
      },
      "patchSetCommitId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Qualcomm-Review",
        "description": {
          "value": "Submit requirement for the Qualcomm-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "authoremail:\"^.*@(qti\\\\.qualcomm\\\\.com|qca\\\\.qualcomm\\\\.com|quicinc\\\\.com|qualcomm\\\\.com)\" AND -project:\"^.*/vendor/(qcom|bsp).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Qualcomm-Review\u003dMAX AND -label:Qualcomm-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"authoremail:\"^.*@(qti\\\\.qualcomm\\\\.com|qca\\\\.qualcomm\\\\.com|quicinc\\\\.com|qualcomm\\\\.com)\" AND -project:\"^.*/vendor/(qcom|bsp).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["authoremail:\"^.*@(qti\\\\.qualcomm\\\\.com|qca\\\\.qualcomm\\\\.com|quicinc\\\\.com|qualcomm\\\\.com)\"","project:\"^.*/vendor/(qcom|bsp).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Qualcomm-Review=MAX AND -label:Qualcomm-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR uploader:1587862 OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforcement-satisfied_gerrit"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "461b076602003f4f8efefe8da66d96fc3cc3ca71",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}