{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b1ccaa16_8699610b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-11-18T23:43:31Z",
      "side": 1,
      "message": "Failing due to fixed bug b/259726812",
      "revId": "3447dbc74d49de2fd726a6b6da385031247cec56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ad6041f_0740c40b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-11-19T00:43:43Z",
      "side": 1,
      "message": "b/259727738 is the test failure happening here",
      "revId": "3447dbc74d49de2fd726a6b6da385031247cec56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25d6c27a_3ab35b45",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-11-21T19:58:03Z",
      "side": 1,
      "message": "friendly ping for NDK API review",
      "revId": "3447dbc74d49de2fd726a6b6da385031247cec56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51fa542d_f4c82358",
        "filename": "libs/binder/ndk/include_platform/android/binder_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2022-11-21T20:41:52Z",
      "side": 1,
      "message": "this comment doesn\u0027t make sense to me. I think this means that a lock will be held so that `ASM_NotificationRegistration_delete` can block as necessary to avoid returning while there\u0027s a pending onRegister call? In which case it should say as much, since ASM shouldn\u0027t (and can\u0027t) delete the cookie itself.",
      "range": {
        "startLine": 114,
        "startChar": 3,
        "endLine": 115,
        "endChar": 19
      },
      "revId": "3447dbc74d49de2fd726a6b6da385031247cec56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40385b0d_af9c5b4b",
        "filename": "libs/binder/ndk/include_platform/android/binder_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 150,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2022-11-21T20:41:52Z",
      "side": 1,
      "message": "missing a \\return, and also document that I have to call _delete on it. And what if I never want to unregister? Do I just intentionally leak that handle? Or is never unregistering not a valid behavior?",
      "revId": "3447dbc74d49de2fd726a6b6da385031247cec56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64976c82_4510d01f",
        "filename": "libs/binder/ndk/include_platform/android/binder_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2022-11-21T20:41:52Z",
      "side": 1,
      "message": "mention also that there\u0027s no in-progress onRegister calls either",
      "revId": "3447dbc74d49de2fd726a6b6da385031247cec56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f4fdc04_9d06afad",
        "filename": "libs/binder/ndk/include_platform/android/binder_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-11-21T20:49:10Z",
      "side": 1,
      "message": "the lock excludes this possibility - this method will block until it finishes",
      "parentUuid": "64976c82_4510d01f",
      "revId": "3447dbc74d49de2fd726a6b6da385031247cec56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1fc61bc_9cf8e0e4",
        "filename": "libs/binder/ndk/include_platform/android/binder_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2022-11-21T20:41:52Z",
      "side": 1,
      "message": "nit, _unregister? The \"not receiving callbacks\" part of this behavior seems a bit more significant than the \"releases the token\" part.\n\nIs `NotificationRegistration` going to have other behaviors or is it just a type-safe token? `ASericeManager_unregisterForServiceNotifications(...)` would otherwise make a bit more sense as the corresponding pair to `register`.",
      "revId": "3447dbc74d49de2fd726a6b6da385031247cec56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efda8136_2baad71a",
        "filename": "libs/binder/ndk/include_platform/android/binder_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-11-21T20:49:10Z",
      "side": 1,
      "message": "The delete behavior isn\u0027t specific to servicemanager, but rather it\u0027s internal to the notification registration object. I don\u0027t believe this represents a risk.\n\nThough - one implication of this is that NotificationRegistration objects aren\u0027t reusable. If you want me to switch so they are, I think that\u0027s cool. However, this seemed like the simplest approach, and the most generic (implicit unregister on delete). If we used unregister, then we\u0027d still want another delete method. WDYT?",
      "parentUuid": "b1fc61bc_9cf8e0e4",
      "revId": "3447dbc74d49de2fd726a6b6da385031247cec56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2a57e52_a09cf2a7",
        "filename": "libs/binder/ndk/tests/libbinder_ndk_unit_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-11-18T23:36:46Z",
      "side": 1,
      "message": "is there a reason to be OK with c-style casts for `void*`? (I imagine this is going to be copy/pasted by any users of this API).",
      "range": {
        "startLine": 271,
        "startChar": 59,
        "endLine": 271,
        "endChar": 66
      },
      "revId": "3447dbc74d49de2fd726a6b6da385031247cec56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42a36a2a_d143d023",
        "filename": "libs/binder/ndk/tests/libbinder_ndk_unit_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-11-19T00:13:24Z",
      "side": 1,
      "message": "It\u0027s for concision. The risk with c-style casts is that you accidentally do a const cast in addition to reinterpret cast. void* is already the worst type :) so about anything else - the C++ cast won\u0027t help.",
      "parentUuid": "b2a57e52_a09cf2a7",
      "range": {
        "startLine": 271,
        "startChar": 59,
        "endLine": 271,
        "endChar": 66
      },
      "revId": "3447dbc74d49de2fd726a6b6da385031247cec56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbcda48e_4da3bce9",
        "filename": "libs/binder/ndk/tests/libbinder_ndk_unit_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-11-19T00:42:18Z",
      "side": 1,
      "message": "Thanks!",
      "parentUuid": "42a36a2a_d143d023",
      "range": {
        "startLine": 271,
        "startChar": 59,
        "endLine": 271,
        "endChar": 66
      },
      "revId": "3447dbc74d49de2fd726a6b6da385031247cec56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b78c7f52_b556d5bb",
        "filename": "libs/binder/ndk/tests/libbinder_ndk_unit_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 283,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-11-18T23:36:46Z",
      "side": 1,
      "message": "do we want to have a test where we check the values, then add a service with a unique name, then sleep, then check it again?",
      "range": {
        "startLine": 283,
        "startChar": 16,
        "endLine": 283,
        "endChar": 55
      },
      "revId": "3447dbc74d49de2fd726a6b6da385031247cec56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95f36f74_49627f2a",
        "filename": "libs/binder/ndk/tests/libbinder_ndk_unit_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 283,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-11-19T00:13:24Z",
      "side": 1,
      "message": "the servicemanager logic is tested elsewhere, but we could add one",
      "parentUuid": "b78c7f52_b556d5bb",
      "range": {
        "startLine": 283,
        "startChar": 16,
        "endLine": 283,
        "endChar": 55
      },
      "revId": "3447dbc74d49de2fd726a6b6da385031247cec56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6883ba29_920ff77f",
        "filename": "libs/binder/ndk/tests/libbinder_ndk_unit_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 283,
      "author": {
        "id": 1644679
      },
      "writtenOn": "2022-11-19T00:42:18Z",
      "side": 1,
      "message": "Ack. I don\u0027t mind leaving it up to the main servicemanager tests. This test case makes sure all the details are filled in.",
      "parentUuid": "95f36f74_49627f2a",
      "range": {
        "startLine": 283,
        "startChar": 16,
        "endLine": 283,
        "endChar": 55
      },
      "revId": "3447dbc74d49de2fd726a6b6da385031247cec56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}