{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "67a10b4a_1d82945e",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-02-16T23:45:04Z",
      "side": 1,
      "message": "What is this shadowing and should that be an error? Is there any reason to use the same name?",
      "range": {
        "startLine": 43,
        "startChar": 13,
        "endLine": 43,
        "endChar": 22
      },
      "revId": "1729e90887264a30f668bf3bfb5bb5b255d0a7fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26e3f498_8b7d1d4a",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2021-02-17T00:28:50Z",
      "side": 1,
      "message": "This is shadowing the standard assert macros, which isn\u0027t an error in Rust. I don\u0027t see a reason to use a different name when we very much do not want to be using the normal assert macros in this test. If there\u0027s a strong reason to rename this, we certainly can, but the normal assert and panic macros will not properly interact with the gtest driver.",
      "parentUuid": "67a10b4a_1d82945e",
      "range": {
        "startLine": 43,
        "startChar": 13,
        "endLine": 43,
        "endChar": 22
      },
      "revId": "1729e90887264a30f668bf3bfb5bb5b255d0a7fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f7a6152_672bfc9a",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-02-17T00:32:11Z",
      "side": 1,
      "message": "I mean - it should return a DEAD_OBJECT error, which should:\n- cause the test case to fail (since it would be expecting \u0027okay\u0027 or a different error)\n- have assertions in logs\n\nNo real complaint though, about switching to this style, since it should produce easier to read errors.",
      "parentUuid": "26e3f498_8b7d1d4a",
      "range": {
        "startLine": 43,
        "startChar": 13,
        "endLine": 43,
        "endChar": 22
      },
      "revId": "1729e90887264a30f668bf3bfb5bb5b255d0a7fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9186eb4f_fbf324c6",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-02-23T22:22:39Z",
      "side": 1,
      "message": "It won\u0027t return DEAD_OBJECT, the entire process will exit with failure. Both sides of the binder connection are in the same process for this test. Does gtest handle process crashes gracefully, i.e. all remaining tests run? I was under the impression that it does not.",
      "parentUuid": "0f7a6152_672bfc9a",
      "range": {
        "startLine": 43,
        "startChar": 13,
        "endLine": 43,
        "endChar": 22
      },
      "revId": "1729e90887264a30f668bf3bfb5bb5b255d0a7fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d9218e2_cdb26896",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-02-23T22:49:33Z",
      "side": 1,
      "message": "\u003e Both sides of the binder connection are in the same process for this test\n\noh - we usually fork the test into another process. Otherwise, it shouldn\u0027t be using binder, right? for in-process calls (unless you explicitly work around this), calls should be made directly, without the extra parceling and unparceling step.\n\nThis would also be required to test other functionality, like linkToDeath working",
      "parentUuid": "9186eb4f_fbf324c6",
      "range": {
        "startLine": 43,
        "startChar": 13,
        "endLine": 43,
        "endChar": 22
      },
      "revId": "1729e90887264a30f668bf3bfb5bb5b255d0a7fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9216daa9_65ad2bfd",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-02-24T01:37:26Z",
      "side": 1,
      "message": "The other binder rust tests do use separate processes, but I didn\u0027t think the extra complexity was worthwhile for this test considering that it is purely testing serialization. I can revisit that if it really is worth doing.",
      "parentUuid": "7d9218e2_cdb26896",
      "range": {
        "startLine": 43,
        "startChar": 13,
        "endLine": 43,
        "endChar": 22
      },
      "revId": "1729e90887264a30f668bf3bfb5bb5b255d0a7fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80aa75be_c63aeaef",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-02-24T19:09:59Z",
      "side": 1,
      "message": "ack",
      "parentUuid": "9216daa9_65ad2bfd",
      "range": {
        "startLine": 43,
        "startChar": 13,
        "endLine": 43,
        "endChar": 22
      },
      "revId": "1729e90887264a30f668bf3bfb5bb5b255d0a7fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c35fcbd_62e0cc4a",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-02-16T23:45:04Z",
      "side": 1,
      "message": "do we need the assertion here, actually? and I\u0027m curious, should we also test if there is an abort? (TEST_DIE?)",
      "revId": "1729e90887264a30f668bf3bfb5bb5b255d0a7fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58f2ae33_90993332",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2021-02-17T00:28:50Z",
      "side": 1,
      "message": "I\u0027m testing that assert failures propagate back to C++ here, since all other asserts should pass. This is just a sanity check since it failed to propagate when I was initially developing these tests and I wanted to make sure that wouldn\u0027t ever happen.\n\nWe can\u0027t actually catch and return a proper error to C++ if there is a panic. I used to do that, but we changed the build system to build Rust with panic\u003dabort rather than unwind, so there is no opportunity to recover.",
      "parentUuid": "3c35fcbd_62e0cc4a",
      "revId": "1729e90887264a30f668bf3bfb5bb5b255d0a7fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aca3a294_fc33ca6a",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-02-17T00:32:11Z",
      "side": 1,
      "message": "Yeah - but we should make sure the binder driver can handle this case as well and we should test it (nothing should break here for Rust, but still). If the process dies, we should still get an error back",
      "parentUuid": "58f2ae33_90993332",
      "revId": "1729e90887264a30f668bf3bfb5bb5b255d0a7fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65a68cc0_7a6135ec",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-02-23T22:22:39Z",
      "side": 1,
      "message": "I think we would have to explicitly use a death test in gtest to catch this if we allow the Rust side to panic.",
      "parentUuid": "aca3a294_fc33ca6a",
      "revId": "1729e90887264a30f668bf3bfb5bb5b255d0a7fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5486c1b_bdf3488f",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-02-25T01:29:08Z",
      "side": 1,
      "message": "That is if it\u0027s it\u0027s in the same process, yeah. For testing another process though - let it crash as-is",
      "parentUuid": "65a68cc0_7a6135ec",
      "revId": "1729e90887264a30f668bf3bfb5bb5b255d0a7fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "caaeeae3_3b613384",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2021-02-26T22:46:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b5486c1b_bdf3488f",
      "revId": "1729e90887264a30f668bf3bfb5bb5b255d0a7fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}