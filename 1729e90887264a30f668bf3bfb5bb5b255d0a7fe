{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "67a10b4a_1d82945e",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-02-16T23:45:04Z",
      "side": 1,
      "message": "What is this shadowing and should that be an error? Is there any reason to use the same name?",
      "range": {
        "startLine": 43,
        "startChar": 13,
        "endLine": 43,
        "endChar": 22
      },
      "revId": "1729e90887264a30f668bf3bfb5bb5b255d0a7fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26e3f498_8b7d1d4a",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2021-02-17T00:28:50Z",
      "side": 1,
      "message": "This is shadowing the standard assert macros, which isn\u0027t an error in Rust. I don\u0027t see a reason to use a different name when we very much do not want to be using the normal assert macros in this test. If there\u0027s a strong reason to rename this, we certainly can, but the normal assert and panic macros will not properly interact with the gtest driver.",
      "parentUuid": "67a10b4a_1d82945e",
      "range": {
        "startLine": 43,
        "startChar": 13,
        "endLine": 43,
        "endChar": 22
      },
      "revId": "1729e90887264a30f668bf3bfb5bb5b255d0a7fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c35fcbd_62e0cc4a",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-02-16T23:45:04Z",
      "side": 1,
      "message": "do we need the assertion here, actually? and I\u0027m curious, should we also test if there is an abort? (TEST_DIE?)",
      "revId": "1729e90887264a30f668bf3bfb5bb5b255d0a7fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58f2ae33_90993332",
        "filename": "libs/binder/rust/tests/serialization.rs",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2021-02-17T00:28:50Z",
      "side": 1,
      "message": "I\u0027m testing that assert failures propagate back to C++ here, since all other asserts should pass. This is just a sanity check since it failed to propagate when I was initially developing these tests and I wanted to make sure that wouldn\u0027t ever happen.\n\nWe can\u0027t actually catch and return a proper error to C++ if there is a panic. I used to do that, but we changed the build system to build Rust with panic\u003dabort rather than unwind, so there is no opportunity to recover.",
      "parentUuid": "3c35fcbd_62e0cc4a",
      "revId": "1729e90887264a30f668bf3bfb5bb5b255d0a7fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}