{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "553fb28f_256e0a19",
        "filename": "libs/binder/tests/parcel_fuzzer/binder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-05-23T21:13:52Z",
      "side": 1,
      "message": "// code intentionally aborts on values larger than int32 max",
      "revId": "5e16ce8e6d0ec5f6bd75054ef891555de361bbc7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "146acc88_4e0dcb64",
        "filename": "libs/binder/tests/parcel_fuzzer/binder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-23T21:52:31Z",
      "side": 1,
      "message": "(there are 3 copies of this comment btw, so making them all the same)\n\nI think it should be clear from context (for instance, also from context, we assume it\u0027s setDataPosition aborting, not ConsumeIntegralInRange. If you feel strongly about this, could you specify what \u0027larger than int32 max\u0027 disambiguates?",
      "parentUuid": "553fb28f_256e0a19",
      "revId": "5e16ce8e6d0ec5f6bd75054ef891555de361bbc7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43235343_ef9220e4",
        "filename": "libs/binder/tests/parcel_fuzzer/binder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-23T21:54:22Z",
      "side": 1,
      "message": ").\n\nOr are you asking to emphasize intentionality? Any accidental abort should be a bug.",
      "parentUuid": "146acc88_4e0dcb64",
      "revId": "5e16ce8e6d0ec5f6bd75054ef891555de361bbc7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95674187_51e45ee6",
        "filename": "libs/binder/tests/parcel_fuzzer/binder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-05-23T22:44:47Z",
      "side": 1,
      "message": "I don\u0027t feel strongly, just nit picking\n\n\u003e Or are you asking to emphasize intentionality? Any accidental abort should be a bug.\n\nYeah. Makes sense but maybe more steps of inference required than I tend to prefer",
      "parentUuid": "43235343_ef9220e4",
      "revId": "5e16ce8e6d0ec5f6bd75054ef891555de361bbc7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d03cb7c5_479c38ff",
        "filename": "libs/binder/tests/parcel_fuzzer/binder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-23T22:51:53Z",
      "side": 1,
      "message": "Right, thanks - the curse of knowledge here is that no fuzzer should have \"if (! \u003cwould be an abort\u003e) {...}\" when the abort is unintentional. I\u0027ll update it if I need to kick TH again.",
      "parentUuid": "95674187_51e45ee6",
      "revId": "5e16ce8e6d0ec5f6bd75054ef891555de361bbc7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e40af67_8f1b6e8e",
        "filename": "libs/binder/tests/parcel_fuzzer/binder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-05-23T21:13:52Z",
      "side": 1,
      "message": "not obvious what \"big enough\" means. maybe \"upper bound chosen to avoid slow allocations\"",
      "revId": "5e16ce8e6d0ec5f6bd75054ef891555de361bbc7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7422cc2e_00a3d2db",
        "filename": "libs/binder/tests/parcel_fuzzer/binder.cpp",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-23T21:52:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e40af67_8f1b6e8e",
      "revId": "5e16ce8e6d0ec5f6bd75054ef891555de361bbc7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f26b8e9_66984364",
        "filename": "libs/binder/tests/parcel_fuzzer/binder_ndk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2022-05-23T21:13:52Z",
      "side": 1,
      "message": "maybe randomize both offset and length",
      "range": {
        "startLine": 112,
        "startChar": 77,
        "endLine": 112,
        "endChar": 78
      },
      "revId": "5e16ce8e6d0ec5f6bd75054ef891555de361bbc7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43445e96_5c87250b",
        "filename": "libs/binder/tests/parcel_fuzzer/binder_ndk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-23T21:52:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f26b8e9_66984364",
      "range": {
        "startLine": 112,
        "startChar": 77,
        "endLine": 112,
        "endChar": 78
      },
      "revId": "5e16ce8e6d0ec5f6bd75054ef891555de361bbc7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}