{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8aa55a8d_fbd388ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2022-08-15T14:09:55Z",
      "side": 1,
      "message": "Ping, can I get a +2 for this?",
      "revId": "e2f88ab63d837f2de002cae8b87335d3ed9d9a79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99c9f4f1_4fbf8a23",
        "filename": "libs/binder/rust/rpcbinder/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-09T17:49:19Z",
      "side": 1,
      "message": "libbinder_rpc_rs?",
      "range": {
        "startLine": 2,
        "startChar": 11,
        "endLine": 2,
        "endChar": 23
      },
      "revId": "e2f88ab63d837f2de002cae8b87335d3ed9d9a79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8288928_a4bf512b",
        "filename": "libs/binder/rust/rpcbinder/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-09T17:49:41Z",
      "side": 1,
      "message": "oooh - also\n\n/libs/biner/rust/rpc/Android.bp\n\n(s/rpcbinder/rpc/ in the filename?)",
      "parentUuid": "99c9f4f1_4fbf8a23",
      "range": {
        "startLine": 2,
        "startChar": 11,
        "endLine": 2,
        "endChar": 23
      },
      "revId": "e2f88ab63d837f2de002cae8b87335d3ed9d9a79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0895a55c_f700730a",
        "filename": "libs/binder/rust/rpcbinder/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2022-08-10T08:47:52Z",
      "side": 1,
      "message": "The general convention that Android follows for Rust library crates is that the directory has the same name as the crate, and the build target is the crate name prefixed with `lib`. There are some exceptions to this where that target name is already taken (in which case the `_rs` suffix is added), but I\u0027d prefer to keen the convention where possible.\n\nWe could call it binderrpc or binder_rpc if you prefer that to rpcbinder; I\u0027d just seen this called RPC Binder elsewhere so I thought that was the best name.",
      "parentUuid": "c8288928_a4bf512b",
      "range": {
        "startLine": 2,
        "startChar": 11,
        "endLine": 2,
        "endChar": 23
      },
      "revId": "e2f88ab63d837f2de002cae8b87335d3ed9d9a79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94ee7d2f_0e80f404",
        "filename": "libs/binder/rust/rpcbinder/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-16T22:32:02Z",
      "side": 1,
      "message": "if we wanted a librpcbinder library, then should we use \u0027librpcbinder_cpp\u0027 because the rust name is already taken?",
      "parentUuid": "0895a55c_f700730a",
      "range": {
        "startLine": 2,
        "startChar": 11,
        "endLine": 2,
        "endChar": 23
      },
      "revId": "e2f88ab63d837f2de002cae8b87335d3ed9d9a79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fa0d708_47ac6d14",
        "filename": "libs/binder/rust/rpcbinder/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2022-08-17T09:23:02Z",
      "side": 1,
      "message": "If you like. Or I can call this `librpcbinder_rs` if you prefer. My point is just that the target name should match the crate name, whatever that is.",
      "parentUuid": "94ee7d2f_0e80f404",
      "range": {
        "startLine": 2,
        "startChar": 11,
        "endLine": 2,
        "endChar": 23
      },
      "revId": "e2f88ab63d837f2de002cae8b87335d3ed9d9a79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b41217f_7f180363",
        "filename": "libs/binder/rust/rpcbinder/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-18T23:54:45Z",
      "side": 1,
      "message": "I do like that more - if you\u0027re okay with it",
      "parentUuid": "1fa0d708_47ac6d14",
      "range": {
        "startLine": 2,
        "startChar": 11,
        "endLine": 2,
        "endChar": 23
      },
      "revId": "e2f88ab63d837f2de002cae8b87335d3ed9d9a79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ea5faa6_c82e136f",
        "filename": "libs/binder/rust/rpcbinder/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2022-08-19T12:31:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b41217f_7f180363",
      "range": {
        "startLine": 2,
        "startChar": 11,
        "endLine": 2,
        "endChar": 23
      },
      "revId": "e2f88ab63d837f2de002cae8b87335d3ed9d9a79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08767d3a_402b7b3e",
        "filename": "libs/binder/rust/rpcbinder/src/client.rs",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2022-08-09T20:38:09Z",
      "side": 1,
      "message": "Nit: Not this CL, but it might be worth it at some point in the future to blocklist generation of the `AIBinder` type and use `--raw-line` to import the `AIBinder` definition from the other bindgen type. That would avoid this and other similar casts.",
      "range": {
        "startLine": 30,
        "startChar": 77,
        "endLine": 30,
        "endChar": 93
      },
      "revId": "e2f88ab63d837f2de002cae8b87335d3ed9d9a79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "124899e3_156f4427",
        "filename": "libs/binder/rust/rpcbinder/src/client.rs",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2022-08-23T15:31:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "08767d3a_402b7b3e",
      "range": {
        "startLine": 30,
        "startChar": 77,
        "endLine": 30,
        "endChar": 93
      },
      "revId": "e2f88ab63d837f2de002cae8b87335d3ed9d9a79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89879677_2873e548",
        "filename": "libs/binder/rust/rpcbinder/src/client.rs",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-08-09T17:50:08Z",
      "side": 1,
      "message": "can we import the version from here:\nhttps://android-review.googlesource.com/c/platform/frameworks/native/+/2177903",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 93,
        "endChar": 0
      },
      "revId": "e2f88ab63d837f2de002cae8b87335d3ed9d9a79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15273e72_54ec3e26",
        "filename": "libs/binder/rust/rpcbinder/src/client.rs",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2022-08-10T08:47:52Z",
      "side": 1,
      "message": "That\u0027s not exposed publicly, and I don\u0027t think it should be.",
      "parentUuid": "89879677_2873e548",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 93,
        "endChar": 0
      },
      "revId": "e2f88ab63d837f2de002cae8b87335d3ed9d9a79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e30d1613_fb88edb5",
        "filename": "libs/binder/rust/rpcbinder/src/server.rs",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2022-08-09T20:38:09Z",
      "side": 1,
      "message": "Why is this API designed with a receiver and the other two aren\u0027t? It seems a bit odd - is it specifically to accommodate the `FnOnce` bound? If so, why is it worth doing here if it\u0027s not for the other two?",
      "revId": "e2f88ab63d837f2de002cae8b87335d3ed9d9a79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7faf643_18a49f09",
        "filename": "libs/binder/rust/rpcbinder/src/server.rs",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2022-08-09T21:00:08Z",
      "side": 1,
      "message": "Nevermind, I figured out that the other two call their argument multiple times, so `FnOnce` is not what you want. It\u0027s a shame the API doesn\u0027t have more documentation on what\u0027s being provided, but I suppose it\u0027s unstable.",
      "parentUuid": "e30d1613_fb88edb5",
      "revId": "e2f88ab63d837f2de002cae8b87335d3ed9d9a79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c541d5c7_6c793a45",
        "filename": "libs/binder/rust/rpcbinder/src/server.rs",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2022-08-09T20:38:09Z",
      "side": 1,
      "message": "This is safe afaict, but:\n1. It doesn\u0027t just need to be within self lifetime, it needs to be gone before RunRpcSererCallback returns, otherwise `\u0026mut self` comes back into scope and you trigger aliasing UB.\n2. It\u0027s also important to note that it doesn\u0027t retain a reference to `param`.\n\nIt may be worth being more explicit.",
      "revId": "e2f88ab63d837f2de002cae8b87335d3ed9d9a79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13f9984a_01f23031",
        "filename": "libs/binder/rust/rpcbinder/src/server.rs",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2022-08-15T15:52:42Z",
      "side": 1,
      "message": "That\u0027s what I meant by \"does not retain a reference\". Is this clearer?",
      "parentUuid": "c541d5c7_6c793a45",
      "revId": "e2f88ab63d837f2de002cae8b87335d3ed9d9a79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}