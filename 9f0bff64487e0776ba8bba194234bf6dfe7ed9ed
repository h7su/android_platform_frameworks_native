{
  "comments": [
    {
      "key": {
        "uuid": "c1c3b18d_e60bbb2f",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-05-31T05:07:30Z",
      "side": 1,
      "message": "Can we just expose this stuff in a header?",
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68e37f0d_debe5d25",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1013984
      },
      "writtenOn": "2017-05-31T04:57:45Z",
      "side": 1,
      "message": "const std::string\u0026 ?",
      "range": {
        "startLine": 121,
        "startChar": 54,
        "endLine": 121,
        "endChar": 60
      },
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8404831c_129b863a",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1013984
      },
      "writtenOn": "2017-05-31T04:57:45Z",
      "side": 1,
      "message": "We\u0027re using camel-case for functions now, could you please use GetDumpFds()?",
      "range": {
        "startLine": 121,
        "startChar": 30,
        "endLine": 121,
        "endChar": 42
      },
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8c2fa02_f3920f3c",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 1013984
      },
      "writtenOn": "2017-05-31T04:57:45Z",
      "side": 1,
      "message": "could you please declare the constants in the top of the file? Otherwise it\u0027s hard to find them later.\n\nAlso, shouldn\u0027t it be kThirtyMinutesAgo?",
      "range": {
        "startLine": 122,
        "startChar": 24,
        "endLine": 122,
        "endChar": 42
      },
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17f599fe_b992cc06",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-05-31T05:07:30Z",
      "side": 1,
      "message": "nit: ()",
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e8ae883_b48621e7",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1013984
      },
      "writtenOn": "2017-05-31T04:57:45Z",
      "side": 1,
      "message": "please use \\n in the MYLOGx macros because they\u0027re also sent to stderr",
      "range": {
        "startLine": 133,
        "startChar": 48,
        "endLine": 133,
        "endChar": 49
      },
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0fd26ad9_4cc6ced3",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-05-31T05:07:30Z",
      "side": 1,
      "message": "Make this field a unique_fd instead?",
      "range": {
        "startLine": 157,
        "startChar": 18,
        "endLine": 157,
        "endChar": 31
      },
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f4f93b5_f1ff5e61",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 1
      },
      "lineNbr": 175,
      "author": {
        "id": 1013984
      },
      "writtenOn": "2017-05-31T04:57:45Z",
      "side": 1,
      "message": "zip_writer !\u003d nullptr\n\n(I know technically it\u0027s the same, but we\u0027re using this approach now for readability)",
      "range": {
        "startLine": 175,
        "startChar": 12,
        "endLine": 175,
        "endChar": 22
      },
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff58fd08_6155f4da",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 1013984
      },
      "writtenOn": "2017-05-31T04:57:45Z",
      "side": 1,
      "message": "This function is gone on our internal master, it belongs to DumpstateUtil.h , and you will have a hard time merging this CL.\n\nI think it would be better to do it on our master, and push back to AOSP later (the other option is to pull all dumpstate changes to AOSP, but I\u0027m not sure how easy that would be).",
      "range": {
        "startLine": 176,
        "startChar": 17,
        "endLine": 176,
        "endChar": 38
      },
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "342761fa_e4042289",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-05-31T05:07:30Z",
      "side": 1,
      "message": "(and this is why dump_file_from_fd should take a unique_fd :-)",
      "range": {
        "startLine": 183,
        "startChar": 8,
        "endLine": 183,
        "endChar": 13
      },
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8f5b0c0_74acf13a",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 1
      },
      "lineNbr": 992,
      "author": {
        "id": 1013984
      },
      "writtenOn": "2017-05-31T04:57:45Z",
      "side": 1,
      "message": "shouldn\u0027t we use the new, C++-based property API?",
      "range": {
        "startLine": 992,
        "startChar": 4,
        "endLine": 992,
        "endChar": 16
      },
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6381101_8b88d01d",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 1
      },
      "lineNbr": 993,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-05-31T05:07:30Z",
      "side": 1,
      "message": "I prefer \"anr_traces_path[0] \u003d\u003d \u0027\\0\u0027\" to be explicit about the types, but I don\u0027t care that much.",
      "range": {
        "startLine": 993,
        "startChar": 8,
        "endLine": 993,
        "endChar": 27
      },
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b0af50d_d1325bcf",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1011,
      "author": {
        "id": 1013984
      },
      "writtenOn": "2017-05-31T04:57:45Z",
      "side": 1,
      "message": "!\u003d nullptr",
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab810a77_6b546bb0",
        "filename": "cmds/dumpstate/dumpstate.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1026,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-05-31T05:07:30Z",
      "side": 1,
      "message": "Make it take a unique_fd instead?",
      "range": {
        "startLine": 1026,
        "startChar": 21,
        "endLine": 1026,
        "endChar": 52
      },
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e759004_af6ee675",
        "filename": "cmds/dumpstate/utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 970,
      "author": {
        "id": 1013984
      },
      "writtenOn": "2017-05-31T04:57:45Z",
      "side": 1,
      "message": "DumpTraces.\nAlso, can it take a const std::string instead?",
      "range": {
        "startLine": 970,
        "startChar": 12,
        "endLine": 970,
        "endChar": 49
      },
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba362c3f_3a414197",
        "filename": "cmds/dumpstate/utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 970,
      "author": {
        "id": 1013984
      },
      "writtenOn": "2017-05-31T04:57:45Z",
      "side": 1,
      "message": "FYI, the utils.cpp / dumpstate.h is deprecated - we\u0027re moving \"common\" code (that can be used by device-level dumpstate) into DumpstateUtils.h, and the \"private\" code into dumpstate.cpp itself (or DumpstateInternals.h when it can be used in more than one place in the dramework code).",
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75af65fc_6ef0b751",
        "filename": "cmds/dumpstate/utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 980,
      "author": {
        "id": 1013984
      },
      "writtenOn": "2017-05-31T04:57:45Z",
      "side": 1,
      "message": "!\u003d nullptr (same below :-)",
      "range": {
        "startLine": 980,
        "startChar": 23,
        "endLine": 980,
        "endChar": 24
      },
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf0c8f0f_42cff016",
        "filename": "cmds/dumpstate/utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 984,
      "author": {
        "id": 1013984
      },
      "writtenOn": "2017-05-31T04:57:45Z",
      "side": 1,
      "message": "C++ API?",
      "range": {
        "startLine": 984,
        "startChar": 4,
        "endLine": 984,
        "endChar": 16
      },
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87129092_b2a6b877",
        "filename": "cmds/dumpstate/utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 996,
      "author": {
        "id": 1013984
      },
      "writtenOn": "2017-05-31T04:57:45Z",
      "side": 1,
      "message": "optional: I wonder if we should encapsualte this logic int oa getCmdLine() sort of function..",
      "range": {
        "startLine": 996,
        "startChar": 24,
        "endLine": 996,
        "endChar": 40
      },
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "083186ca_08cc131c",
        "filename": "cmds/dumpstate/utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1009,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-05-31T05:07:30Z",
      "side": 1,
      "message": "Why not just std::string? You can get a char* from it via \u0026foo[0]. (or just .data(), in c++17)",
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2bac68c_f367ab30",
        "filename": "cmds/dumpstate/utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1041,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-05-31T05:07:30Z",
      "side": 1,
      "message": "This is an oddly specific type. Just use int?",
      "range": {
        "startLine": 1041,
        "startChar": 4,
        "endLine": 1041,
        "endChar": 12
      },
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3110b54_2a09af82",
        "filename": "cmds/dumpstate/utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1042,
      "author": {
        "id": 1013984
      },
      "writtenOn": "2017-05-31T04:57:45Z",
      "side": 1,
      "message": "bool dalvik_found ?",
      "range": {
        "startLine": 1042,
        "startChar": 25,
        "endLine": 1042,
        "endChar": 26
      },
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b720ce1a_25fe53bd",
        "filename": "cmds/dumpstate/utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1102,
      "author": {
        "id": 1013984
      },
      "writtenOn": "2017-05-31T04:57:45Z",
      "side": 1,
      "message": "if you change to bool , no need to compare to 0",
      "range": {
        "startLine": 1102,
        "startChar": 8,
        "endLine": 1102,
        "endChar": 20
      },
      "revId": "9f0bff64487e0776ba8bba194234bf6dfe7ed9ed",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}