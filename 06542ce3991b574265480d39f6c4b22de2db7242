{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a6137067_36a9a6bd",
        "filename": "libs/binder/RpcSession.cpp",
        "patchSetId": 6
      },
      "lineNbr": 117,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-07-22T14:28:02Z",
      "side": 1,
      "message": "This description doesn\u0027t seem to match with the condition incoming \u0026\u0026 i \u003d\u003d 0.",
      "range": {
        "startLine": 117,
        "startChar": 40,
        "endLine": 117,
        "endChar": 77
      },
      "revId": "06542ce3991b574265480d39f6c4b22de2db7242",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb13a099_be736b14",
        "filename": "libs/binder/RpcSession.cpp",
        "patchSetId": 6
      },
      "lineNbr": 117,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-07-22T21:09:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a6137067_36a9a6bd",
      "range": {
        "startLine": 117,
        "startChar": 40,
        "endLine": 117,
        "endChar": 77
      },
      "revId": "06542ce3991b574265480d39f6c4b22de2db7242",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba047c23_ea536a44",
        "filename": "libs/binder/RpcSession.cpp",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-07-22T14:28:02Z",
      "side": 1,
      "message": "When this function returns false for a connection, shouldn\u0027t we remove the previous connections that were added by add[Incoming|Outgoing]Connection?",
      "range": {
        "startLine": 118,
        "startChar": 66,
        "endLine": 118,
        "endChar": 79
      },
      "revId": "06542ce3991b574265480d39f6c4b22de2db7242",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11c1d737_56917559",
        "filename": "libs/binder/RpcSession.cpp",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-07-22T21:09:31Z",
      "side": 1,
      "message": "Yes, this is also an existing bug in the other connection setup codes. I\u0027ve added this to b/189955605#comment1 (currently, the result is that the object will be invalidated. If you try to setup again, it\u0027ll abort)",
      "parentUuid": "ba047c23_ea536a44",
      "range": {
        "startLine": 118,
        "startChar": 66,
        "endLine": 118,
        "endChar": 79
      },
      "revId": "06542ce3991b574265480d39f6c4b22de2db7242",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65bedf1f_1271a276",
        "filename": "libs/binder/RpcSession.cpp",
        "patchSetId": 6
      },
      "lineNbr": 444,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-07-22T14:28:02Z",
      "side": 1,
      "message": "Why not mSetupMode? Is it to run addOutgoingConnection for the initial connection? Why do we need to run it even when SetupMode is ACCEPT_ONLY? Can\u0027t we do that after (or during) attachAcceptedConnections?\n\nThis part makes it impossible to get these connections from outside of libbinder.",
      "range": {
        "startLine": 444,
        "startChar": 80,
        "endLine": 444,
        "endChar": 95
      },
      "revId": "06542ce3991b574265480d39f6c4b22de2db7242",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5f565ae_6928732e",
        "filename": "libs/binder/RpcSession.cpp",
        "patchSetId": 6
      },
      "lineNbr": 444,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-07-22T21:09:31Z",
      "side": 1,
      "message": "correct, it\u0027s because we need the connection in order to:\n- getRemoteMaxThreads - get the # of threads that is supported by the server, currently we setup a connection for each (b/189955605 is to give the client more control here)\n- readId - get the session ID (this allows the additional connections to be associated with the first connection)",
      "parentUuid": "65bedf1f_1271a276",
      "range": {
        "startLine": 444,
        "startChar": 80,
        "endLine": 444,
        "endChar": 95
      },
      "revId": "06542ce3991b574265480d39f6c4b22de2db7242",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0026146a_da884646",
        "filename": "libs/binder/RpcSession.cpp",
        "patchSetId": 6
      },
      "lineNbr": 444,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-07-23T01:09:36Z",
      "side": 1,
      "message": "I will close this thread and comment on the other one.",
      "parentUuid": "a5f565ae_6928732e",
      "range": {
        "startLine": 444,
        "startChar": 80,
        "endLine": 444,
        "endChar": 95
      },
      "revId": "06542ce3991b574265480d39f6c4b22de2db7242",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "987da169_e0c648af",
        "filename": "libs/binder/include/binder/RpcSession.h",
        "patchSetId": 6
      },
      "lineNbr": 112,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-07-22T14:28:02Z",
      "side": 1,
      "message": "Why is this the only way to create AcceptedConnections? I wish we can attach to any set of connections that are established in any way (e.g. outside of libbinder).",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 112,
        "endChar": 65
      },
      "revId": "06542ce3991b574265480d39f6c4b22de2db7242",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4d278c5_cd2d7648",
        "filename": "libs/binder/include/binder/RpcSession.h",
        "patchSetId": 6
      },
      "lineNbr": 112,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-07-22T21:09:31Z",
      "side": 1,
      "message": "That is the idea here:\n- use libbinder to create connections (this protocol defines how many exceptions are actually needed, and it needs to pass the session ID in order to make sure the server associates all the connections together)\n- release the connections\n- send them across process\n- reattach them to a new RpcSession object",
      "parentUuid": "987da169_e0c648af",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 112,
        "endChar": 65
      },
      "revId": "06542ce3991b574265480d39f6c4b22de2db7242",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94aabcba_f802f7af",
        "filename": "libs/binder/include/binder/RpcSession.h",
        "patchSetId": 6
      },
      "lineNbr": 112,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-07-22T21:12:12Z",
      "side": 1,
      "message": "btw - I actually think it\u0027s okay to require libbinder to create the connections. This allows some parts of the thread creation logic and associated protocols to remain an implementation detail (until these FDs are passed across an update boundary, but we don\u0027t expect this), but see the other comment, the real show-stopper here is the session ID association logic.",
      "parentUuid": "c4d278c5_cd2d7648",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 112,
        "endChar": 65
      },
      "revId": "06542ce3991b574265480d39f6c4b22de2db7242",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe03c898_45fb8c86",
        "filename": "libs/binder/include/binder/RpcSession.h",
        "patchSetId": 6
      },
      "lineNbr": 112,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-07-23T01:09:36Z",
      "side": 1,
      "message": "Why do the processes that originally created the connections need to care about the protocols and threads? The processes are not the ones that will actually do the binder transactions. Can\u0027t they just create a number of connections that act as dumb pipes, and then send them to the actual processes that will do the binder calls over the connections?\n\nMy mental model is as follows:\n\n```\n|-----------Host VM--------------------|-------------Guest VM----------------|\n\nC \u003c----local binder---\u003e     V                     M \u003c---local binder---\u003e   S\n```\n\nC: a binder client process\nV: virtualization service\nM: microdroid manager\nS: a binder server process\n\nInitially, C and S are not connected. They can only talk to either V or M using the local binder within their VMs.\n\n1. S tells M that it can provide a service with a specific name (let\u0027s call it \"foo\").\n\n2. C tells V that it wants to talk with the \"foo\" service in the guest VM whose cid is 100. That (100, foo) uniquely identifies the service.\n\n3. During the steps 1 and 2, S and C also let M and V know how many connections they can serve. Let C(S) and C(C) be the num of connections towards S and C, respectively.\n\n4. V and M creates C(S) + C(C) vsock connections. Note that V and M don\u0027t need to have that many \"threads\" in them. They don\u0027t do any initialization over the connections. They just make dumb connections and that\u0027s it. In the example below, C(S) \u003d 2 and C(C) \u003d 2.\n\n```\n|-----------Host VM--------------------|-------------Guest VM----------------|\n\nC \u003c----local binder---\u003e     V   \u003c---vsock----\u003e    M \u003c---local binder---\u003e   S\n                                \u003c---vsock----\u003e\n                                \u003c---vsock----\u003e\n                                \u003c---vsock----\u003e\n```\n\n5. V returns the two connection sets (ParcelFileDescriptor[] incoming, ParcelFileDescriptor[] outgoing) back to C.\n\n6. M does the same for S.\n\n7. C and S attach the connections to their RpcSession objects. The initialization of the session object, and the creation of threads happens at this moment.\n\n```\n|-----------Host VM--------------------|-------------Guest VM----------------|\n\nC \u003c----local binder---\u003e     V                      M \u003c---local binder---\u003e   S\n  \n  \u003c----------------------outgoing connection over vsock   -----------------\u003e\n  \u003c----------------------outgoing connection over vsock   -----------------\u003e\n  \u003c----------------------incoming connection over vsock   -----------------\u003e\n  \u003c----------------------incoming connection over vsock   -----------------\u003e\n```\n\nThe steps 1 to 6 are out of the scope of this change.",
      "parentUuid": "94aabcba_f802f7af",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 112,
        "endChar": 65
      },
      "revId": "06542ce3991b574265480d39f6c4b22de2db7242",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e6c99cf_d6bf54c2",
        "filename": "libs/binder/include/binder/RpcSession.h",
        "patchSetId": 6
      },
      "lineNbr": 112,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-07-23T02:30:09Z",
      "side": 1,
      "message": "Yeah, I suppose we could do this too. I could add some server-level transactions that expose the thread counts (though I need to think how this might interact with TLS). The main benefit would be having simpler FDs so the libbinder dependency isn\u0027t needed. Though, also note if we use libbinder, we could change the logic to be like this under the existing APIs. Let me know if you have any other thoughts, but I\u0027ll try tomorrow.",
      "parentUuid": "fe03c898_45fb8c86",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 112,
        "endChar": 65
      },
      "revId": "06542ce3991b574265480d39f6c4b22de2db7242",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89679dbb_f3ae47cd",
        "filename": "libs/binder/include/binder/RpcSession.h",
        "patchSetId": 6
      },
      "lineNbr": 112,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-07-23T05:08:43Z",
      "side": 1,
      "message": "The steps 1-6 could also be a part of libbinder, if you think the pattern will be common. I however think that it deserves a separate CL.\n\nMy concerns with the current CL were that 1) it makes it impossible to use FDs that are created outside of libbinder, and 2) only clients can release their accepted connections to other clients; servers can\u0027t do the same.",
      "parentUuid": "6e6c99cf_d6bf54c2",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 112,
        "endChar": 65
      },
      "revId": "06542ce3991b574265480d39f6c4b22de2db7242",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}