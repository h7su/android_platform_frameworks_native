{
  "comments": [
    {
      "key": {
        "uuid": "5d04c9ea_bb733a76",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-07-17T21:07:31Z",
      "side": 1,
      "message": "just nits",
      "revId": "4f72b53981a4bbd7431c62d4bb647cff0174a06f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07271ed5_cd405821",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 4
      },
      "lineNbr": 288,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-07-17T21:07:31Z",
      "side": 1,
      "message": "Define constants for these. MAX_NICE etc.?\n\nsame below",
      "range": {
        "startLine": 288,
        "startChar": 37,
        "endLine": 288,
        "endChar": 40
      },
      "revId": "4f72b53981a4bbd7431c62d4bb647cff0174a06f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a9c2b9c_afc082b7",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 4
      },
      "lineNbr": 288,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T21:27:11Z",
      "side": 1,
      "message": "sched.h doesn\u0027t (functions just return failures for values outside of the range). Not sure how setting them here would be better, but I\u0027ll start an email thread to see if these would make sense in libc.",
      "parentUuid": "07271ed5_cd405821",
      "range": {
        "startLine": 288,
        "startChar": 37,
        "endLine": 288,
        "endChar": 40
      },
      "revId": "4f72b53981a4bbd7431c62d4bb647cff0174a06f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65c71158_c8bfd239",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 4
      },
      "lineNbr": 288,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-07-17T21:30:20Z",
      "side": 1,
      "message": "If we can\u0027t have libc export them, at least define them in some private headers in libbinder instead of putting magic numbers",
      "parentUuid": "3a9c2b9c_afc082b7",
      "range": {
        "startLine": 288,
        "startChar": 37,
        "endLine": 288,
        "endChar": 40
      },
      "revId": "4f72b53981a4bbd7431c62d4bb647cff0174a06f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b5a9325_086b922d",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 4
      },
      "lineNbr": 288,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T21:44:46Z",
      "side": 1,
      "message": "I appreciate your considerations, but I\u0027d rather not. Moving these into constants in libbinder doesn\u0027t make this any better. They are only used once, and their role is well defined in this context. The gross thing is the coupling between the kernel sched implementation and here, and I\u0027d rather not add cruft in libbinder for something which should ultimately be resolved differently.",
      "parentUuid": "65c71158_c8bfd239",
      "range": {
        "startLine": 288,
        "startChar": 37,
        "endLine": 288,
        "endChar": 40
      },
      "revId": "4f72b53981a4bbd7431c62d4bb647cff0174a06f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70370055_28c4c0ea",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 4
      },
      "lineNbr": 300,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-07-17T21:07:31Z",
      "side": 1,
      "message": "e \u003d\u003d nullptr (because L316)",
      "range": {
        "startLine": 300,
        "startChar": 8,
        "endLine": 300,
        "endChar": 10
      },
      "revId": "4f72b53981a4bbd7431c62d4bb647cff0174a06f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b68b1347_406bd31b",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 4
      },
      "lineNbr": 300,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T21:27:11Z",
      "side": 1,
      "message": "it\u0027s like L266 above and elsewhere. will change if I end up changing something else here.",
      "parentUuid": "70370055_28c4c0ea",
      "range": {
        "startLine": 300,
        "startChar": 8,
        "endLine": 300,
        "endChar": 10
      },
      "revId": "4f72b53981a4bbd7431c62d4bb647cff0174a06f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4d70f2c_28ab6ab8",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 4
      },
      "lineNbr": 300,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T21:44:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b68b1347_406bd31b",
      "range": {
        "startLine": 300,
        "startChar": 8,
        "endLine": 300,
        "endChar": 10
      },
      "revId": "4f72b53981a4bbd7431c62d4bb647cff0174a06f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87fbc652_b4cd344f",
        "filename": "libs/binder/Parcel.cpp",
        "patchSetId": 4
      },
      "lineNbr": 200,
      "author": {
        "id": 1069543
      },
      "writtenOn": "2020-07-17T21:18:54Z",
      "side": 1,
      "message": "remove empty line or put it after schedBits decl?",
      "revId": "4f72b53981a4bbd7431c62d4bb647cff0174a06f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c44450a0_489b1e20",
        "filename": "libs/binder/Parcel.cpp",
        "patchSetId": 4
      },
      "lineNbr": 200,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T21:44:46Z",
      "side": 1,
      "message": "Unless you have a particular reason, I like grouping the static sets of obj together and the initialization of schedBits together. The vertical separation logically breaks up two distinct things that happen.",
      "parentUuid": "87fbc652_b4cd344f",
      "revId": "4f72b53981a4bbd7431c62d4bb647cff0174a06f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8291956_54cfa38c",
        "filename": "libs/binder/Parcel.cpp",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-07-17T21:07:31Z",
      "side": 1,
      "message": "SCHED_NORMAL?",
      "range": {
        "startLine": 222,
        "startChar": 26,
        "endLine": 222,
        "endChar": 27
      },
      "revId": "4f72b53981a4bbd7431c62d4bb647cff0174a06f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "390a0187_5287e98c",
        "filename": "libs/binder/include/binder/Binder.h",
        "patchSetId": 4
      },
      "lineNbr": 84,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-07-17T21:07:31Z",
      "side": 1,
      "message": "If none set, SCED_NORMAL / 0 by default",
      "revId": "4f72b53981a4bbd7431c62d4bb647cff0174a06f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a173f1f_220b2c26",
        "filename": "libs/binder/include/binder/Binder.h",
        "patchSetId": 4
      },
      "lineNbr": 84,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T21:27:11Z",
      "side": 1,
      "message": "Well, it depends what disableBackgroundScheduling is set to. I was under the impression that the kernel will leave the priority unchanged if it is 0/0.",
      "parentUuid": "390a0187_5287e98c",
      "revId": "4f72b53981a4bbd7431c62d4bb647cff0174a06f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10ae72a2_c27a09ce",
        "filename": "libs/binder/include/binder/Binder.h",
        "patchSetId": 4
      },
      "lineNbr": 84,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-07-17T21:31:30Z",
      "side": 1,
      "message": "My point is, can you define the behavior of get() if set() is not called previously? Or at least say it is undefined?",
      "parentUuid": "4a173f1f_220b2c26",
      "revId": "4f72b53981a4bbd7431c62d4bb647cff0174a06f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f30db979_5c51169b",
        "filename": "libs/binder/include/binder/Binder.h",
        "patchSetId": 4
      },
      "lineNbr": 84,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-07-17T21:44:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "10ae72a2_c27a09ce",
      "revId": "4f72b53981a4bbd7431c62d4bb647cff0174a06f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}