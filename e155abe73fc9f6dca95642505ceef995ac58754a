{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9ecd7f1d_8a53c8d3",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 8
      },
      "lineNbr": 543,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-11T23:20:22Z",
      "side": 1,
      "message": "this logic should be:\n\nif (currentCount \u003c\u003d 1 \u0026\u0026 maxCount \u003c\u003d 1) { ... }\n\nnit: consider moving this into a separate patch after, because we would want to test/revert/think of it separately",
      "range": {
        "startLine": 542,
        "startChar": 4,
        "endLine": 543,
        "endChar": 40
      },
      "revId": "e155abe73fc9f6dca95642505ceef995ac58754a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a5beef2_45ddcbf8",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 8
      },
      "lineNbr": 543,
      "author": {
        "id": 1944405
      },
      "writtenOn": "2022-05-13T00:22:57Z",
      "side": 1,
      "message": "Addressed through \"getThreadPoolMaxThreadCount\".",
      "parentUuid": "9ecd7f1d_8a53c8d3",
      "range": {
        "startLine": 542,
        "startChar": 4,
        "endLine": 543,
        "endChar": 40
      },
      "revId": "e155abe73fc9f6dca95642505ceef995ac58754a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7148fbcf_830ac512",
        "filename": "libs/binder/IPCThreadState.cpp",
        "patchSetId": 8
      },
      "lineNbr": 689,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-11T23:20:22Z",
      "side": 1,
      "message": "will you follow-up with a check to see if there are any other processes which are setting up multiple?",
      "range": {
        "startLine": 689,
        "startChar": 0,
        "endLine": 689,
        "endChar": 32
      },
      "revId": "e155abe73fc9f6dca95642505ceef995ac58754a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c4be641_4d8d897d",
        "filename": "libs/binder/IPCThreadState.cpp",
        "patchSetId": 8
      },
      "lineNbr": 689,
      "author": {
        "id": 1944405
      },
      "writtenOn": "2022-05-11T23:38:39Z",
      "side": 1,
      "message": "Couple of questions:\n\n- If a process is setting up multiple polls, it would be calling \"SetupPolling\" multiple times, right? Which would then mean that these threads are accounted for. If said statement is correct, follow-up question: Might a polling thread ever exit before the process does? \n\n- Are we expecting any service to setup multiple polling threads?\n\n- Is it desired behavior? What would multiple polling threads enable?",
      "parentUuid": "7148fbcf_830ac512",
      "range": {
        "startLine": 689,
        "startChar": 0,
        "endLine": 689,
        "endChar": 32
      },
      "revId": "e155abe73fc9f6dca95642505ceef995ac58754a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edb3e3a5_d855d6df",
        "filename": "libs/binder/IPCThreadState.cpp",
        "patchSetId": 8
      },
      "lineNbr": 689,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-11T23:43:55Z",
      "side": 1,
      "message": "Right, when there is a polling thread setup, the implicit contract is that the caller will call handlePolledCommands every once in a while. Violating this contract, we get a deadlock, which we have a separate debug process for. Considering this to be a currently running thread sgtm\n\n\u003e Are we expecting any service to setup multiple polling threads?\n\nno. I suspect they aren\u0027t now.\n\n\u003e Is it desired behavior? What would multiple polling threads enable?\n\nOne possibility would be for us to share a threadpool between RPC binder and kernel binder.",
      "parentUuid": "8c4be641_4d8d897d",
      "range": {
        "startLine": 689,
        "startChar": 0,
        "endLine": 689,
        "endChar": 32
      },
      "revId": "e155abe73fc9f6dca95642505ceef995ac58754a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e200c75_823b8db8",
        "filename": "libs/binder/IPCThreadState.cpp",
        "patchSetId": 8
      },
      "lineNbr": 689,
      "author": {
        "id": 1944405
      },
      "writtenOn": "2022-05-11T23:56:37Z",
      "side": 1,
      "message": "\u003e One possibility would be for us to share a threadpool between RPC binder and kernel binder.\n\nInteresting. If each binder started a polling thread then we\u0027d have 2 polling threads since it\u0027s a shared pool, I see.",
      "parentUuid": "edb3e3a5_d855d6df",
      "range": {
        "startLine": 689,
        "startChar": 0,
        "endLine": 689,
        "endChar": 32
      },
      "revId": "e155abe73fc9f6dca95642505ceef995ac58754a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "648a02a7_f151b57f",
        "filename": "libs/binder/IPCThreadState.cpp",
        "patchSetId": 8
      },
      "lineNbr": 689,
      "author": {
        "id": 1944405
      },
      "writtenOn": "2022-05-13T00:22:57Z",
      "side": 1,
      "message": "Done based on comment #689",
      "parentUuid": "1e200c75_823b8db8",
      "range": {
        "startLine": 689,
        "startChar": 0,
        "endLine": 689,
        "endChar": 32
      },
      "revId": "e155abe73fc9f6dca95642505ceef995ac58754a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b873228_b50652e1",
        "filename": "libs/binder/include/binder/ProcessState.h",
        "patchSetId": 8
      },
      "lineNbr": 95,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-11T23:20:22Z",
      "side": 1,
      "message": "if this is the same as the max thread count was, can it be removed? (avoid duplicating same API)",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 95,
        "endChar": 54
      },
      "revId": "e155abe73fc9f6dca95642505ceef995ac58754a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f4294aa_49d1e5ac",
        "filename": "libs/binder/include/binder/ProcessState.h",
        "patchSetId": 8
      },
      "lineNbr": 95,
      "author": {
        "id": 1944405
      },
      "writtenOn": "2022-05-11T23:38:39Z",
      "side": 1,
      "message": "Since we are unable to modify the name of `getThreadPoolMaxThreadCount`, `getThreadPoolCurrentMaxThreadCount` would return the actual current \"Max\" the pool currently has, which would be the sum of LazyMax + Polling + User Joined. If my logic is flawed, please let me know.",
      "parentUuid": "6b873228_b50652e1",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 95,
        "endChar": 54
      },
      "revId": "e155abe73fc9f6dca95642505ceef995ac58754a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eff5b195_342a7881",
        "filename": "libs/binder/include/binder/ProcessState.h",
        "patchSetId": 8
      },
      "lineNbr": 95,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-11T23:43:55Z",
      "side": 1,
      "message": "It\u0027s probably best to modify the comment with more of an explanation for the existing API (and have it carry a slightly incongruent semantic). If we can avoid adding a new API, we should. That is, if we don\u0027t have a user for the new API, we should avoid it.\n\n\u003e would return the actual current \"Max\" the pool currently has, which would be the sum of LazyMax + Polling + User Joined\n\nI see. The lazy count now would be included in user joined (since the lazy threads will call into the same joinThreadPool function.",
      "parentUuid": "4f4294aa_49d1e5ac",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 95,
        "endChar": 54
      },
      "revId": "e155abe73fc9f6dca95642505ceef995ac58754a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c8c06de_96f23981",
        "filename": "libs/binder/include/binder/ProcessState.h",
        "patchSetId": 8
      },
      "lineNbr": 95,
      "author": {
        "id": 1944405
      },
      "writtenOn": "2022-05-11T23:56:37Z",
      "side": 1,
      "message": "Currently only used in the test I\u0027m writing.\n\nLazy count is indeed included in user joined right now. \n`Add a function to separate user joined threads from lazy threads` is next up!",
      "parentUuid": "eff5b195_342a7881",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 95,
        "endChar": 54
      },
      "revId": "e155abe73fc9f6dca95642505ceef995ac58754a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e935f933_cc252e19",
        "filename": "libs/binder/include/binder/ProcessState.h",
        "patchSetId": 8
      },
      "lineNbr": 95,
      "author": {
        "id": 1944405
      },
      "writtenOn": "2022-05-13T00:22:57Z",
      "side": 1,
      "message": "Removed alongside CurrentThreadCount.",
      "parentUuid": "2c8c06de_96f23981",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 95,
        "endChar": 54
      },
      "revId": "e155abe73fc9f6dca95642505ceef995ac58754a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36815027_f13b595d",
        "filename": "libs/binder/include/binder/ProcessState.h",
        "patchSetId": 8
      },
      "lineNbr": 142,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-11T23:20:22Z",
      "side": 1,
      "message": "should this also be deleted? (I thought you were going to do a rename - btw, consider doing a rename like this in a separate patch, to make it more clear what is happening)",
      "range": {
        "startLine": 141,
        "startChar": 0,
        "endLine": 142,
        "endChar": 23
      },
      "revId": "e155abe73fc9f6dca95642505ceef995ac58754a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bce5a338_a04a2eb5",
        "filename": "libs/binder/include/binder/ProcessState.h",
        "patchSetId": 8
      },
      "lineNbr": 142,
      "author": {
        "id": 1944405
      },
      "writtenOn": "2022-05-11T23:38:39Z",
      "side": 1,
      "message": "See reply to #95, also, this was the idea I mentioned yesterday on chat.\nAnd noted, will move it to a different patch.",
      "parentUuid": "36815027_f13b595d",
      "range": {
        "startLine": 141,
        "startChar": 0,
        "endLine": 142,
        "endChar": 23
      },
      "revId": "e155abe73fc9f6dca95642505ceef995ac58754a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95f57e4d_43376996",
        "filename": "libs/binder/include/binder/ProcessState.h",
        "patchSetId": 8
      },
      "lineNbr": 142,
      "author": {
        "id": 1944405
      },
      "writtenOn": "2022-05-13T00:22:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bce5a338_a04a2eb5",
      "range": {
        "startLine": 141,
        "startChar": 0,
        "endLine": 142,
        "endChar": 23
      },
      "revId": "e155abe73fc9f6dca95642505ceef995ac58754a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3301519f_5d90a408",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1714,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-11T23:20:22Z",
      "side": 1,
      "message": "you might want lock/lockUnlock here instead, so they cause extra threads to be started in the target process (and start the threads like on L1705 that call the threadpool from the client instead of the server). This may be the issue you are hitting",
      "range": {
        "startLine": 1714,
        "startChar": 0,
        "endLine": 1714,
        "endChar": 13
      },
      "revId": "e155abe73fc9f6dca95642505ceef995ac58754a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab6726a7_50b14e15",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1714,
      "author": {
        "id": 1944405
      },
      "writtenOn": "2022-05-11T23:38:39Z",
      "side": 1,
      "message": "Thanks! For the lock/lockUnlock, I still haven\u0027t implemented it but wanted feedback (thanks again). L1705 currently empty is for that reason.\n\nIn saying \"from the client side\", isn\u0027t that being done here (onTransact)? Or am I missing information.",
      "parentUuid": "3301519f_5d90a408",
      "range": {
        "startLine": 1714,
        "startChar": 0,
        "endLine": 1714,
        "endChar": 13
      },
      "revId": "e155abe73fc9f6dca95642505ceef995ac58754a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98e36ba2_4b4408f9",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1714,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2022-05-11T23:43:55Z",
      "side": 1,
      "message": "onTransact here is the server side. It\u0027ll be executed in the process that the binder returned from addServer is a proxy for.",
      "parentUuid": "ab6726a7_50b14e15",
      "range": {
        "startLine": 1714,
        "startChar": 0,
        "endLine": 1714,
        "endChar": 13
      },
      "revId": "e155abe73fc9f6dca95642505ceef995ac58754a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32c5606c_21ddfa50",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1714,
      "author": {
        "id": 1944405
      },
      "writtenOn": "2022-05-13T00:22:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "98e36ba2_4b4408f9",
      "range": {
        "startLine": 1714,
        "startChar": 0,
        "endLine": 1714,
        "endChar": 13
      },
      "revId": "e155abe73fc9f6dca95642505ceef995ac58754a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}