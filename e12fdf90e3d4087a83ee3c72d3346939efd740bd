{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4555e43d_30667320",
        "filename": "libs/binder/RpcState.h",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-10-12T00:53:43Z",
      "side": 1,
      "message": "std::function may create an allocation. Are we sure they won\u0027t here? How hard would it be to switch to C-style callbacks instead or similar?",
      "range": {
        "startLine": 193,
        "startChar": 0,
        "endLine": 193,
        "endChar": 68
      },
      "revId": "e12fdf90e3d4087a83ee3c72d3346939efd740bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc92841f_e36096fc",
        "filename": "libs/binder/RpcState.h",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-10-12T17:57:00Z",
      "side": 1,
      "message": "std::function is guaranteed to not create allocations if you pass function pointer (C-style callback) to it. But even if you pass a lambda, it would need to have a large number of captures (\u003e2 pointers) to cause allocation.\n\nThere\u0027s a good article about it here: https://blog.demofox.org/2015/02/25/avoiding-the-performance-hazzards-of-stdfunction/",
      "parentUuid": "4555e43d_30667320",
      "range": {
        "startLine": 193,
        "startChar": 0,
        "endLine": 193,
        "endChar": 68
      },
      "revId": "e12fdf90e3d4087a83ee3c72d3346939efd740bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2145a626_21f88239",
        "filename": "libs/binder/RpcState.h",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-10-13T22:30:16Z",
      "side": 1,
      "message": "Are you sure all the clients are passing in a function pointer? In the future, they might forget to do this. Specifically, I think that the only user of altPoll now uses a lambda:\nhttps://source.corp.google.com/h/googleplex-android/platform/superproject/main/+/main:frameworks/native/libs/binder/RpcState.cpp;l\u003d607;drc\u003d7b5430b3290dd2575f7648a91a019ef2b2222480\n\nI thought you had another CL which resolved this? Can you copy that solution here too?",
      "parentUuid": "fc92841f_e36096fc",
      "range": {
        "startLine": 193,
        "startChar": 0,
        "endLine": 193,
        "endChar": 68
      },
      "revId": "e12fdf90e3d4087a83ee3c72d3346939efd740bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9311aff_80e4d3a2",
        "filename": "libs/binder/RpcState.h",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2023-10-13T23:25:09Z",
      "side": 1,
      "message": "Another consideration is that since std::function can copy, it requires whatever you capture to have a copy constructor which often forces annoyances like the introduction of std::shared_ptr. Doesn\u0027t seem relevant here though.\n\nThe implementation of funciton_ref is really small (50 lines, header only), so we could also consider copying the code.",
      "parentUuid": "2145a626_21f88239",
      "range": {
        "startLine": 193,
        "startChar": 0,
        "endLine": 193,
        "endChar": 68
      },
      "revId": "e12fdf90e3d4087a83ee3c72d3346939efd740bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2d4312c_ed2fc850",
        "filename": "libs/binder/RpcState.h",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-10-17T20:02:50Z",
      "side": 1,
      "message": "Let me address concerns one by one:\n- Actually, my comment about function pointer was refering to C-style callbacks that don\u0027t pass any context, but I realized altPoll has to have some captures to work at all in the current form\n- I can try to apply similar solution as in https://r.android.com/2784072 - it can\u0027t be 1:1, but I\u0027m thinking about a tiny custom class inheriting from std::function with assert_small_callable in its constructor\n- copy of function_ref is always an option, but let\u0027s try to avoid it",
      "parentUuid": "f9311aff_80e4d3a2",
      "range": {
        "startLine": 193,
        "startChar": 0,
        "endLine": 193,
        "endChar": 68
      },
      "revId": "e12fdf90e3d4087a83ee3c72d3346939efd740bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b77d18d6_58cec7f6",
        "filename": "libs/binder/RpcState.h",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-10-17T20:32:58Z",
      "side": 1,
      "message": "I implemented SmallFunction for `rpcSend`/`altPoll` (and fixed its only usage Steven found). To use it with `RpcTransport`, I would have to move SmallFunction and assert_small_callable to some header file in \u003cbinder/...\u003e.\n\nIf you folks want this, please just reopen this thread and tell me into which header to put these two. I\u0027d move make_scope_guard there as well IMO.",
      "parentUuid": "c2d4312c_ed2fc850",
      "range": {
        "startLine": 193,
        "startChar": 0,
        "endLine": 193,
        "endChar": 68
      },
      "revId": "e12fdf90e3d4087a83ee3c72d3346939efd740bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a002e76_fb840a95",
        "filename": "libs/binder/RpcTransportUtils.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-10-12T00:53:43Z",
      "side": 1,
      "message": "accident typo?",
      "range": {
        "startLine": 27,
        "startChar": 36,
        "endLine": 27,
        "endChar": 37
      },
      "revId": "e12fdf90e3d4087a83ee3c72d3346939efd740bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "617aff01_59315462",
        "filename": "libs/binder/RpcTransportUtils.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-10-12T17:57:00Z",
      "side": 1,
      "message": "It\u0027s a deliberate trick to avoid linter doing a huge indentation on arguments.",
      "parentUuid": "4a002e76_fb840a95",
      "range": {
        "startLine": 27,
        "startChar": 36,
        "endLine": 27,
        "endChar": 37
      },
      "revId": "e12fdf90e3d4087a83ee3c72d3346939efd740bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0caf59cc_85a03f08",
        "filename": "libs/binder/RpcTransportUtils.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-10-13T22:30:16Z",
      "side": 1,
      "message": "use \u0027// clang-format: off\u0027 and \u0027// clang-format: on\u0027\n\nor \u0027--no-verify\u0027\n\nor let it mess up the format - I don\u0027t mind much",
      "parentUuid": "617aff01_59315462",
      "range": {
        "startLine": 27,
        "startChar": 36,
        "endLine": 27,
        "endChar": 37
      },
      "revId": "e12fdf90e3d4087a83ee3c72d3346939efd740bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37bda4f1_093360cb",
        "filename": "libs/binder/RpcTransportUtils.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1944400
      },
      "writtenOn": "2023-10-13T23:25:09Z",
      "side": 1,
      "message": "+1 to \"just let the formatter do its thing\"",
      "parentUuid": "0caf59cc_85a03f08",
      "range": {
        "startLine": 27,
        "startChar": 36,
        "endLine": 27,
        "endChar": 37
      },
      "revId": "e12fdf90e3d4087a83ee3c72d3346939efd740bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5d1be70_7a9084f1",
        "filename": "libs/binder/RpcTransportUtils.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-10-17T20:02:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "37bda4f1_093360cb",
      "range": {
        "startLine": 27,
        "startChar": 36,
        "endLine": 27,
        "endChar": 37
      },
      "revId": "e12fdf90e3d4087a83ee3c72d3346939efd740bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}