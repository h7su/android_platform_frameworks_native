{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8ecc8488_906c85d1",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 139,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T17:18:03Z",
      "side": 1,
      "message": "do we need this limitation?",
      "range": {
        "startLine": 139,
        "startChar": 0,
        "endLine": 139,
        "endChar": 91
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fd05ab2_7a389309",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 139,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T19:33:56Z",
      "side": 1,
      "message": "No, but I don\u0027t see how this can be useful for local binders, so I hide this API for local binders.",
      "parentUuid": "8ecc8488_906c85d1",
      "range": {
        "startLine": 139,
        "startChar": 0,
        "endLine": 139,
        "endChar": 91
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1092f0ca_2c776046",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 139,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T19:46:59Z",
      "side": 1,
      "message": "It\u0027s pretty standard for these functions (and it would be the default in the test). We definitely don\u0027t need it for this usecase, but you might consider it, for instance, if the servicedispatcher binary ever registered its own interface.",
      "parentUuid": "4fd05ab2_7a389309",
      "range": {
        "startLine": 139,
        "startChar": 0,
        "endLine": 139,
        "endChar": 91
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c328152c_27e25da7",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 139,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T20:26:45Z",
      "side": 1,
      "message": "Ack, will do",
      "parentUuid": "1092f0ca_2c776046",
      "range": {
        "startLine": 139,
        "startChar": 0,
        "endLine": 139,
        "endChar": 91
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10c2d477_5a676ee4",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 162,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T17:18:03Z",
      "side": 1,
      "message": "this is configured after the object is sent out, so it should be added here and managed by the lock (see b/166282674 for additional context on the above items). Otherwise, the below code might create multiple copies of this object.\n\nBtw - this might be a good time to add \u0027-Wthread-safety\u0027 + add annotations to this mutex.",
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08a35acf_902908e8",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 162,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T19:33:56Z",
      "side": 1,
      "message": "\u003e this is configured after the object is sent out\n\nIt should actually be configured before the object is sent out, see comments in IBinder. I didn\u0027t prevent it to be configured after the object is sent out, though, because I don\u0027t know how to detect. Any suggestions?",
      "parentUuid": "10c2d477_5a676ee4",
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e956f8f0_17d7899e",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 162,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T19:46:59Z",
      "side": 1,
      "message": "I need to finish fixing this bug for that, but in that case L448 has a race where it might create two objects if this isn\u0027t already configured.\n\nNote - we want to be able to use this without having to update device code, and we can\u0027t create extras on all binders (it would cost too much memory - all this data needs to have careful defaults)",
      "parentUuid": "08a35acf_902908e8",
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "610a7cc4_8f4b5029",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 162,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T20:26:45Z",
      "side": 1,
      "message": "re L448: I thought getOrCreateExtras is atomic? Did I understand it incorrectly?\n\nMaybe I should be using a new function getExtras() that ensures it won\u0027t create one?\n\n\u003e we can\u0027t create extras on all binders\n\nAre you suggesting that I shouldn\u0027t be using extras? What\u0027s the alternative?",
      "parentUuid": "e956f8f0_17d7899e",
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2916f176_7a1ef4e3",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 162,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T20:52:15Z",
      "side": 1,
      "message": "Oops, that\u0027s right. I was confusing L383 and L448, since I still want to be able to use this without having to recompile services to opt them in, but it\u0027s fine now.",
      "parentUuid": "610a7cc4_8f4b5029",
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "210097a0_cbb371db",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 380,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T17:18:03Z",
      "side": 1,
      "message": "we say add client because a process is requesting itself to be added as a new client, but we are configuring a server",
      "range": {
        "startLine": 380,
        "startChar": 14,
        "endLine": 380,
        "endChar": 32
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95451831_cbaa47c7",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 380,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T19:33:56Z",
      "side": 1,
      "message": "Ack will do",
      "parentUuid": "210097a0_cbb371db",
      "range": {
        "startLine": 380,
        "startChar": 14,
        "endLine": 380,
        "endChar": 32
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc90e10b_0fe96398",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 445,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T17:18:03Z",
      "side": 1,
      "message": "this transaction should be limited to userdebug/eng builds (also now that this is working, please schedule security review ASAP)",
      "range": {
        "startLine": 445,
        "startChar": 0,
        "endLine": 445,
        "endChar": 42
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f0bf8a6_950789fc",
        "filename": "libs/binder/Binder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 445,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T19:33:56Z",
      "side": 1,
      "message": "will do",
      "parentUuid": "cc90e10b_0fe96398",
      "range": {
        "startLine": 445,
        "startChar": 0,
        "endLine": 445,
        "endChar": 42
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d49dc610_80bac3d9",
        "filename": "libs/binder/RpcExtras.h",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T06:05:55Z",
      "side": 1,
      "message": "FIXME: This thread pool is broken",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 17
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7f9c45c_199e1352",
        "filename": "libs/binder/RpcExtras.h",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T17:18:03Z",
      "side": 1,
      "message": "This object is doing what RpcServer/RpcConnection should do after b/185167543. Can you integrate the logic there or move it to IBinder (or ack me removing this class when I finish that bug)? I am hoping to get a chance today.",
      "range": {
        "startLine": 30,
        "startChar": 6,
        "endLine": 30,
        "endChar": 15
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7120ac1c_f86c401e",
        "filename": "libs/binder/RpcExtras.h",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T19:33:56Z",
      "side": 1,
      "message": "I\u0027ll wait for your work to finish.\n\nBTW, right now it belongs to BBinder. I just put it in a different header file because Binder.cpp is too big already.",
      "parentUuid": "b7f9c45c_199e1352",
      "range": {
        "startLine": 30,
        "startChar": 6,
        "endLine": 30,
        "endChar": 15
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03051a1d_e3b76cbd",
        "filename": "libs/binder/RpcExtras.h",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T19:46:59Z",
      "side": 1,
      "message": "I do think we should try to get to the point where we have RpcServer there though. Anything you\u0027d want to do here, we\u0027d also want to do for RpcServer, but okay, sg.",
      "parentUuid": "7120ac1c_f86c401e",
      "range": {
        "startLine": 30,
        "startChar": 6,
        "endLine": 30,
        "endChar": 15
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8932b06b_0664f2c9",
        "filename": "libs/binder/RpcExtras.h",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T20:33:52Z",
      "side": 1,
      "message": "I am totally supportive in integrating this into RpcServer. Right now this class is just a wrapper over RpcServer.\n\nI\u0027ll wait for your work to finish. Right now, my thread pool implementation here is wrong, and the process crashes 😄. Once you finished adding it to RpcServer, I\u0027ll purge most of this code.",
      "parentUuid": "03051a1d_e3b76cbd",
      "range": {
        "startLine": 30,
        "startChar": 6,
        "endLine": 30,
        "endChar": 15
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "569c29c8_2faa3ca2",
        "filename": "libs/binder/include/binder/IBinder.h",
        "patchSetId": 5
      },
      "lineNbr": 165,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T17:18:03Z",
      "side": 1,
      "message": "This means that we require everyone to set this manually, but that will make it impossible to debug some processes using this.\n\nCan we make this part of the binder transaction?",
      "range": {
        "startLine": 164,
        "startChar": 0,
        "endLine": 165,
        "endChar": 23
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "360271b4_d390fa5a",
        "filename": "libs/binder/include/binder/IBinder.h",
        "patchSetId": 5
      },
      "lineNbr": 165,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T19:33:56Z",
      "side": 1,
      "message": "If it is not called then this service do not open up any RPC abilities. My intention is that we can ask services opt-in.\n\nFor example, some services aren\u0027t designed to be thread-safe (e.g. health service) But this (when set to \u003e\u003d 1) will always spawn new threads and call into the service.\n\nSome services may be so sensitive that we don\u0027t want to open up RPC at all; though, we limit this to be userdebug only, so it should be fine.\n\nAlso, this is intended to mimic setThreadPoolMaxThreadCount() (I thought it was called configureSomething() in libhwbinder). So I say the service itself should configure this.\n\nThat\u0027s why I ask services to voluntarily opt-in, instead of opening up a binder transaction for servicedispatcher to force a service to open up RPC abilities.",
      "parentUuid": "569c29c8_2faa3ca2",
      "range": {
        "startLine": 164,
        "startChar": 0,
        "endLine": 165,
        "endChar": 23
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "527dc432_6f6344ad",
        "filename": "libs/binder/include/binder/IBinder.h",
        "patchSetId": 5
      },
      "lineNbr": 165,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T19:46:59Z",
      "side": 1,
      "message": "No one will use this if they need to manually update things, and ultimately we intend this route as a debug tool (maybe also add \u0027Debug\u0027 into these function names? \u0027addDebugRpcClient\u0027 etc...), and this needs to be guarded with root.\n\nFor phase II, I 100% agree with you.\n\nConsider perhaps:\n\n    addRpcClient(fd, bool force)\n\nIn BBinder:\n\n    addRpcClient() ..\n        if (!force \u0026\u0026 isSingleThreaded...) error \"unsafe threading, force?\"",
      "parentUuid": "360271b4_d390fa5a",
      "range": {
        "startLine": 164,
        "startChar": 0,
        "endLine": 165,
        "endChar": 23
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55516652_efb81a3d",
        "filename": "libs/binder/include/binder/IBinder.h",
        "patchSetId": 5
      },
      "lineNbr": 165,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T20:33:52Z",
      "side": 1,
      "message": "wait -- I can detect if the current process is single threaded or not?\n\nYou mean, by looking into the number of binder threads configured?",
      "parentUuid": "527dc432_6f6344ad",
      "range": {
        "startLine": 164,
        "startChar": 0,
        "endLine": 165,
        "endChar": 23
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8aca9a2e_d0d32566",
        "filename": "libs/binder/include/binder/IBinder.h",
        "patchSetId": 5
      },
      "lineNbr": 165,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-26T17:28:15Z",
      "side": 1,
      "message": "Yes, this is tracked inside of ProcessState. Though, the libhwbinder implementation is fixed, but libbinder isn\u0027t fully fixed, since in the libbinder case, we don\u0027t have a good way to track non-looper threads.",
      "parentUuid": "55516652_efb81a3d",
      "range": {
        "startLine": 164,
        "startChar": 0,
        "endLine": 165,
        "endChar": 23
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd13578a_28489767",
        "filename": "libs/binder/include/binder/IBinder.h",
        "patchSetId": 5
      },
      "lineNbr": 177,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T17:18:03Z",
      "side": 1,
      "message": "given that we do this, this API should actually take unique_fd. This way, if you already have an FD owned which you don\u0027t need anymore, you can transfer it and save the extra dupe",
      "range": {
        "startLine": 177,
        "startChar": 0,
        "endLine": 177,
        "endChar": 42
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c80983a_66e3776a",
        "filename": "libs/binder/include/binder/IBinder.h",
        "patchSetId": 5
      },
      "lineNbr": 177,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T19:33:56Z",
      "side": 1,
      "message": "But if the client have an FD that is not owned, then the client needs to dup it. Right?\n\nI am okay to switch to unique_fd\u0026\u0026 here. I just want to confirm.",
      "parentUuid": "dd13578a_28489767",
      "range": {
        "startLine": 177,
        "startChar": 0,
        "endLine": 177,
        "endChar": 42
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3aab58d5_b87a017c",
        "filename": "libs/binder/include/binder/IBinder.h",
        "patchSetId": 5
      },
      "lineNbr": 177,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T19:46:59Z",
      "side": 1,
      "message": "yeah, but that way, the client can only dup if it\u0027s needed\n\nfeel free to also use \u0027unique_fd\u0027 over \u0027unique_fd\u0026\u0026\u0027 I\u0027m thinking about switching libbinder to reflect your code review comment. The future is awesome",
      "parentUuid": "1c80983a_66e3776a",
      "range": {
        "startLine": 177,
        "startChar": 0,
        "endLine": 177,
        "endChar": 42
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89a00d3c_cc7ab7ba",
        "filename": "libs/binder/include/binder/IBinder.h",
        "patchSetId": 5
      },
      "lineNbr": 177,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T20:33:52Z",
      "side": 1,
      "message": "Ack.\n\nI forgot -- what code review comment? using unique_fd should be the exact same as unique_fd\u0026\u0026. The former saves two characters though.",
      "parentUuid": "3aab58d5_b87a017c",
      "range": {
        "startLine": 177,
        "startChar": 0,
        "endLine": 177,
        "endChar": 42
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0b41b79_9ce6f7a6",
        "filename": "libs/binder/include/binder/IBinder.h",
        "patchSetId": 5
      },
      "lineNbr": 177,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T22:18:12Z",
      "side": 1,
      "message": "Ah I know why this is a borrowed fd.\n\nSee the impl for IBinder::addRpcClient. If this is a BpBinder, I don\u0027t need to take ownership of the fd; just send the fd over via writeFileDescriptor.\n\nDoes that makes sense?",
      "parentUuid": "89a00d3c_cc7ab7ba",
      "range": {
        "startLine": 177,
        "startChar": 0,
        "endLine": 177,
        "endChar": 42
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a8281ea_7b765927",
        "filename": "libs/binder/include/binder/IBinder.h",
        "patchSetId": 5
      },
      "lineNbr": 177,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T22:36:44Z",
      "side": 1,
      "message": "Or do you want me to dup() the FD and let the parcel takes ownership of it (writeFileDescriptor(..., true))? That will cause an extra dup on the client side.",
      "parentUuid": "c0b41b79_9ce6f7a6",
      "range": {
        "startLine": 177,
        "startChar": 0,
        "endLine": 177,
        "endChar": 42
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6606d82f_e9f4cef0",
        "filename": "libs/binder/include/binder/IBinder.h",
        "patchSetId": 5
      },
      "lineNbr": 177,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T22:46:04Z",
      "side": 1,
      "message": "Sorry scratch my last comment. I understand now.",
      "parentUuid": "1a8281ea_7b765927",
      "range": {
        "startLine": 177,
        "startChar": 0,
        "endLine": 177,
        "endChar": 42
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eef38752_ef81c6e3",
        "filename": "libs/binder/include/binder/IBinder.h",
        "patchSetId": 5
      },
      "lineNbr": 177,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-26T18:21:06Z",
      "side": 1,
      "message": "The use of unique_fd in IBinder.h requires b/186266747.",
      "parentUuid": "6606d82f_e9f4cef0",
      "range": {
        "startLine": 177,
        "startChar": 0,
        "endLine": 177,
        "endChar": 42
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "daca8dbf_3833bc86",
        "filename": "libs/binder/include/binder/IBinder.h",
        "patchSetId": 5
      },
      "lineNbr": 177,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-26T18:47:04Z",
      "side": 1,
      "message": "I wonder if another option could be doing this in the unique fd header:\n\n   using unique_fd \u003d unique_fd_impl\u003cDefaultCloser\u003e;\n\n-\u003e\n\n   class unique_fd : public unique_fd_impl\u003cDefaultCloser\u003e {};\n\nThat way, it\u0027s easier to forward declare unique_fd (though I\u0027m not sure if it would be a safe change from an ABI perspective or if the compiler would always optimize stuff out). Or maybe ask enh?",
      "parentUuid": "eef38752_ef81c6e3",
      "range": {
        "startLine": 177,
        "startChar": 0,
        "endLine": 177,
        "endChar": 42
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f010c3a_8a286bce",
        "filename": "libs/binder/include/binder/RpcConnection.h",
        "patchSetId": 5
      },
      "lineNbr": 109,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T17:18:03Z",
      "side": 1,
      "message": "mServer",
      "range": {
        "startLine": 109,
        "startChar": 66,
        "endLine": 109,
        "endChar": 74
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9792388c_db62643c",
        "filename": "libs/binder/include/binder/RpcConnection.h",
        "patchSetId": 5
      },
      "lineNbr": 109,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T19:33:56Z",
      "side": 1,
      "message": "no, it is the accepted fd. This is mostly equivalent to\n\n```\nint accepted \u003d accept(mServer);\njoin(accepted);\n```",
      "parentUuid": "2f010c3a_8a286bce",
      "range": {
        "startLine": 109,
        "startChar": 66,
        "endLine": 109,
        "endChar": 74
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53a34d58_39365744",
        "filename": "libs/binder/include/binder/RpcConnection.h",
        "patchSetId": 5
      },
      "lineNbr": 109,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T19:46:59Z",
      "side": 1,
      "message": "oops, sorry I misunderstood the setup when I made this comment.",
      "parentUuid": "9792388c_db62643c",
      "range": {
        "startLine": 109,
        "startChar": 66,
        "endLine": 109,
        "endChar": 74
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a398cb70_2e1652f4",
        "filename": "libs/binder/include/binder/RpcConnection.h",
        "patchSetId": 5
      },
      "lineNbr": 121,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T17:18:03Z",
      "side": 1,
      "message": "I hesitate to add an actual accept since we\u0027ll want to add a standard way to do this and manage threads in b/185167543.\n\nWould you consider \u0027setupExternalServer(unique_fd\u0026\u0026)\u0027 which sets the mServer object like the other APIs do? I know we\u0027re accepting a connection below and passing it through, so that we need this. However, in that case, I\u0027m not sure how we could dynamically add more threads.",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 121,
        "endChar": 51
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "375ed549_a2252aeb",
        "filename": "libs/binder/include/binder/RpcConnection.h",
        "patchSetId": 5
      },
      "lineNbr": 121,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T19:33:56Z",
      "side": 1,
      "message": "I\u0027ll wait for your thread work to finish before I redesign this.\n\nI didn\u0027t add `setupExternalServer(unique_fd\u0026\u0026)` because in our design, the mServer FD is owned by servicedispatcher. servicedispatcher sends the accepted FD to the service. So the service doesn\u0027t know about mServer at all. \n\nSee the test in binderLibTest.\n\nI\u0027ll mark this as WIP. I am happy to rework this once you finish the thread work.",
      "parentUuid": "a398cb70_2e1652f4",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 121,
        "endChar": 51
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "450ec897_246586af",
        "filename": "libs/binder/include/binder/RpcConnection.h",
        "patchSetId": 5
      },
      "lineNbr": 121,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T19:46:59Z",
      "side": 1,
      "message": "okay, perfect",
      "parentUuid": "375ed549_a2252aeb",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 121,
        "endChar": 51
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1f66b5d_5d5f7b55",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1229,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T17:18:03Z",
      "side": 1,
      "message": "you\u0027ll write it as a library so we only have one copy of this code, right?",
      "range": {
        "startLine": 1229,
        "startChar": 0,
        "endLine": 1229,
        "endChar": 30
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f03f8f2_22c45aa9",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1229,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T19:33:56Z",
      "side": 1,
      "message": "yeah, once I have the real servicedispatcher I can use the code there.\n\nI\u0027ll put it in a separate CL though.",
      "parentUuid": "a1f66b5d_5d5f7b55",
      "range": {
        "startLine": 1229,
        "startChar": 0,
        "endLine": 1229,
        "endChar": 30
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3a964de_cb2be3ef",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1240,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T17:18:03Z",
      "side": 1,
      "message": "wait, we can accept a connection in one process and then pass it to another? cool",
      "range": {
        "startLine": 1240,
        "startChar": 0,
        "endLine": 1240,
        "endChar": 48
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95877d15_8d012a46",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1240,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T19:33:56Z",
      "side": 1,
      "message": "Exactly!\n\nThat\u0027s why I didn\u0027t add RpcConnection::setupExternalServer()",
      "parentUuid": "d3a964de_cb2be3ef",
      "range": {
        "startLine": 1240,
        "startChar": 0,
        "endLine": 1240,
        "endChar": 48
      },
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3afadffa_82ff8781",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1249,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T17:18:03Z",
      "side": 1,
      "message": "the tests below could hang/fail, right?",
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf311d0c_f80bd3c5",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1249,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-04-23T19:33:56Z",
      "side": 1,
      "message": "L1251~1275? \n\nAll wait_for() functions have a timeout, so it should fail instead of hanging.\n\nHowever, if things go wrong:\n\n- The main thread will continue on other tests. L1253 and L1259 won\u0027t hang.\n- The thread is detached so that it won\u0027t hang at L1276\n\nNow that I look at this code, there are still a few places where it could hang. At L1261 / L1264 / L1270 where there\u0027s a binder transaction going on, it can hang at recv(). \n\nMaybe I should put the client code to a new detached thread as well?",
      "parentUuid": "3afadffa_82ff8781",
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30230715_17a39394",
        "filename": "libs/binder/tests/binderLibTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1249,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-23T19:46:59Z",
      "side": 1,
      "message": "I also need to add logic to allow a call to timeout in RPC binder (and actually in regular binder too, b/175164639). Feel free to look at doing this",
      "parentUuid": "cf311d0c_f80bd3c5",
      "revId": "8808a94dbc498b39a2574272495c7ad73d677dbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}