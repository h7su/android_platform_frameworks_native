{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "88791b3d_a883c753",
        "filename": "libs/binder/trusty/OS.cpp",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2023-12-01T22:44:04Z",
      "side": 1,
      "message": "I think this is fine, but it\u0027s more code and effort than the old approach. What does it buy you?",
      "revId": "a62560a30a4812c4fdbbfe2feeef4c25ae6a20d8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86f85579_4ee9aa2c",
        "filename": "libs/binder/trusty/OS.cpp",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-12-01T22:58:27Z",
      "side": 1,
      "message": "The point here is to reuse liblog_stub between Trusty and Linux Binder. I made it flexible by having the user provide __android_log_print at link time. If you count two (or more, in the future) copies of the old approach, it will actually be less code :).\n\nUnfortunately, Trusty\u0027s `trusty_log.h` makes things difficult (`OS_linux.cpp` has just 6 LOC - http://shortn/_1LRsEu1IPZ):\n- It has two completely different variants for Kernel and userspace. Kernel isn\u0027t bad though, only requires mapping between Android\u0027s and Trusty\u0027s log levels (that\u0027s second `#else` block)\n- Userspace variant has two sub-variants as well (on-device and host, but I think host may be dead code - is it?). `_tlog` doesn\u0027t provide va_list version (like `vprintf` is to `printf`), so I had to print to buffer first.\n\nThis is still WIP, but I was about to ask you a question: where is _tlog defined? I can\u0027t find it anywhere in the repo.",
      "parentUuid": "88791b3d_a883c753",
      "revId": "a62560a30a4812c4fdbbfe2feeef4c25ae6a20d8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f986fcb9_0690c268",
        "filename": "libs/binder/trusty/OS.cpp",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2023-12-01T23:07:49Z",
      "side": 1,
      "message": "\u003e where is _tlog defined?\n\nA few places:\n* Regular user space apps: in `trusty/user/base/lib/libc-trusty/logging.c`: https://android.googlesource.com/trusty/lib/+/refs/heads/main/lib/libc-trusty/logging.c#22 (sorry I don\u0027t have a cs.android.com link, Trusty files aren\u0027t included there). This just forwards to `stderr`.\n* Kernel: macro in `trusty/kernel/include/trusty_log.h`\n* Googletest apps in user space, which have an explicit dependency on `trusty/user/base/lib/unittest`: this is where it gets a little tricky. There is a separate overriding implementation of `_tlog` in `unittest.c` at https://android.googlesource.com/trusty/lib/+/refs/heads/main/lib/unittest/unittest.c#94 that logs to both `stderr` and sends the messages over IPC back to Android, so they can be printed there.\n\nI think your stubs still need to call `_tlog`, or duplicate that IPC functionality (which I wouldn\u0027t recommend).",
      "parentUuid": "86f85579_4ee9aa2c",
      "revId": "a62560a30a4812c4fdbbfe2feeef4c25ae6a20d8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47993fcd_52ffed6c",
        "filename": "libs/binder/trusty/OS.cpp",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-12-01T23:19:35Z",
      "side": 1,
      "message": "That\u0027s helpful, thanks!\n\nI do call _tlog in the userspace variant, just not in kernel. It would be best if I could introduce _vtlog, but this may also require vdprintf in LK embedded kernel. Do you think it\u0027s doable?",
      "parentUuid": "f986fcb9_0690c268",
      "revId": "a62560a30a4812c4fdbbfe2feeef4c25ae6a20d8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "442ecb2d_dc2b9e48",
        "filename": "libs/binder/trusty/OS.cpp",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2023-12-01T23:23:27Z",
      "side": 1,
      "message": "```\n#define _dprintf_internal(level, x...) do { if ((level) \u003c\u003d LK_LOGLEVEL) { printf(x); } } while (0)\n#if LK_DEBUGLEVEL_NO_ALIASES\n#define dprintf(level, x...) _dprintf_internal(LK_DEBUGLEVEL_##level, ##x)\n#else\n#define dprintf(level, x...) _dprintf_internal(level, ##x)\n#endif\n```\n\nThis is `dprintf` so yeah I think we can add a `va_list` flavor.",
      "parentUuid": "47993fcd_52ffed6c",
      "revId": "a62560a30a4812c4fdbbfe2feeef4c25ae6a20d8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6a4f514_0764d3de",
        "filename": "libs/binder/trusty/OS.cpp",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-12-01T23:24:26Z",
      "side": 1,
      "message": "This would be great. Who owns LK embedded kernel?",
      "parentUuid": "442ecb2d_dc2b9e48",
      "revId": "a62560a30a4812c4fdbbfe2feeef4c25ae6a20d8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f905461c_9d3df63d",
        "filename": "libs/binder/trusty/OS.cpp",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2023-12-01T23:30:11Z",
      "side": 1,
      "message": "Trusty maintains its own downstream fork of LK, so anything under `external/lk` in the repo is fair game. I have +2 permissions there too.",
      "parentUuid": "c6a4f514_0764d3de",
      "revId": "a62560a30a4812c4fdbbfe2feeef4c25ae6a20d8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c59a944_36fe5cc7",
        "filename": "libs/binder/trusty/OS.cpp",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-12-01T23:37:23Z",
      "side": 1,
      "message": "Sounds good. A few more questions then:\n- since a lot of _tlog implementations are just fprintf to stderr, shouldn\u0027t they all contain a newline?\n- unittest implementation does something fancy from what I see (vsnprintf_filtered, send_msg_wait). Does it expect the entire log message to be passed at once, or I can do it in pieces (multiple calls to _tlog)?",
      "parentUuid": "f905461c_9d3df63d",
      "revId": "a62560a30a4812c4fdbbfe2feeef4c25ae6a20d8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7d6470f_178ad278",
        "filename": "libs/binder/trusty/OS.cpp",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2023-12-01T23:55:36Z",
      "side": 1,
      "message": "\u003e since a lot of _tlog implementations are just fprintf to stderr, shouldn\u0027t they all contain a newline?\n\nCallers are expected to add the newline characters explicitly in the format strings. Not sure why, but LK `dprintf` works like that too.\n\n\u003e  Does it expect the entire log message to be passed at once, or I can do it in pieces (multiple calls to _tlog)?\n\nPieces are fine, e.g., both the old C Googletest-like (`trusty_unittest.h`, see `ASSERT_EXPECT_TEST`) and the actual Googletest back end (`trusty-gtest.h`) do that.",
      "parentUuid": "1c59a944_36fe5cc7",
      "revId": "a62560a30a4812c4fdbbfe2feeef4c25ae6a20d8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f30749c0_6b643af5",
        "filename": "libs/binder/trusty/include/log/log.h",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1809582
      },
      "writtenOn": "2023-12-01T22:44:04Z",
      "side": 1,
      "message": "I think this file is safe to delete, since you\u0027re adding another `log/log.h` and that one is also in the include path. `\u003ctrusty_log.h\u003e` was only needed for the `TLOG*` macros.",
      "revId": "a62560a30a4812c4fdbbfe2feeef4c25ae6a20d8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2145e147_cf537aff",
        "filename": "libs/binder/trusty/include/log/log.h",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1135107
      },
      "writtenOn": "2023-12-01T22:58:27Z",
      "side": 1,
      "message": "That\u0027s on my TODO for this change. I just need to fix a few places that depend on trusty_log and assert being done here.",
      "parentUuid": "f30749c0_6b643af5",
      "revId": "a62560a30a4812c4fdbbfe2feeef4c25ae6a20d8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}